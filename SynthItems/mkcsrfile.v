//
// Generated by Bluespec Compiler, version 2022.01-36-ga6304315 (build a6304315)
//
// On Tue Oct  4 10:37:10 CEST 2022
//
//
// Ports:
// Name                         I/O  size props
// read_csr                       O    32
// RDY_read_csr                   O     1 const
// RDY_write_csr                  O     1 const
// upd_on_ret                     O    32
// RDY_upd_on_ret                 O     1 const
// upd_on_trap                    O    32
// RDY_upd_on_trap                O     1 const
// RDY_incr_minstret              O     1 const
// mv_csr_decode                  O   118
// RDY_mv_csr_decode              O     1 const
// mv_csr_misa_c                  O     1 const
// RDY_mv_csr_misa_c              O     1 const
// mv_curr_priv                   O     2 reg
// RDY_mv_curr_priv               O     1 const
// csr_mstatus                    O    32
// RDY_csr_mstatus                O     1 const
// RDY_clint_msip                 O     1 const
// RDY_clint_mtip                 O     1 const
// RDY_clint_mtime                O     1 const
// RDY_ext_interrupt              O     1 const
// mv_interrupt                   O     1
// RDY_debug_halt_request         O     1 const
// RDY_debug_resume_request       O     1 const
// core_is_halted                 O     1 reg
// RDY_core_is_halted             O     1 const
// step_is_set                    O     1 reg
// RDY_step_is_set                O     1 const
// step_ie                        O     1 reg
// RDY_step_ie                    O     1 const
// core_debugenable               O     1 reg
// RDY_core_debugenable           O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// read_csr_addr                  I    12
// write_csr_addr                 I    12
// write_csr_word                 I    32
// write_csr_lpc                  I     2 unused
// upd_on_trap_cause              I     6
// upd_on_trap_pc                 I    32
// upd_on_trap_tval               I    32
// clint_msip_intrpt              I     1 reg
// clint_mtip_intrpt              I     1 reg
// clint_mtime_c_mtime            I    64 reg
// ext_interrupt_ex_i             I     1 reg
// debug_halt_request_ip          I     1 reg
// debug_resume_request_ip        I     1 reg
// EN_write_csr                   I     1
// EN_incr_minstret               I     1
// EN_clint_msip                  I     1
// EN_clint_mtip                  I     1
// EN_clint_mtime                 I     1
// EN_ext_interrupt               I     1
// EN_debug_halt_request          I     1
// EN_debug_resume_request        I     1
// EN_read_csr                    I     1 unused
// EN_upd_on_ret                  I     1
// EN_upd_on_trap                 I     1
//
// Combinational paths from inputs to outputs:
//   read_csr_addr -> read_csr
//   upd_on_trap_cause -> upd_on_trap
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkcsrfile(CLK,
		 RST_N,

		 read_csr_addr,
		 EN_read_csr,
		 read_csr,
		 RDY_read_csr,

		 write_csr_addr,
		 write_csr_word,
		 write_csr_lpc,
		 EN_write_csr,
		 RDY_write_csr,

		 EN_upd_on_ret,
		 upd_on_ret,
		 RDY_upd_on_ret,

		 upd_on_trap_cause,
		 upd_on_trap_pc,
		 upd_on_trap_tval,
		 EN_upd_on_trap,
		 upd_on_trap,
		 RDY_upd_on_trap,

		 EN_incr_minstret,
		 RDY_incr_minstret,

		 mv_csr_decode,
		 RDY_mv_csr_decode,

		 mv_csr_misa_c,
		 RDY_mv_csr_misa_c,

		 mv_curr_priv,
		 RDY_mv_curr_priv,

		 csr_mstatus,
		 RDY_csr_mstatus,

		 clint_msip_intrpt,
		 EN_clint_msip,
		 RDY_clint_msip,

		 clint_mtip_intrpt,
		 EN_clint_mtip,
		 RDY_clint_mtip,

		 clint_mtime_c_mtime,
		 EN_clint_mtime,
		 RDY_clint_mtime,

		 ext_interrupt_ex_i,
		 EN_ext_interrupt,
		 RDY_ext_interrupt,

		 mv_interrupt,

		 debug_halt_request_ip,
		 EN_debug_halt_request,
		 RDY_debug_halt_request,

		 debug_resume_request_ip,
		 EN_debug_resume_request,
		 RDY_debug_resume_request,

		 core_is_halted,
		 RDY_core_is_halted,

		 step_is_set,
		 RDY_step_is_set,

		 step_ie,
		 RDY_step_ie,

		 core_debugenable,
		 RDY_core_debugenable);
  input  CLK;
  input  RST_N;

  // actionvalue method read_csr
  input  [11 : 0] read_csr_addr;
  input  EN_read_csr;
  output [31 : 0] read_csr;
  output RDY_read_csr;

  // action method write_csr
  input  [11 : 0] write_csr_addr;
  input  [31 : 0] write_csr_word;
  input  [1 : 0] write_csr_lpc;
  input  EN_write_csr;
  output RDY_write_csr;

  // actionvalue method upd_on_ret
  input  EN_upd_on_ret;
  output [31 : 0] upd_on_ret;
  output RDY_upd_on_ret;

  // actionvalue method upd_on_trap
  input  [5 : 0] upd_on_trap_cause;
  input  [31 : 0] upd_on_trap_pc;
  input  [31 : 0] upd_on_trap_tval;
  input  EN_upd_on_trap;
  output [31 : 0] upd_on_trap;
  output RDY_upd_on_trap;

  // action method incr_minstret
  input  EN_incr_minstret;
  output RDY_incr_minstret;

  // value method mv_csr_decode
  output [117 : 0] mv_csr_decode;
  output RDY_mv_csr_decode;

  // value method mv_csr_misa_c
  output mv_csr_misa_c;
  output RDY_mv_csr_misa_c;

  // value method mv_curr_priv
  output [1 : 0] mv_curr_priv;
  output RDY_mv_curr_priv;

  // value method csr_mstatus
  output [31 : 0] csr_mstatus;
  output RDY_csr_mstatus;

  // action method clint_msip
  input  clint_msip_intrpt;
  input  EN_clint_msip;
  output RDY_clint_msip;

  // action method clint_mtip
  input  clint_mtip_intrpt;
  input  EN_clint_mtip;
  output RDY_clint_mtip;

  // action method clint_mtime
  input  [63 : 0] clint_mtime_c_mtime;
  input  EN_clint_mtime;
  output RDY_clint_mtime;

  // action method ext_interrupt
  input  ext_interrupt_ex_i;
  input  EN_ext_interrupt;
  output RDY_ext_interrupt;

  // value method mv_interrupt
  output mv_interrupt;

  // action method debug_halt_request
  input  debug_halt_request_ip;
  input  EN_debug_halt_request;
  output RDY_debug_halt_request;

  // action method debug_resume_request
  input  debug_resume_request_ip;
  input  EN_debug_resume_request;
  output RDY_debug_resume_request;

  // value method core_is_halted
  output core_is_halted;
  output RDY_core_is_halted;

  // value method step_is_set
  output step_is_set;
  output RDY_step_is_set;

  // value method step_ie
  output step_ie;
  output RDY_step_ie;

  // value method core_debugenable
  output core_debugenable;
  output RDY_core_debugenable;

  // signals for module outputs
  reg [31 : 0] read_csr;
  wire [117 : 0] mv_csr_decode;
  wire [31 : 0] csr_mstatus, upd_on_ret, upd_on_trap;
  wire [1 : 0] mv_curr_priv;
  wire RDY_clint_msip,
       RDY_clint_mtime,
       RDY_clint_mtip,
       RDY_core_debugenable,
       RDY_core_is_halted,
       RDY_csr_mstatus,
       RDY_debug_halt_request,
       RDY_debug_resume_request,
       RDY_ext_interrupt,
       RDY_incr_minstret,
       RDY_mv_csr_decode,
       RDY_mv_csr_misa_c,
       RDY_mv_curr_priv,
       RDY_read_csr,
       RDY_step_ie,
       RDY_step_is_set,
       RDY_upd_on_ret,
       RDY_upd_on_trap,
       RDY_write_csr,
       core_debugenable,
       core_is_halted,
       mv_csr_misa_c,
       mv_interrupt,
       step_ie,
       step_is_set;

  // register fflags
  reg [4 : 0] fflags;
  wire [4 : 0] fflags_D_IN;
  wire fflags_EN;

  // register frm
  reg [2 : 0] frm;
  wire [2 : 0] frm_D_IN;
  wire frm_EN;

  // register fs
  reg [1 : 0] fs;
  wire [1 : 0] fs_D_IN;
  wire fs_EN;

  // register mcycle
  reg [31 : 0] mcycle;
  wire [31 : 0] mcycle_D_IN;
  wire mcycle_EN;

  // register mcycleh
  reg [31 : 0] mcycleh;
  wire [31 : 0] mcycleh_D_IN;
  wire mcycleh_EN;

  // register minstret
  reg [31 : 0] minstret;
  wire [31 : 0] minstret_D_IN;
  wire minstret_EN;

  // register minstreth
  reg [31 : 0] minstreth;
  wire [31 : 0] minstreth_D_IN;
  wire minstreth_EN;

  // register misa_i
  reg misa_i;
  wire misa_i_D_IN, misa_i_EN;

  // register misa_u
  reg misa_u;
  wire misa_u_D_IN, misa_u_EN;

  // register rg_clint_mtime
  reg [63 : 0] rg_clint_mtime;
  wire [63 : 0] rg_clint_mtime_D_IN;
  wire rg_clint_mtime_EN;

  // register rg_core_halted
  reg rg_core_halted;
  wire rg_core_halted_D_IN, rg_core_halted_EN;

  // register rg_csr_denable
  reg rg_csr_denable;
  wire rg_csr_denable_D_IN, rg_csr_denable_EN;

  // register rg_csr_dpc
  reg [30 : 0] rg_csr_dpc;
  wire [30 : 0] rg_csr_dpc_D_IN;
  wire rg_csr_dpc_EN;

  // register rg_csr_dscratch
  reg [31 : 0] rg_csr_dscratch;
  wire [31 : 0] rg_csr_dscratch_D_IN;
  wire rg_csr_dscratch_EN;

  // register rg_csr_dtvec
  reg [30 : 0] rg_csr_dtvec;
  wire [30 : 0] rg_csr_dtvec_D_IN;
  wire rg_csr_dtvec_EN;

  // register rg_dcsr_cause
  reg [2 : 0] rg_dcsr_cause;
  wire [2 : 0] rg_dcsr_cause_D_IN;
  wire rg_dcsr_cause_EN;

  // register rg_dcsr_ebreakm
  reg rg_dcsr_ebreakm;
  wire rg_dcsr_ebreakm_D_IN, rg_dcsr_ebreakm_EN;

  // register rg_dcsr_ebreaks
  reg rg_dcsr_ebreaks;
  wire rg_dcsr_ebreaks_D_IN, rg_dcsr_ebreaks_EN;

  // register rg_dcsr_ebreaku
  reg rg_dcsr_ebreaku;
  wire rg_dcsr_ebreaku_D_IN, rg_dcsr_ebreaku_EN;

  // register rg_dcsr_mprven
  reg rg_dcsr_mprven;
  wire rg_dcsr_mprven_D_IN, rg_dcsr_mprven_EN;

  // register rg_dcsr_nmip
  reg rg_dcsr_nmip;
  wire rg_dcsr_nmip_D_IN, rg_dcsr_nmip_EN;

  // register rg_dcsr_prv
  reg [1 : 0] rg_dcsr_prv;
  wire [1 : 0] rg_dcsr_prv_D_IN;
  wire rg_dcsr_prv_EN;

  // register rg_dcsr_step
  reg rg_dcsr_step;
  wire rg_dcsr_step_D_IN, rg_dcsr_step_EN;

  // register rg_dcsr_stepie
  reg rg_dcsr_stepie;
  wire rg_dcsr_stepie_D_IN, rg_dcsr_stepie_EN;

  // register rg_dcsr_stopcount
  reg rg_dcsr_stopcount;
  wire rg_dcsr_stopcount_D_IN, rg_dcsr_stopcount_EN;

  // register rg_dcsr_stoptime
  reg rg_dcsr_stoptime;
  wire rg_dcsr_stoptime_D_IN, rg_dcsr_stoptime_EN;

  // register rg_halt_int
  reg rg_halt_int;
  wire rg_halt_int_D_IN, rg_halt_int_EN;

  // register rg_mcause
  reg [4 : 0] rg_mcause;
  wire [4 : 0] rg_mcause_D_IN;
  wire rg_mcause_EN;

  // register rg_mcounteren
  reg [2 : 0] rg_mcounteren;
  wire [2 : 0] rg_mcounteren_D_IN;
  wire rg_mcounteren_EN;

  // register rg_meie
  reg rg_meie;
  wire rg_meie_D_IN, rg_meie_EN;

  // register rg_meip
  reg rg_meip;
  wire rg_meip_D_IN, rg_meip_EN;

  // register rg_mepc
  reg [30 : 0] rg_mepc;
  wire [30 : 0] rg_mepc_D_IN;
  wire rg_mepc_EN;

  // register rg_mie
  reg rg_mie;
  reg rg_mie_D_IN;
  wire rg_mie_EN;

  // register rg_minterrupt
  reg rg_minterrupt;
  wire rg_minterrupt_D_IN, rg_minterrupt_EN;

  // register rg_mode
  reg [1 : 0] rg_mode;
  wire [1 : 0] rg_mode_D_IN;
  wire rg_mode_EN;

  // register rg_mpie
  reg rg_mpie;
  reg rg_mpie_D_IN;
  wire rg_mpie_EN;

  // register rg_mpp
  reg [1 : 0] rg_mpp;
  reg [1 : 0] rg_mpp_D_IN;
  wire rg_mpp_EN;

  // register rg_mprv
  reg rg_mprv;
  wire rg_mprv_D_IN, rg_mprv_EN;

  // register rg_mscratch
  reg [31 : 0] rg_mscratch;
  wire [31 : 0] rg_mscratch_D_IN;
  wire rg_mscratch_EN;

  // register rg_msie
  reg rg_msie;
  wire rg_msie_D_IN, rg_msie_EN;

  // register rg_msip
  reg rg_msip;
  wire rg_msip_D_IN, rg_msip_EN;

  // register rg_mtie
  reg rg_mtie;
  wire rg_mtie_D_IN, rg_mtie_EN;

  // register rg_mtip
  reg rg_mtip;
  wire rg_mtip_D_IN, rg_mtip_EN;

  // register rg_mtval
  reg [31 : 0] rg_mtval;
  wire [31 : 0] rg_mtval_D_IN;
  wire rg_mtval_EN;

  // register rg_mtvec
  reg [29 : 0] rg_mtvec;
  wire [29 : 0] rg_mtvec_D_IN;
  wire rg_mtvec_EN;

  // register rg_prv
  reg [1 : 0] rg_prv;
  wire [1 : 0] rg_prv_D_IN;
  wire rg_prv_EN;

  // register rg_resume_int
  reg rg_resume_int;
  wire rg_resume_int_D_IN, rg_resume_int_EN;

  // register rg_ueie
  reg rg_ueie;
  wire rg_ueie_D_IN, rg_ueie_EN;

  // register rg_uie
  reg rg_uie;
  wire rg_uie_D_IN, rg_uie_EN;

  // register rg_upie
  reg rg_upie;
  wire rg_upie_D_IN, rg_upie_EN;

  // register rg_uscratch
  reg [31 : 0] rg_uscratch;
  wire [31 : 0] rg_uscratch_D_IN;
  wire rg_uscratch_EN;

  // register rg_usie
  reg rg_usie;
  wire rg_usie_D_IN, rg_usie_EN;

  // register rg_utie
  reg rg_utie;
  wire rg_utie_D_IN, rg_utie_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_increment_cycle_counter,
       CAN_FIRE_clint_msip,
       CAN_FIRE_clint_mtime,
       CAN_FIRE_clint_mtip,
       CAN_FIRE_debug_halt_request,
       CAN_FIRE_debug_resume_request,
       CAN_FIRE_ext_interrupt,
       CAN_FIRE_incr_minstret,
       CAN_FIRE_read_csr,
       CAN_FIRE_upd_on_ret,
       CAN_FIRE_upd_on_trap,
       CAN_FIRE_write_csr,
       WILL_FIRE_RL_increment_cycle_counter,
       WILL_FIRE_clint_msip,
       WILL_FIRE_clint_mtime,
       WILL_FIRE_clint_mtip,
       WILL_FIRE_debug_halt_request,
       WILL_FIRE_debug_resume_request,
       WILL_FIRE_ext_interrupt,
       WILL_FIRE_incr_minstret,
       WILL_FIRE_read_csr,
       WILL_FIRE_upd_on_ret,
       WILL_FIRE_upd_on_trap,
       WILL_FIRE_write_csr;

  // inputs to muxes for submodule ports
  wire [1 : 0] MUX_rg_prv_write_1__VAL_2;
  wire MUX_mcycle_write_1__SEL_1,
       MUX_mcycleh_write_1__SEL_1,
       MUX_minstret_write_1__SEL_1,
       MUX_minstreth_write_1__SEL_1,
       MUX_rg_csr_dpc_write_1__SEL_1,
       MUX_rg_dcsr_prv_write_1__SEL_2,
       MUX_rg_mcause_write_1__SEL_1,
       MUX_rg_mcause_write_1__SEL_2,
       MUX_rg_mepc_write_1__SEL_1,
       MUX_rg_mie_write_1__SEL_1,
       MUX_rg_mpp_write_1__SEL_1,
       MUX_rg_mtval_write_1__SEL_1;

  // remaining internal signals
  wire [63 : 0] instr__h5180,
		instr__h5181,
		mcycleh_CONCAT_mcycle_PLUS_1___d4,
		new_cycle__h1768;
  wire [31 : 0] data___1__h1946,
		data___1__h1952,
		data___1__h1961,
		data___1__h1967,
		data___1__h2085,
		data___1__h2092,
		data___1__h2097,
		data___1__h2128,
		data___1__h2134,
		data___1__h2148,
		data___1__h2162,
		data___1__h2187,
		data___1__h2218,
		data___1__h2262,
		v__h4791,
		v__h4873;
  wire [30 : 0] result__h4534;
  wire [29 : 0] IF_rg_mode_14_EQ_1_02_AND_upd_on_trap_cause_BI_ETC___d306,
		r1__read__h2022;
  wire [28 : 0] r1__read__h2024;
  wire [27 : 0] r1__read__h2026;
  wire [26 : 0] r1__read__h2028;
  wire [25 : 0] misa__h140, r1__read__h2030;
  wire [22 : 0] r1__read__h2032;
  wire [21 : 0] r1__read__h2034;
  wire [20 : 0] r1__read__h2036;
  wire [19 : 0] r1__read__h2038;
  wire [18 : 0] r1__read__h2040;
  wire [17 : 0] r1__read__h2042;
  wire [16 : 0] r1__read__h2044;
  wire [13 : 0] csr_mip__h1750;
  wire [11 : 0] csr_mie__h1751, x__h5392;
  wire [7 : 0] x__h2088;
  wire r__h2221,
       upd_on_trap_cause_ULE_53___d287,
       upd_on_trap_cause_ULT_49___d285,
       write_csr_addr_EQ_0x1_86_AND_NOT_fflags_6_EQ_w_ETC___d204,
       write_csr_addr_EQ_0x2_92_AND_NOT_frm_5_EQ_writ_ETC___d202,
       y__h5245;

  // actionvalue method read_csr
  always@(read_csr_addr or
	  data___1__h2097 or
	  data___1__h2092 or
	  data___1__h2085 or
	  data___1__h2218 or
	  misa_u or
	  misa_i or
	  data___1__h2187 or
	  data___1__h2262 or
	  data___1__h2128 or
	  rg_mscratch or
	  data___1__h2148 or
	  data___1__h2134 or
	  rg_mtval or
	  data___1__h2162 or
	  data___1__h1967 or
	  data___1__h1961 or
	  rg_csr_dscratch or
	  data___1__h1952 or
	  data___1__h1946 or
	  mcycle or rg_clint_mtime or minstret or mcycleh or minstreth)
  begin
    case (read_csr_addr)
      12'h001: read_csr = data___1__h2097;
      12'h002: read_csr = data___1__h2092;
      12'h003: read_csr = data___1__h2085;
      12'h300: read_csr = data___1__h2218;
      12'h301: read_csr = { 11'd512, misa_u, 11'd0, misa_i, 8'd0 };
      12'h304: read_csr = data___1__h2187;
      12'h305: read_csr = data___1__h2262;
      12'h306: read_csr = data___1__h2128;
      12'h340: read_csr = rg_mscratch;
      12'h341: read_csr = data___1__h2148;
      12'h342: read_csr = data___1__h2134;
      12'h343: read_csr = rg_mtval;
      12'h344: read_csr = data___1__h2162;
      12'h7B0: read_csr = data___1__h1967;
      12'h7B1: read_csr = data___1__h1961;
      12'h7B2: read_csr = rg_csr_dscratch;
      12'h7C0: read_csr = data___1__h1952;
      12'h7C1: read_csr = data___1__h1946;
      12'h800: read_csr = 32'd0;
      12'hB00, 12'hC00: read_csr = mcycle;
      12'hB01, 12'hC01: read_csr = rg_clint_mtime[31:0];
      12'hB02, 12'hC02: read_csr = minstret;
      12'hB80, 12'hC80: read_csr = mcycleh;
      12'hB81: read_csr = rg_clint_mtime[63:32];
      12'hB82, 12'hC82: read_csr = minstreth;
      default: read_csr = 32'd0;
    endcase
  end
  assign RDY_read_csr = 1'd1 ;
  assign CAN_FIRE_read_csr = 1'd1 ;
  assign WILL_FIRE_read_csr = EN_read_csr ;

  // action method write_csr
  assign RDY_write_csr = 1'd1 ;
  assign CAN_FIRE_write_csr = 1'd1 ;
  assign WILL_FIRE_write_csr = EN_write_csr ;

  // actionvalue method upd_on_ret
  assign upd_on_ret = { result__h4534, 1'b0 } ;
  assign RDY_upd_on_ret = 1'd1 ;
  assign CAN_FIRE_upd_on_ret = 1'd1 ;
  assign WILL_FIRE_upd_on_ret = EN_upd_on_ret ;

  // actionvalue method upd_on_trap
  assign upd_on_trap =
	     (!upd_on_trap_cause_ULT_49___d285 &&
	      upd_on_trap_cause_ULE_53___d287) ?
	       data___1__h1952 :
	       v__h4791 ;
  assign RDY_upd_on_trap = 1'd1 ;
  assign CAN_FIRE_upd_on_trap = 1'd1 ;
  assign WILL_FIRE_upd_on_trap = EN_upd_on_trap ;

  // action method incr_minstret
  assign RDY_incr_minstret = 1'd1 ;
  assign CAN_FIRE_incr_minstret = 1'd1 ;
  assign WILL_FIRE_incr_minstret = EN_incr_minstret ;

  // value method mv_csr_decode
  assign mv_csr_decode =
	     { rg_prv,
	       csr_mip__h1750,
	       csr_mie__h1751,
	       misa__h140,
	       data___1__h2218,
	       data___1__h1967 } ;
  assign RDY_mv_csr_decode = 1'd1 ;

  // value method mv_csr_misa_c
  assign mv_csr_misa_c = 1'd0 ;
  assign RDY_mv_csr_misa_c = 1'd1 ;

  // value method mv_curr_priv
  assign mv_curr_priv = rg_prv ;
  assign RDY_mv_curr_priv = 1'd1 ;

  // value method csr_mstatus
  assign csr_mstatus =
	     { r__h2221,
	       13'd0,
	       rg_mprv,
	       2'd0,
	       fs,
	       rg_mpp,
	       3'd0,
	       rg_mpie,
	       2'd0,
	       rg_upie,
	       rg_mie,
	       2'd0,
	       rg_uie } ;
  assign RDY_csr_mstatus = 1'd1 ;

  // action method clint_msip
  assign RDY_clint_msip = 1'd1 ;
  assign CAN_FIRE_clint_msip = 1'd1 ;
  assign WILL_FIRE_clint_msip = EN_clint_msip ;

  // action method clint_mtip
  assign RDY_clint_mtip = 1'd1 ;
  assign CAN_FIRE_clint_mtip = 1'd1 ;
  assign WILL_FIRE_clint_mtip = EN_clint_mtip ;

  // action method clint_mtime
  assign RDY_clint_mtime = 1'd1 ;
  assign CAN_FIRE_clint_mtime = 1'd1 ;
  assign WILL_FIRE_clint_mtime = EN_clint_mtime ;

  // action method ext_interrupt
  assign RDY_ext_interrupt = 1'd1 ;
  assign CAN_FIRE_ext_interrupt = 1'd1 ;
  assign WILL_FIRE_ext_interrupt = EN_ext_interrupt ;

  // value method mv_interrupt
  assign mv_interrupt = x__h5392 != 12'd0 ;

  // action method debug_halt_request
  assign RDY_debug_halt_request = 1'd1 ;
  assign CAN_FIRE_debug_halt_request = 1'd1 ;
  assign WILL_FIRE_debug_halt_request = EN_debug_halt_request ;

  // action method debug_resume_request
  assign RDY_debug_resume_request = 1'd1 ;
  assign CAN_FIRE_debug_resume_request = 1'd1 ;
  assign WILL_FIRE_debug_resume_request = EN_debug_resume_request ;

  // value method core_is_halted
  assign core_is_halted = rg_core_halted ;
  assign RDY_core_is_halted = 1'd1 ;

  // value method step_is_set
  assign step_is_set = rg_dcsr_step ;
  assign RDY_step_is_set = 1'd1 ;

  // value method step_ie
  assign step_ie = rg_dcsr_stepie ;
  assign RDY_step_ie = 1'd1 ;

  // value method core_debugenable
  assign core_debugenable = rg_csr_denable ;
  assign RDY_core_debugenable = 1'd1 ;

  // rule RL_increment_cycle_counter
  assign CAN_FIRE_RL_increment_cycle_counter = 1'd1 ;
  assign WILL_FIRE_RL_increment_cycle_counter = !EN_write_csr ;

  // inputs to muxes for submodule ports
  assign MUX_mcycle_write_1__SEL_1 =
	     EN_write_csr && write_csr_addr == 12'hB00 ;
  assign MUX_mcycleh_write_1__SEL_1 =
	     EN_write_csr && write_csr_addr == 12'hB80 ;
  assign MUX_minstret_write_1__SEL_1 =
	     EN_write_csr && write_csr_addr == 12'hB02 ;
  assign MUX_minstreth_write_1__SEL_1 =
	     EN_write_csr && write_csr_addr == 12'hB82 ;
  assign MUX_rg_csr_dpc_write_1__SEL_1 =
	     EN_upd_on_trap && !upd_on_trap_cause_ULT_49___d285 &&
	     upd_on_trap_cause_ULE_53___d287 ;
  assign MUX_rg_dcsr_prv_write_1__SEL_2 =
	     EN_write_csr && write_csr_addr == 12'h7B0 ;
  assign MUX_rg_mcause_write_1__SEL_1 =
	     EN_write_csr && write_csr_addr == 12'h342 ;
  assign MUX_rg_mcause_write_1__SEL_2 =
	     EN_upd_on_trap &&
	     (upd_on_trap_cause_ULT_49___d285 ||
	      !upd_on_trap_cause_ULE_53___d287) &&
	     upd_on_trap_cause != 6'd54 ;
  assign MUX_rg_mepc_write_1__SEL_1 =
	     EN_write_csr && write_csr_addr == 12'h341 ;
  assign MUX_rg_mie_write_1__SEL_1 =
	     EN_write_csr && write_csr_addr == 12'h300 ;
  assign MUX_rg_mpp_write_1__SEL_1 =
	     EN_write_csr && write_csr_addr == 12'h300 &&
	     (write_csr_word[12:11] == 2'd3 ||
	      misa_u && write_csr_word[12:11] == 2'd0) ;
  assign MUX_rg_mtval_write_1__SEL_1 =
	     EN_write_csr && write_csr_addr == 12'h343 ;
  assign MUX_rg_prv_write_1__VAL_2 =
	     (!upd_on_trap_cause_ULT_49___d285 &&
	      upd_on_trap_cause_ULE_53___d287) ?
	       2'd3 :
	       ((upd_on_trap_cause == 6'd54) ? rg_dcsr_prv : 2'd3) ;

  // register fflags
  assign fflags_D_IN = write_csr_word[4:0] ;
  assign fflags_EN =
	     EN_write_csr &&
	     (write_csr_addr == 12'h001 || write_csr_addr == 12'h003) ;

  // register frm
  assign frm_D_IN =
	     (write_csr_addr == 12'h002) ?
	       write_csr_word[2:0] :
	       write_csr_word[7:5] ;
  assign frm_EN =
	     EN_write_csr &&
	     (write_csr_addr == 12'h002 || write_csr_addr == 12'h003) ;

  // register fs
  assign fs_D_IN =
	     (write_csr_addr == 12'h300) ? write_csr_word[14:13] : 2'b11 ;
  assign fs_EN =
	     EN_write_csr && write_csr_addr != 12'h301 &&
	     write_csr_addr != 12'h305 &&
	     (write_csr_addr == 12'h300 ||
	      write_csr_addr != 12'h304 && write_csr_addr != 12'h344 &&
	      write_csr_addr != 12'hB00 &&
	      write_csr_addr != 12'hB02 &&
	      write_csr_addr != 12'hB80 &&
	      write_csr_addr != 12'hB82 &&
	      write_csr_addr != 12'h341 &&
	      write_csr_addr != 12'h343 &&
	      write_csr_addr != 12'h340 &&
	      write_csr_addr != 12'h342 &&
	      write_csr_addr != 12'h306 &&
	      write_csr_addr != 12'h040 &&
	      write_csr_addr_EQ_0x1_86_AND_NOT_fflags_6_EQ_w_ETC___d204) ;

  // register mcycle
  assign mcycle_D_IN =
	     MUX_mcycle_write_1__SEL_1 ?
	       write_csr_word :
	       mcycleh_CONCAT_mcycle_PLUS_1___d4[31:0] ;
  assign mcycle_EN =
	     EN_write_csr && write_csr_addr == 12'hB00 ||
	     WILL_FIRE_RL_increment_cycle_counter ;

  // register mcycleh
  assign mcycleh_D_IN =
	     MUX_mcycleh_write_1__SEL_1 ?
	       write_csr_word :
	       mcycleh_CONCAT_mcycle_PLUS_1___d4[63:32] ;
  assign mcycleh_EN =
	     EN_write_csr && write_csr_addr == 12'hB80 ||
	     WILL_FIRE_RL_increment_cycle_counter ;

  // register minstret
  assign minstret_D_IN =
	     MUX_minstret_write_1__SEL_1 ?
	       write_csr_word :
	       instr__h5181[31:0] ;
  assign minstret_EN =
	     EN_write_csr && write_csr_addr == 12'hB02 || EN_incr_minstret ;

  // register minstreth
  assign minstreth_D_IN =
	     MUX_minstreth_write_1__SEL_1 ?
	       write_csr_word :
	       instr__h5181[63:32] ;
  assign minstreth_EN =
	     EN_write_csr && write_csr_addr == 12'hB82 || EN_incr_minstret ;

  // register misa_i
  assign misa_i_D_IN = write_csr_word[8] ;
  assign misa_i_EN = EN_write_csr && write_csr_addr == 12'h301 ;

  // register misa_u
  assign misa_u_D_IN = write_csr_word[20] ;
  assign misa_u_EN = EN_write_csr && write_csr_addr == 12'h301 ;

  // register rg_clint_mtime
  assign rg_clint_mtime_D_IN = clint_mtime_c_mtime ;
  assign rg_clint_mtime_EN = EN_clint_mtime ;

  // register rg_core_halted
  assign rg_core_halted_D_IN =
	     !upd_on_trap_cause_ULT_49___d285 &&
	     upd_on_trap_cause_ULE_53___d287 ;
  assign rg_core_halted_EN =
	     EN_upd_on_trap &&
	     (!upd_on_trap_cause_ULT_49___d285 &&
	      upd_on_trap_cause_ULE_53___d287 ||
	      upd_on_trap_cause == 6'd54) ;

  // register rg_csr_denable
  assign rg_csr_denable_D_IN = write_csr_word[0] ;
  assign rg_csr_denable_EN = EN_write_csr && write_csr_addr == 12'h7C1 ;

  // register rg_csr_dpc
  assign rg_csr_dpc_D_IN =
	     MUX_rg_csr_dpc_write_1__SEL_1 ?
	       upd_on_trap_pc[31:1] :
	       write_csr_word[31:1] ;
  assign rg_csr_dpc_EN =
	     EN_upd_on_trap && !upd_on_trap_cause_ULT_49___d285 &&
	     upd_on_trap_cause_ULE_53___d287 ||
	     EN_write_csr && write_csr_addr == 12'h7B1 ;

  // register rg_csr_dscratch
  assign rg_csr_dscratch_D_IN = write_csr_word ;
  assign rg_csr_dscratch_EN = EN_write_csr && write_csr_addr == 12'h7B2 ;

  // register rg_csr_dtvec
  assign rg_csr_dtvec_D_IN = write_csr_word[31:1] ;
  assign rg_csr_dtvec_EN = EN_write_csr && write_csr_addr == 12'h7C0 ;

  // register rg_dcsr_cause
  assign rg_dcsr_cause_D_IN = upd_on_trap_cause[2:0] ;
  assign rg_dcsr_cause_EN = MUX_rg_csr_dpc_write_1__SEL_1 ;

  // register rg_dcsr_ebreakm
  assign rg_dcsr_ebreakm_D_IN = write_csr_word[15] ;
  assign rg_dcsr_ebreakm_EN = MUX_rg_dcsr_prv_write_1__SEL_2 ;

  // register rg_dcsr_ebreaks
  assign rg_dcsr_ebreaks_D_IN = write_csr_word[13] ;
  assign rg_dcsr_ebreaks_EN = MUX_rg_dcsr_prv_write_1__SEL_2 ;

  // register rg_dcsr_ebreaku
  assign rg_dcsr_ebreaku_D_IN = write_csr_word[12] ;
  assign rg_dcsr_ebreaku_EN = MUX_rg_dcsr_prv_write_1__SEL_2 ;

  // register rg_dcsr_mprven
  assign rg_dcsr_mprven_D_IN = write_csr_word[4] ;
  assign rg_dcsr_mprven_EN = MUX_rg_dcsr_prv_write_1__SEL_2 ;

  // register rg_dcsr_nmip
  assign rg_dcsr_nmip_D_IN = 1'b0 ;
  assign rg_dcsr_nmip_EN = 1'b0 ;

  // register rg_dcsr_prv
  assign rg_dcsr_prv_D_IN =
	     MUX_rg_csr_dpc_write_1__SEL_1 ? rg_prv : write_csr_word[1:0] ;
  assign rg_dcsr_prv_EN =
	     EN_upd_on_trap && !upd_on_trap_cause_ULT_49___d285 &&
	     upd_on_trap_cause_ULE_53___d287 ||
	     EN_write_csr && write_csr_addr == 12'h7B0 ;

  // register rg_dcsr_step
  assign rg_dcsr_step_D_IN = write_csr_word[2] ;
  assign rg_dcsr_step_EN = MUX_rg_dcsr_prv_write_1__SEL_2 ;

  // register rg_dcsr_stepie
  assign rg_dcsr_stepie_D_IN = write_csr_word[11] ;
  assign rg_dcsr_stepie_EN = MUX_rg_dcsr_prv_write_1__SEL_2 ;

  // register rg_dcsr_stopcount
  assign rg_dcsr_stopcount_D_IN = write_csr_word[10] ;
  assign rg_dcsr_stopcount_EN = MUX_rg_dcsr_prv_write_1__SEL_2 ;

  // register rg_dcsr_stoptime
  assign rg_dcsr_stoptime_D_IN = write_csr_word[9] ;
  assign rg_dcsr_stoptime_EN = MUX_rg_dcsr_prv_write_1__SEL_2 ;

  // register rg_halt_int
  assign rg_halt_int_D_IN = debug_halt_request_ip ;
  assign rg_halt_int_EN = EN_debug_halt_request ;

  // register rg_mcause
  assign rg_mcause_D_IN =
	     MUX_rg_mcause_write_1__SEL_1 ?
	       write_csr_word[4:0] :
	       upd_on_trap_cause[4:0] ;
  assign rg_mcause_EN =
	     EN_write_csr && write_csr_addr == 12'h342 ||
	     EN_upd_on_trap &&
	     (upd_on_trap_cause_ULT_49___d285 ||
	      !upd_on_trap_cause_ULE_53___d287) &&
	     upd_on_trap_cause != 6'd54 ;

  // register rg_mcounteren
  assign rg_mcounteren_D_IN = write_csr_word[2:0] ;
  assign rg_mcounteren_EN = EN_write_csr && write_csr_addr == 12'h306 ;

  // register rg_meie
  assign rg_meie_D_IN = write_csr_word[11] ;
  assign rg_meie_EN = EN_write_csr && write_csr_addr == 12'h304 ;

  // register rg_meip
  assign rg_meip_D_IN = ext_interrupt_ex_i ;
  assign rg_meip_EN = EN_ext_interrupt && rg_prv == 2'd3 ;

  // register rg_mepc
  assign rg_mepc_D_IN =
	     MUX_rg_mepc_write_1__SEL_1 ?
	       write_csr_word[31:1] :
	       upd_on_trap_pc[31:1] ;
  assign rg_mepc_EN =
	     EN_write_csr && write_csr_addr == 12'h341 ||
	     EN_upd_on_trap &&
	     (upd_on_trap_cause_ULT_49___d285 ||
	      !upd_on_trap_cause_ULE_53___d287) &&
	     upd_on_trap_cause != 6'd54 ;

  // register rg_mie
  always@(MUX_rg_mie_write_1__SEL_1 or
	  write_csr_word or
	  MUX_rg_mcause_write_1__SEL_2 or EN_upd_on_ret or rg_mpie)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_mie_write_1__SEL_1: rg_mie_D_IN = write_csr_word[3];
      MUX_rg_mcause_write_1__SEL_2: rg_mie_D_IN = 1'd0;
      EN_upd_on_ret: rg_mie_D_IN = rg_mpie;
      default: rg_mie_D_IN = 1'bx /* unspecified value */ ;
    endcase
  end
  assign rg_mie_EN =
	     EN_write_csr && write_csr_addr == 12'h300 ||
	     EN_upd_on_trap &&
	     (upd_on_trap_cause_ULT_49___d285 ||
	      !upd_on_trap_cause_ULE_53___d287) &&
	     upd_on_trap_cause != 6'd54 ||
	     EN_upd_on_ret ;

  // register rg_minterrupt
  assign rg_minterrupt_D_IN =
	     MUX_rg_mcause_write_1__SEL_1 ?
	       write_csr_word[31] :
	       upd_on_trap_cause[5] ;
  assign rg_minterrupt_EN =
	     EN_write_csr && write_csr_addr == 12'h342 ||
	     EN_upd_on_trap &&
	     (upd_on_trap_cause_ULT_49___d285 ||
	      !upd_on_trap_cause_ULE_53___d287) &&
	     upd_on_trap_cause != 6'd54 ;

  // register rg_mode
  assign rg_mode_D_IN = write_csr_word[1:0] ;
  assign rg_mode_EN =
	     EN_write_csr && write_csr_addr == 12'h305 &&
	     write_csr_word[1:0] < 2'd2 ;

  // register rg_mpie
  always@(MUX_rg_mie_write_1__SEL_1 or
	  write_csr_word or
	  MUX_rg_mcause_write_1__SEL_2 or rg_mie or EN_upd_on_ret)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_mie_write_1__SEL_1: rg_mpie_D_IN = write_csr_word[7];
      MUX_rg_mcause_write_1__SEL_2: rg_mpie_D_IN = rg_mie;
      EN_upd_on_ret: rg_mpie_D_IN = 1'd1;
      default: rg_mpie_D_IN = 1'bx /* unspecified value */ ;
    endcase
  end
  assign rg_mpie_EN =
	     EN_write_csr && write_csr_addr == 12'h300 ||
	     EN_upd_on_trap &&
	     (upd_on_trap_cause_ULT_49___d285 ||
	      !upd_on_trap_cause_ULE_53___d287) &&
	     upd_on_trap_cause != 6'd54 ||
	     EN_upd_on_ret ;

  // register rg_mpp
  always@(MUX_rg_mpp_write_1__SEL_1 or
	  write_csr_word or
	  MUX_rg_mcause_write_1__SEL_2 or rg_prv or EN_upd_on_ret)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_mpp_write_1__SEL_1: rg_mpp_D_IN = write_csr_word[12:11];
      MUX_rg_mcause_write_1__SEL_2: rg_mpp_D_IN = rg_prv;
      EN_upd_on_ret: rg_mpp_D_IN = 2'd0;
      default: rg_mpp_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign rg_mpp_EN =
	     MUX_rg_mpp_write_1__SEL_1 ||
	     EN_upd_on_trap &&
	     (upd_on_trap_cause_ULT_49___d285 ||
	      !upd_on_trap_cause_ULE_53___d287) &&
	     upd_on_trap_cause != 6'd54 ||
	     EN_upd_on_ret ;

  // register rg_mprv
  assign rg_mprv_D_IN = write_csr_word[17] ;
  assign rg_mprv_EN = MUX_rg_mie_write_1__SEL_1 ;

  // register rg_mscratch
  assign rg_mscratch_D_IN = write_csr_word ;
  assign rg_mscratch_EN = EN_write_csr && write_csr_addr == 12'h340 ;

  // register rg_msie
  assign rg_msie_D_IN = write_csr_word[3] ;
  assign rg_msie_EN = EN_write_csr && write_csr_addr == 12'h304 ;

  // register rg_msip
  assign rg_msip_D_IN = clint_msip_intrpt ;
  assign rg_msip_EN = EN_clint_msip ;

  // register rg_mtie
  assign rg_mtie_D_IN = write_csr_word[7] ;
  assign rg_mtie_EN = EN_write_csr && write_csr_addr == 12'h304 ;

  // register rg_mtip
  assign rg_mtip_D_IN = clint_mtip_intrpt ;
  assign rg_mtip_EN = EN_clint_mtip ;

  // register rg_mtval
  assign rg_mtval_D_IN =
	     MUX_rg_mtval_write_1__SEL_1 ? write_csr_word : upd_on_trap_tval ;
  assign rg_mtval_EN =
	     EN_write_csr && write_csr_addr == 12'h343 ||
	     EN_upd_on_trap &&
	     (upd_on_trap_cause_ULT_49___d285 ||
	      !upd_on_trap_cause_ULE_53___d287) &&
	     upd_on_trap_cause != 6'd54 ;

  // register rg_mtvec
  assign rg_mtvec_D_IN = write_csr_word[31:2] ;
  assign rg_mtvec_EN = EN_write_csr && write_csr_addr == 12'h305 ;

  // register rg_prv
  assign rg_prv_D_IN = EN_upd_on_ret ? rg_mpp : MUX_rg_prv_write_1__VAL_2 ;
  assign rg_prv_EN = EN_upd_on_ret || EN_upd_on_trap ;

  // register rg_resume_int
  assign rg_resume_int_D_IN = debug_resume_request_ip ;
  assign rg_resume_int_EN = EN_debug_resume_request ;

  // register rg_ueie
  assign rg_ueie_D_IN = write_csr_word[8] ;
  assign rg_ueie_EN = EN_write_csr && write_csr_addr == 12'h304 ;

  // register rg_uie
  assign rg_uie_D_IN = write_csr_word[0] ;
  assign rg_uie_EN = MUX_rg_mie_write_1__SEL_1 ;

  // register rg_upie
  assign rg_upie_D_IN = write_csr_word[4] ;
  assign rg_upie_EN = MUX_rg_mie_write_1__SEL_1 ;

  // register rg_uscratch
  assign rg_uscratch_D_IN = write_csr_word ;
  assign rg_uscratch_EN = EN_write_csr && write_csr_addr == 12'h040 ;

  // register rg_usie
  assign rg_usie_D_IN = write_csr_word[0] ;
  assign rg_usie_EN = EN_write_csr && write_csr_addr == 12'h304 ;

  // register rg_utie
  assign rg_utie_D_IN = write_csr_word[4] ;
  assign rg_utie_EN = EN_write_csr && write_csr_addr == 12'h304 ;

  // remaining internal signals
  assign IF_rg_mode_14_EQ_1_02_AND_upd_on_trap_cause_BI_ETC___d306 =
	     (rg_mode == 2'd1 && upd_on_trap_cause[5]) ?
	       rg_mtvec + { 25'd0, upd_on_trap_cause[4:0] } :
	       rg_mtvec ;
  assign csr_mie__h1751 =
	     { rg_meie,
	       2'd0,
	       rg_ueie,
	       rg_mtie,
	       2'd0,
	       rg_utie,
	       rg_msie,
	       2'd0,
	       rg_usie } ;
  assign csr_mip__h1750 =
	     { rg_resume_int & rg_core_halted,
	       rg_halt_int & y__h5245,
	       rg_meip,
	       3'd0,
	       rg_mtip,
	       7'd0 } ;
  assign data___1__h1946 = { 31'd0, rg_csr_denable } ;
  assign data___1__h1952 = { rg_csr_dtvec, 1'd0 } ;
  assign data___1__h1961 = { rg_csr_dpc, 1'd0 } ;
  assign data___1__h1967 = { r1__read__h2022, rg_dcsr_prv } ;
  assign data___1__h2085 = { 24'd0, x__h2088 } ;
  assign data___1__h2092 = { 29'd0, frm } ;
  assign data___1__h2097 = { 27'd0, fflags } ;
  assign data___1__h2128 = { 29'd0, rg_mcounteren } ;
  assign data___1__h2134 = { rg_minterrupt, 26'd0, rg_mcause } ;
  assign data___1__h2148 = { rg_mepc, 1'b0 } ;
  assign data___1__h2162 =
	     { 20'd0, rg_meip, 3'd0, rg_mtip, 3'd0, rg_msip, 3'd0 } ;
  assign data___1__h2187 =
	     { 20'd0, rg_meie, 3'd0, rg_mtie, 3'd0, rg_msie, 3'd0 } ;
  assign data___1__h2218 = csr_mstatus ;
  assign data___1__h2262 = { rg_mtvec, rg_mode } ;
  assign instr__h5180 = { minstreth, minstret } ;
  assign instr__h5181 = instr__h5180 + 64'd1 ;
  assign mcycleh_CONCAT_mcycle_PLUS_1___d4 = new_cycle__h1768 + 64'd1 ;
  assign misa__h140 = { 5'd0, misa_u, 11'd0, misa_i, 8'd0 } ;
  assign new_cycle__h1768 = { mcycleh, mcycle } ;
  assign r1__read__h2022 = { r1__read__h2024, rg_dcsr_step } ;
  assign r1__read__h2024 = { r1__read__h2026, rg_dcsr_nmip } ;
  assign r1__read__h2026 = { r1__read__h2028, rg_dcsr_mprven } ;
  assign r1__read__h2028 = { r1__read__h2030, 1'd0 } ;
  assign r1__read__h2030 = { r1__read__h2032, rg_dcsr_cause } ;
  assign r1__read__h2032 = { r1__read__h2034, rg_dcsr_stoptime } ;
  assign r1__read__h2034 = { r1__read__h2036, rg_dcsr_stopcount } ;
  assign r1__read__h2036 = { r1__read__h2038, rg_dcsr_stepie } ;
  assign r1__read__h2038 = { r1__read__h2040, rg_dcsr_ebreaku } ;
  assign r1__read__h2040 = { r1__read__h2042, rg_dcsr_ebreaks } ;
  assign r1__read__h2042 = { r1__read__h2044, 1'd0 } ;
  assign r1__read__h2044 = { 16'd16384, rg_dcsr_ebreakm } ;
  assign r__h2221 = fs == 2'b11 ;
  assign result__h4534 = { rg_mepc[30:1], 1'd0 } ;
  assign upd_on_trap_cause_ULE_53___d287 = upd_on_trap_cause <= 6'd53 ;
  assign upd_on_trap_cause_ULT_49___d285 = upd_on_trap_cause < 6'd49 ;
  assign v__h4791 =
	     (upd_on_trap_cause == 6'd54) ? data___1__h1961 : v__h4873 ;
  assign v__h4873 =
	     { IF_rg_mode_14_EQ_1_02_AND_upd_on_trap_cause_BI_ETC___d306,
	       2'b0 } ;
  assign write_csr_addr_EQ_0x1_86_AND_NOT_fflags_6_EQ_w_ETC___d204 =
	     write_csr_addr == 12'h001 && fflags != write_csr_word[4:0] ||
	     write_csr_addr != 12'h001 &&
	     write_csr_addr_EQ_0x2_92_AND_NOT_frm_5_EQ_writ_ETC___d202 ;
  assign write_csr_addr_EQ_0x2_92_AND_NOT_frm_5_EQ_writ_ETC___d202 =
	     write_csr_addr == 12'h002 && frm != write_csr_word[2:0] ||
	     write_csr_addr == 12'h003 && x__h2088 != write_csr_word[7:0] ;
  assign x__h2088 = { frm, fflags } ;
  assign x__h5392 = { rg_meie & rg_meip, 3'd0, rg_mtie & rg_mtip, 7'd0 } ;
  assign y__h5245 = ~rg_core_halted ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        fflags <= `BSV_ASSIGNMENT_DELAY 5'd0;
	frm <= `BSV_ASSIGNMENT_DELAY 3'd0;
	fs <= `BSV_ASSIGNMENT_DELAY 2'd0;
	mcycle <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mcycleh <= `BSV_ASSIGNMENT_DELAY 32'd0;
	minstret <= `BSV_ASSIGNMENT_DELAY 32'd0;
	minstreth <= `BSV_ASSIGNMENT_DELAY 32'd0;
	misa_i <= `BSV_ASSIGNMENT_DELAY 1'd1;
	misa_u <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_clint_mtime <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_core_halted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_csr_denable <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_csr_dpc <= `BSV_ASSIGNMENT_DELAY 31'd0;
	rg_csr_dscratch <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_csr_dtvec <= `BSV_ASSIGNMENT_DELAY 31'd0;
	rg_dcsr_cause <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_dcsr_ebreakm <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_dcsr_ebreaks <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_dcsr_ebreaku <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_dcsr_mprven <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_dcsr_nmip <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_dcsr_prv <= `BSV_ASSIGNMENT_DELAY 2'd3;
	rg_dcsr_step <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_dcsr_stepie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_dcsr_stopcount <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_dcsr_stoptime <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_halt_int <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_mcause <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_mcounteren <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_meie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_meip <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_mepc <= `BSV_ASSIGNMENT_DELAY 31'd0;
	rg_mie <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_minterrupt <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_mode <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_mpie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_mpp <= `BSV_ASSIGNMENT_DELAY 2'b0;
	rg_mprv <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_mscratch <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_msie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_msip <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_mtie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_mtip <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_mtval <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_mtvec <= `BSV_ASSIGNMENT_DELAY 30'd0;
	rg_prv <= `BSV_ASSIGNMENT_DELAY 2'd3;
	rg_resume_int <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_ueie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_uie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_upie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_uscratch <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_usie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_utie <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (fflags_EN) fflags <= `BSV_ASSIGNMENT_DELAY fflags_D_IN;
	if (frm_EN) frm <= `BSV_ASSIGNMENT_DELAY frm_D_IN;
	if (fs_EN) fs <= `BSV_ASSIGNMENT_DELAY fs_D_IN;
	if (mcycle_EN) mcycle <= `BSV_ASSIGNMENT_DELAY mcycle_D_IN;
	if (mcycleh_EN) mcycleh <= `BSV_ASSIGNMENT_DELAY mcycleh_D_IN;
	if (minstret_EN) minstret <= `BSV_ASSIGNMENT_DELAY minstret_D_IN;
	if (minstreth_EN) minstreth <= `BSV_ASSIGNMENT_DELAY minstreth_D_IN;
	if (misa_i_EN) misa_i <= `BSV_ASSIGNMENT_DELAY misa_i_D_IN;
	if (misa_u_EN) misa_u <= `BSV_ASSIGNMENT_DELAY misa_u_D_IN;
	if (rg_clint_mtime_EN)
	  rg_clint_mtime <= `BSV_ASSIGNMENT_DELAY rg_clint_mtime_D_IN;
	if (rg_core_halted_EN)
	  rg_core_halted <= `BSV_ASSIGNMENT_DELAY rg_core_halted_D_IN;
	if (rg_csr_denable_EN)
	  rg_csr_denable <= `BSV_ASSIGNMENT_DELAY rg_csr_denable_D_IN;
	if (rg_csr_dpc_EN)
	  rg_csr_dpc <= `BSV_ASSIGNMENT_DELAY rg_csr_dpc_D_IN;
	if (rg_csr_dscratch_EN)
	  rg_csr_dscratch <= `BSV_ASSIGNMENT_DELAY rg_csr_dscratch_D_IN;
	if (rg_csr_dtvec_EN)
	  rg_csr_dtvec <= `BSV_ASSIGNMENT_DELAY rg_csr_dtvec_D_IN;
	if (rg_dcsr_cause_EN)
	  rg_dcsr_cause <= `BSV_ASSIGNMENT_DELAY rg_dcsr_cause_D_IN;
	if (rg_dcsr_ebreakm_EN)
	  rg_dcsr_ebreakm <= `BSV_ASSIGNMENT_DELAY rg_dcsr_ebreakm_D_IN;
	if (rg_dcsr_ebreaks_EN)
	  rg_dcsr_ebreaks <= `BSV_ASSIGNMENT_DELAY rg_dcsr_ebreaks_D_IN;
	if (rg_dcsr_ebreaku_EN)
	  rg_dcsr_ebreaku <= `BSV_ASSIGNMENT_DELAY rg_dcsr_ebreaku_D_IN;
	if (rg_dcsr_mprven_EN)
	  rg_dcsr_mprven <= `BSV_ASSIGNMENT_DELAY rg_dcsr_mprven_D_IN;
	if (rg_dcsr_nmip_EN)
	  rg_dcsr_nmip <= `BSV_ASSIGNMENT_DELAY rg_dcsr_nmip_D_IN;
	if (rg_dcsr_prv_EN)
	  rg_dcsr_prv <= `BSV_ASSIGNMENT_DELAY rg_dcsr_prv_D_IN;
	if (rg_dcsr_step_EN)
	  rg_dcsr_step <= `BSV_ASSIGNMENT_DELAY rg_dcsr_step_D_IN;
	if (rg_dcsr_stepie_EN)
	  rg_dcsr_stepie <= `BSV_ASSIGNMENT_DELAY rg_dcsr_stepie_D_IN;
	if (rg_dcsr_stopcount_EN)
	  rg_dcsr_stopcount <= `BSV_ASSIGNMENT_DELAY rg_dcsr_stopcount_D_IN;
	if (rg_dcsr_stoptime_EN)
	  rg_dcsr_stoptime <= `BSV_ASSIGNMENT_DELAY rg_dcsr_stoptime_D_IN;
	if (rg_halt_int_EN)
	  rg_halt_int <= `BSV_ASSIGNMENT_DELAY rg_halt_int_D_IN;
	if (rg_mcause_EN) rg_mcause <= `BSV_ASSIGNMENT_DELAY rg_mcause_D_IN;
	if (rg_mcounteren_EN)
	  rg_mcounteren <= `BSV_ASSIGNMENT_DELAY rg_mcounteren_D_IN;
	if (rg_meie_EN) rg_meie <= `BSV_ASSIGNMENT_DELAY rg_meie_D_IN;
	if (rg_meip_EN) rg_meip <= `BSV_ASSIGNMENT_DELAY rg_meip_D_IN;
	if (rg_mepc_EN) rg_mepc <= `BSV_ASSIGNMENT_DELAY rg_mepc_D_IN;
	if (rg_mie_EN) rg_mie <= `BSV_ASSIGNMENT_DELAY rg_mie_D_IN;
	if (rg_minterrupt_EN)
	  rg_minterrupt <= `BSV_ASSIGNMENT_DELAY rg_minterrupt_D_IN;
	if (rg_mode_EN) rg_mode <= `BSV_ASSIGNMENT_DELAY rg_mode_D_IN;
	if (rg_mpie_EN) rg_mpie <= `BSV_ASSIGNMENT_DELAY rg_mpie_D_IN;
	if (rg_mpp_EN) rg_mpp <= `BSV_ASSIGNMENT_DELAY rg_mpp_D_IN;
	if (rg_mprv_EN) rg_mprv <= `BSV_ASSIGNMENT_DELAY rg_mprv_D_IN;
	if (rg_mscratch_EN)
	  rg_mscratch <= `BSV_ASSIGNMENT_DELAY rg_mscratch_D_IN;
	if (rg_msie_EN) rg_msie <= `BSV_ASSIGNMENT_DELAY rg_msie_D_IN;
	if (rg_msip_EN) rg_msip <= `BSV_ASSIGNMENT_DELAY rg_msip_D_IN;
	if (rg_mtie_EN) rg_mtie <= `BSV_ASSIGNMENT_DELAY rg_mtie_D_IN;
	if (rg_mtip_EN) rg_mtip <= `BSV_ASSIGNMENT_DELAY rg_mtip_D_IN;
	if (rg_mtval_EN) rg_mtval <= `BSV_ASSIGNMENT_DELAY rg_mtval_D_IN;
	if (rg_mtvec_EN) rg_mtvec <= `BSV_ASSIGNMENT_DELAY rg_mtvec_D_IN;
	if (rg_prv_EN) rg_prv <= `BSV_ASSIGNMENT_DELAY rg_prv_D_IN;
	if (rg_resume_int_EN)
	  rg_resume_int <= `BSV_ASSIGNMENT_DELAY rg_resume_int_D_IN;
	if (rg_ueie_EN) rg_ueie <= `BSV_ASSIGNMENT_DELAY rg_ueie_D_IN;
	if (rg_uie_EN) rg_uie <= `BSV_ASSIGNMENT_DELAY rg_uie_D_IN;
	if (rg_upie_EN) rg_upie <= `BSV_ASSIGNMENT_DELAY rg_upie_D_IN;
	if (rg_uscratch_EN)
	  rg_uscratch <= `BSV_ASSIGNMENT_DELAY rg_uscratch_D_IN;
	if (rg_usie_EN) rg_usie <= `BSV_ASSIGNMENT_DELAY rg_usie_D_IN;
	if (rg_utie_EN) rg_utie <= `BSV_ASSIGNMENT_DELAY rg_utie_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    fflags = 5'h0A;
    frm = 3'h2;
    fs = 2'h2;
    mcycle = 32'hAAAAAAAA;
    mcycleh = 32'hAAAAAAAA;
    minstret = 32'hAAAAAAAA;
    minstreth = 32'hAAAAAAAA;
    misa_i = 1'h0;
    misa_u = 1'h0;
    rg_clint_mtime = 64'hAAAAAAAAAAAAAAAA;
    rg_core_halted = 1'h0;
    rg_csr_denable = 1'h0;
    rg_csr_dpc = 31'h2AAAAAAA;
    rg_csr_dscratch = 32'hAAAAAAAA;
    rg_csr_dtvec = 31'h2AAAAAAA;
    rg_dcsr_cause = 3'h2;
    rg_dcsr_ebreakm = 1'h0;
    rg_dcsr_ebreaks = 1'h0;
    rg_dcsr_ebreaku = 1'h0;
    rg_dcsr_mprven = 1'h0;
    rg_dcsr_nmip = 1'h0;
    rg_dcsr_prv = 2'h2;
    rg_dcsr_step = 1'h0;
    rg_dcsr_stepie = 1'h0;
    rg_dcsr_stopcount = 1'h0;
    rg_dcsr_stoptime = 1'h0;
    rg_halt_int = 1'h0;
    rg_mcause = 5'h0A;
    rg_mcounteren = 3'h2;
    rg_meie = 1'h0;
    rg_meip = 1'h0;
    rg_mepc = 31'h2AAAAAAA;
    rg_mie = 1'h0;
    rg_minterrupt = 1'h0;
    rg_mode = 2'h2;
    rg_mpie = 1'h0;
    rg_mpp = 2'h2;
    rg_mprv = 1'h0;
    rg_mscratch = 32'hAAAAAAAA;
    rg_msie = 1'h0;
    rg_msip = 1'h0;
    rg_mtie = 1'h0;
    rg_mtip = 1'h0;
    rg_mtval = 32'hAAAAAAAA;
    rg_mtvec = 30'h2AAAAAAA;
    rg_prv = 2'h2;
    rg_resume_int = 1'h0;
    rg_ueie = 1'h0;
    rg_uie = 1'h0;
    rg_upie = 1'h0;
    rg_uscratch = 32'hAAAAAAAA;
    rg_usie = 1'h0;
    rg_utie = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkcsrfile

