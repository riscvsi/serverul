//
// Generated by Bluespec Compiler, version 2022.01-36-ga6304315 (build a6304315)
//
// On Tue Oct  4 10:37:03 CEST 2022
//
//
// Ports:
// Name                         I/O  size props
// RDY_dtm_putCommand_put         O     1
// dtm_getResponse_get            O    34 reg
// RDY_dtm_getResponse_get        O     1 reg
// hart_abstractOperation         O    47 reg
// RDY_hart_abstractOperation     O     1
// RDY_hart_abstractReadResponse  O     1
// hart_haltRequest               O     1
// hart_resumeRequest             O     1
// hart_hart_reset                O     1
// hart_dm_active                 O     1 reg
// debug_master_awvalid           O     1 reg
// debug_master_awaddr            O    32 reg
// debug_master_awprot            O     3 reg
// debug_master_awsize            O     2 reg
// debug_master_wvalid            O     1 reg
// debug_master_wdata             O    32 reg
// debug_master_wstrb             O     4 reg
// debug_master_bready            O     1 reg
// debug_master_arvalid           O     1 reg
// debug_master_araddr            O    32 reg
// debug_master_arprot            O     3 reg
// debug_master_arsize            O     2 reg
// debug_master_rready            O     1 reg
// getNDMReset                    O     1 reg
// RDY_getNDMReset                O     1 const
// RST_N_dtm_dmactive_reset       O     1 reset
// RST_N_dmactive_reset           O     1 reset
// CLK                            I     1 clock
// RST_N                          I     1 reset
// dtm_putCommand_put             I    41
// hart_abstractReadResponse_abstractResponse  I    32
// hart_set_have_reset_have_reset  I     1
// hart_set_halted_halted         I     1 reg
// hart_set_unavailable_unavailable  I     1 reg
// debug_master_m_awready_awready  I     1
// debug_master_m_wready_wready   I     1
// debug_master_m_bvalid_bvalid   I     1
// debug_master_m_bvalid_bresp    I     2 reg
// debug_master_m_arready_arready  I     1
// debug_master_m_rvalid_rvalid   I     1
// debug_master_m_rvalid_rresp    I     2 reg
// debug_master_m_rvalid_rdata    I    32 reg
// EN_dtm_putCommand_put          I     1
// EN_hart_abstractReadResponse   I     1
// EN_dtm_getResponse_get         I     1
// EN_hart_abstractOperation      I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkriscvDebug013(CLK,
		       RST_N,

		       dtm_putCommand_put,
		       EN_dtm_putCommand_put,
		       RDY_dtm_putCommand_put,

		       EN_dtm_getResponse_get,
		       dtm_getResponse_get,
		       RDY_dtm_getResponse_get,

		       EN_hart_abstractOperation,
		       hart_abstractOperation,
		       RDY_hart_abstractOperation,

		       hart_abstractReadResponse_abstractResponse,
		       EN_hart_abstractReadResponse,
		       RDY_hart_abstractReadResponse,

		       hart_haltRequest,

		       hart_resumeRequest,

		       hart_hart_reset,

		       hart_set_have_reset_have_reset,

		       hart_set_halted_halted,

		       hart_set_unavailable_unavailable,

		       hart_dm_active,

		       debug_master_awvalid,

		       debug_master_awaddr,

		       debug_master_awprot,

		       debug_master_awsize,

		       debug_master_m_awready_awready,

		       debug_master_wvalid,

		       debug_master_wdata,

		       debug_master_wstrb,

		       debug_master_m_wready_wready,

		       debug_master_m_bvalid_bvalid,
		       debug_master_m_bvalid_bresp,

		       debug_master_bready,

		       debug_master_arvalid,

		       debug_master_araddr,

		       debug_master_arprot,

		       debug_master_arsize,

		       debug_master_m_arready_arready,

		       debug_master_m_rvalid_rvalid,
		       debug_master_m_rvalid_rresp,
		       debug_master_m_rvalid_rdata,

		       debug_master_rready,

		       getNDMReset,
		       RDY_getNDMReset,

		       RST_N_dtm_dmactive_reset,
		       RST_N_dmactive_reset);
  input  CLK;
  input  RST_N;

  // action method dtm_putCommand_put
  input  [40 : 0] dtm_putCommand_put;
  input  EN_dtm_putCommand_put;
  output RDY_dtm_putCommand_put;

  // actionvalue method dtm_getResponse_get
  input  EN_dtm_getResponse_get;
  output [33 : 0] dtm_getResponse_get;
  output RDY_dtm_getResponse_get;

  // actionvalue method hart_abstractOperation
  input  EN_hart_abstractOperation;
  output [46 : 0] hart_abstractOperation;
  output RDY_hart_abstractOperation;

  // action method hart_abstractReadResponse
  input  [31 : 0] hart_abstractReadResponse_abstractResponse;
  input  EN_hart_abstractReadResponse;
  output RDY_hart_abstractReadResponse;

  // value method hart_haltRequest
  output hart_haltRequest;

  // value method hart_resumeRequest
  output hart_resumeRequest;

  // value method hart_hart_reset
  output hart_hart_reset;

  // action method hart_set_have_reset
  input  hart_set_have_reset_have_reset;

  // action method hart_set_halted
  input  hart_set_halted_halted;

  // action method hart_set_unavailable
  input  hart_set_unavailable_unavailable;

  // value method hart_dm_active
  output hart_dm_active;

  // value method debug_master_m_awvalid
  output debug_master_awvalid;

  // value method debug_master_m_awaddr
  output [31 : 0] debug_master_awaddr;

  // value method debug_master_m_awuser

  // value method debug_master_m_awprot
  output [2 : 0] debug_master_awprot;

  // value method debug_master_m_awsize
  output [1 : 0] debug_master_awsize;

  // action method debug_master_m_awready
  input  debug_master_m_awready_awready;

  // value method debug_master_m_wvalid
  output debug_master_wvalid;

  // value method debug_master_m_wdata
  output [31 : 0] debug_master_wdata;

  // value method debug_master_m_wstrb
  output [3 : 0] debug_master_wstrb;

  // action method debug_master_m_wready
  input  debug_master_m_wready_wready;

  // action method debug_master_m_bvalid
  input  debug_master_m_bvalid_bvalid;
  input  [1 : 0] debug_master_m_bvalid_bresp;

  // value method debug_master_m_bready
  output debug_master_bready;

  // value method debug_master_m_arvalid
  output debug_master_arvalid;

  // value method debug_master_m_araddr
  output [31 : 0] debug_master_araddr;

  // value method debug_master_m_aruser

  // value method debug_master_m_arprot
  output [2 : 0] debug_master_arprot;

  // value method debug_master_m_arsize
  output [1 : 0] debug_master_arsize;

  // action method debug_master_m_arready
  input  debug_master_m_arready_arready;

  // action method debug_master_m_rvalid
  input  debug_master_m_rvalid_rvalid;
  input  [1 : 0] debug_master_m_rvalid_rresp;
  input  [31 : 0] debug_master_m_rvalid_rdata;

  // value method debug_master_m_rready
  output debug_master_rready;

  // value method getNDMReset
  output getNDMReset;
  output RDY_getNDMReset;

  // output resets
  output RST_N_dtm_dmactive_reset;
  output RST_N_dmactive_reset;

  // signals for module outputs
  wire [46 : 0] hart_abstractOperation;
  wire [33 : 0] dtm_getResponse_get;
  wire [31 : 0] debug_master_araddr, debug_master_awaddr, debug_master_wdata;
  wire [3 : 0] debug_master_wstrb;
  wire [2 : 0] debug_master_arprot, debug_master_awprot;
  wire [1 : 0] debug_master_arsize, debug_master_awsize;
  wire RDY_dtm_getResponse_get,
       RDY_dtm_putCommand_put,
       RDY_getNDMReset,
       RDY_hart_abstractOperation,
       RDY_hart_abstractReadResponse,
       RST_N_dmactive_reset,
       RST_N_dtm_dmactive_reset,
       debug_master_arvalid,
       debug_master_awvalid,
       debug_master_bready,
       debug_master_rready,
       debug_master_wvalid,
       getNDMReset,
       hart_dm_active,
       hart_haltRequest,
       hart_hart_reset,
       hart_resumeRequest;

  // inlined wires
  wire ackHaveReset_1_whas, rg_clear_resume_ack_1_whas;

  // register abst_ar_aarPostIncrement
  reg abst_ar_aarPostIncrement;
  wire abst_ar_aarPostIncrement_D_IN, abst_ar_aarPostIncrement_EN;

  // register abst_ar_aarSize
  reg [2 : 0] abst_ar_aarSize;
  wire [2 : 0] abst_ar_aarSize_D_IN;
  wire abst_ar_aarSize_EN;

  // register abst_ar_cmdType
  reg [7 : 0] abst_ar_cmdType;
  wire [7 : 0] abst_ar_cmdType_D_IN;
  wire abst_ar_cmdType_EN;

  // register abst_ar_regno
  reg [15 : 0] abst_ar_regno;
  wire [15 : 0] abst_ar_regno_D_IN;
  wire abst_ar_regno_EN;

  // register abst_ar_transfer
  reg abst_ar_transfer;
  wire abst_ar_transfer_D_IN, abst_ar_transfer_EN;

  // register abst_ar_write
  reg abst_ar_write;
  wire abst_ar_write_D_IN, abst_ar_write_EN;

  // register abst_busy
  reg abst_busy;
  wire abst_busy_D_IN, abst_busy_EN;

  // register abst_cmderr
  reg [2 : 0] abst_cmderr;
  wire [2 : 0] abst_cmderr_D_IN;
  wire abst_cmderr_EN;

  // register abst_command_good
  reg [1 : 0] abst_command_good;
  reg [1 : 0] abst_command_good_D_IN;
  wire abst_command_good_EN;

  // register abst_data_0
  reg [31 : 0] abst_data_0;
  wire [31 : 0] abst_data_0_D_IN;
  wire abst_data_0_EN;

  // register abst_data_1
  reg [31 : 0] abst_data_1;
  wire [31 : 0] abst_data_1_D_IN;
  wire abst_data_1_EN;

  // register abst_data_10
  reg [31 : 0] abst_data_10;
  wire [31 : 0] abst_data_10_D_IN;
  wire abst_data_10_EN;

  // register abst_data_11
  reg [31 : 0] abst_data_11;
  wire [31 : 0] abst_data_11_D_IN;
  wire abst_data_11_EN;

  // register abst_data_2
  reg [31 : 0] abst_data_2;
  wire [31 : 0] abst_data_2_D_IN;
  wire abst_data_2_EN;

  // register abst_data_3
  reg [31 : 0] abst_data_3;
  wire [31 : 0] abst_data_3_D_IN;
  wire abst_data_3_EN;

  // register abst_data_4
  reg [31 : 0] abst_data_4;
  wire [31 : 0] abst_data_4_D_IN;
  wire abst_data_4_EN;

  // register abst_data_5
  reg [31 : 0] abst_data_5;
  wire [31 : 0] abst_data_5_D_IN;
  wire abst_data_5_EN;

  // register abst_data_6
  reg [31 : 0] abst_data_6;
  wire [31 : 0] abst_data_6_D_IN;
  wire abst_data_6_EN;

  // register abst_data_7
  reg [31 : 0] abst_data_7;
  wire [31 : 0] abst_data_7_D_IN;
  wire abst_data_7_EN;

  // register abst_data_8
  reg [31 : 0] abst_data_8;
  wire [31 : 0] abst_data_8_D_IN;
  wire abst_data_8_EN;

  // register abst_data_9
  reg [31 : 0] abst_data_9;
  wire [31 : 0] abst_data_9_D_IN;
  wire abst_data_9_EN;

  // register ackHaveReset
  reg ackHaveReset;
  wire ackHaveReset_D_IN, ackHaveReset_EN;

  // register allHalted
  reg allHalted;
  wire allHalted_D_IN, allHalted_EN;

  // register allHaveReset
  reg allHaveReset;
  wire allHaveReset_D_IN, allHaveReset_EN;

  // register allNonExistent
  reg allNonExistent;
  wire allNonExistent_D_IN, allNonExistent_EN;

  // register allResumeAck
  reg allResumeAck;
  wire allResumeAck_D_IN, allResumeAck_EN;

  // register allRunning
  reg allRunning;
  wire allRunning_D_IN, allRunning_EN;

  // register allUnAvail
  reg allUnAvail;
  wire allUnAvail_D_IN, allUnAvail_EN;

  // register anyHalted
  reg anyHalted;
  wire anyHalted_D_IN, anyHalted_EN;

  // register anyHaveReset
  reg anyHaveReset;
  wire anyHaveReset_D_IN, anyHaveReset_EN;

  // register anyNonExistent
  reg anyNonExistent;
  wire anyNonExistent_D_IN, anyNonExistent_EN;

  // register anyResumeAck
  reg anyResumeAck;
  wire anyResumeAck_D_IN, anyResumeAck_EN;

  // register anyRunning
  reg anyRunning;
  wire anyRunning_D_IN, anyRunning_EN;

  // register anyUnAvail
  reg anyUnAvail;
  wire anyUnAvail_D_IN, anyUnAvail_EN;

  // register auth_data
  reg [31 : 0] auth_data;
  wire [31 : 0] auth_data_D_IN;
  wire auth_data_EN;

  // register authbusy
  reg authbusy;
  wire authbusy_D_IN, authbusy_EN;

  // register authenticated
  reg authenticated;
  wire authenticated_D_IN, authenticated_EN;

  // register autoExecData
  reg [11 : 0] autoExecData;
  wire [11 : 0] autoExecData_D_IN;
  wire autoExecData_EN;

  // register clrResetHaltReq
  reg clrResetHaltReq;
  wire clrResetHaltReq_D_IN, clrResetHaltReq_EN;

  // register dmActive
  reg dmActive;
  wire dmActive_D_IN, dmActive_EN;

  // register dmi_response
  reg [34 : 0] dmi_response;
  wire [34 : 0] dmi_response_D_IN;
  wire dmi_response_EN;

  // register haltReq
  reg haltReq;
  wire haltReq_D_IN, haltReq_EN;

  // register hartReset
  reg hartReset;
  wire hartReset_D_IN, hartReset_EN;

  // register maskData
  reg maskData;
  wire maskData_D_IN, maskData_EN;

  // register nDMReset
  reg nDMReset;
  wire nDMReset_D_IN, nDMReset_EN;

  // register progbuf_0
  reg [31 : 0] progbuf_0;
  wire [31 : 0] progbuf_0_D_IN;
  wire progbuf_0_EN;

  // register progbuf_1
  reg [31 : 0] progbuf_1;
  wire [31 : 0] progbuf_1_D_IN;
  wire progbuf_1_EN;

  // register progbuf_10
  reg [31 : 0] progbuf_10;
  wire [31 : 0] progbuf_10_D_IN;
  wire progbuf_10_EN;

  // register progbuf_11
  reg [31 : 0] progbuf_11;
  wire [31 : 0] progbuf_11_D_IN;
  wire progbuf_11_EN;

  // register progbuf_12
  reg [31 : 0] progbuf_12;
  wire [31 : 0] progbuf_12_D_IN;
  wire progbuf_12_EN;

  // register progbuf_13
  reg [31 : 0] progbuf_13;
  wire [31 : 0] progbuf_13_D_IN;
  wire progbuf_13_EN;

  // register progbuf_14
  reg [31 : 0] progbuf_14;
  wire [31 : 0] progbuf_14_D_IN;
  wire progbuf_14_EN;

  // register progbuf_15
  reg [31 : 0] progbuf_15;
  wire [31 : 0] progbuf_15_D_IN;
  wire progbuf_15_EN;

  // register progbuf_2
  reg [31 : 0] progbuf_2;
  wire [31 : 0] progbuf_2_D_IN;
  wire progbuf_2_EN;

  // register progbuf_3
  reg [31 : 0] progbuf_3;
  wire [31 : 0] progbuf_3_D_IN;
  wire progbuf_3_EN;

  // register progbuf_4
  reg [31 : 0] progbuf_4;
  wire [31 : 0] progbuf_4_D_IN;
  wire progbuf_4_EN;

  // register progbuf_5
  reg [31 : 0] progbuf_5;
  wire [31 : 0] progbuf_5_D_IN;
  wire progbuf_5_EN;

  // register progbuf_6
  reg [31 : 0] progbuf_6;
  wire [31 : 0] progbuf_6_D_IN;
  wire progbuf_6_EN;

  // register progbuf_7
  reg [31 : 0] progbuf_7;
  wire [31 : 0] progbuf_7_D_IN;
  wire progbuf_7_EN;

  // register progbuf_8
  reg [31 : 0] progbuf_8;
  wire [31 : 0] progbuf_8_D_IN;
  wire progbuf_8_EN;

  // register progbuf_9
  reg [31 : 0] progbuf_9;
  wire [31 : 0] progbuf_9_D_IN;
  wire progbuf_9_EN;

  // register resumeReq
  reg resumeReq;
  wire resumeReq_D_IN, resumeReq_EN;

  // register rg_clear_resume_ack
  reg rg_clear_resume_ack;
  wire rg_clear_resume_ack_D_IN, rg_clear_resume_ack_EN;

  // register rg_lower_addr_bits
  reg [1 : 0] rg_lower_addr_bits;
  wire [1 : 0] rg_lower_addr_bits_D_IN;
  wire rg_lower_addr_bits_EN;

  // register sbAccess
  reg [2 : 0] sbAccess;
  wire [2 : 0] sbAccess_D_IN;
  wire sbAccess_EN;

  // register sbAddress0
  reg [31 : 0] sbAddress0;
  wire [31 : 0] sbAddress0_D_IN;
  wire sbAddress0_EN;

  // register sbAddress1
  reg [31 : 0] sbAddress1;
  wire [31 : 0] sbAddress1_D_IN;
  wire sbAddress1_EN;

  // register sbAutoIncrement
  reg sbAutoIncrement;
  wire sbAutoIncrement_D_IN, sbAutoIncrement_EN;

  // register sbBusy
  reg sbBusy;
  wire sbBusy_D_IN, sbBusy_EN;

  // register sbBusyError
  reg sbBusyError;
  wire sbBusyError_D_IN, sbBusyError_EN;

  // register sbData0
  reg [31 : 0] sbData0;
  wire [31 : 0] sbData0_D_IN;
  wire sbData0_EN;

  // register sbData1
  reg [31 : 0] sbData1;
  wire [31 : 0] sbData1_D_IN;
  wire sbData1_EN;

  // register sbError
  reg [2 : 0] sbError;
  reg [2 : 0] sbError_D_IN;
  wire sbError_EN;

  // register sbReadOnAddr
  reg sbReadOnAddr;
  wire sbReadOnAddr_D_IN, sbReadOnAddr_EN;

  // register sbReadOnData
  reg sbReadOnData;
  wire sbReadOnData_D_IN, sbReadOnData_EN;

  // register sb_read_write
  reg sb_read_write;
  wire sb_read_write_D_IN, sb_read_write_EN;

  // register setResetHaltRequest
  reg setResetHaltRequest;
  wire setResetHaltRequest_D_IN, setResetHaltRequest_EN;

  // register startSBAccess
  reg startSBAccess;
  wire startSBAccess_D_IN, startSBAccess_EN;

  // register vrg_halted_0
  reg vrg_halted_0;
  wire vrg_halted_0_D_IN, vrg_halted_0_EN;

  // register vrg_halted_sdw_0
  reg vrg_halted_sdw_0;
  wire vrg_halted_sdw_0_D_IN, vrg_halted_sdw_0_EN;

  // register vrg_have_reset_0
  reg vrg_have_reset_0;
  wire vrg_have_reset_0_D_IN, vrg_have_reset_0_EN;

  // register vrg_have_reset_sdw_0
  reg vrg_have_reset_sdw_0;
  wire vrg_have_reset_sdw_0_D_IN, vrg_have_reset_sdw_0_EN;

  // register vrg_hawsel_0
  reg vrg_hawsel_0;
  wire vrg_hawsel_0_D_IN, vrg_hawsel_0_EN;

  // register vrg_resume_ack_0
  reg vrg_resume_ack_0;
  wire vrg_resume_ack_0_D_IN, vrg_resume_ack_0_EN;

  // register vrg_unavailable_0
  reg vrg_unavailable_0;
  wire vrg_unavailable_0_D_IN, vrg_unavailable_0_EN;

  // ports of submodule derived_reset
  wire derived_reset_RST_OUT;

  // ports of submodule dm_reset
  wire dm_reset_ASSERT_IN, dm_reset_OUT_RST;

  // ports of submodule master_xactor_f_rd_addr
  wire [36 : 0] master_xactor_f_rd_addr_D_IN, master_xactor_f_rd_addr_D_OUT;
  wire master_xactor_f_rd_addr_CLR,
       master_xactor_f_rd_addr_DEQ,
       master_xactor_f_rd_addr_EMPTY_N,
       master_xactor_f_rd_addr_ENQ,
       master_xactor_f_rd_addr_FULL_N;

  // ports of submodule master_xactor_f_rd_data
  wire [33 : 0] master_xactor_f_rd_data_D_IN, master_xactor_f_rd_data_D_OUT;
  wire master_xactor_f_rd_data_CLR,
       master_xactor_f_rd_data_DEQ,
       master_xactor_f_rd_data_EMPTY_N,
       master_xactor_f_rd_data_ENQ,
       master_xactor_f_rd_data_FULL_N;

  // ports of submodule master_xactor_f_wr_addr
  wire [36 : 0] master_xactor_f_wr_addr_D_IN, master_xactor_f_wr_addr_D_OUT;
  wire master_xactor_f_wr_addr_CLR,
       master_xactor_f_wr_addr_DEQ,
       master_xactor_f_wr_addr_EMPTY_N,
       master_xactor_f_wr_addr_ENQ,
       master_xactor_f_wr_addr_FULL_N;

  // ports of submodule master_xactor_f_wr_data
  wire [35 : 0] master_xactor_f_wr_data_D_IN, master_xactor_f_wr_data_D_OUT;
  wire master_xactor_f_wr_data_CLR,
       master_xactor_f_wr_data_DEQ,
       master_xactor_f_wr_data_EMPTY_N,
       master_xactor_f_wr_data_ENQ,
       master_xactor_f_wr_data_FULL_N;

  // ports of submodule master_xactor_f_wr_resp
  wire [1 : 0] master_xactor_f_wr_resp_D_IN, master_xactor_f_wr_resp_D_OUT;
  wire master_xactor_f_wr_resp_CLR,
       master_xactor_f_wr_resp_DEQ,
       master_xactor_f_wr_resp_EMPTY_N,
       master_xactor_f_wr_resp_ENQ,
       master_xactor_f_wr_resp_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_access_system_bus,
       CAN_FIRE_RL_ackHaveReset__dreg_update,
       CAN_FIRE_RL_filter_abstract_commands,
       CAN_FIRE_RL_generate_derived_reset,
       CAN_FIRE_RL_responseSystemBusRead,
       CAN_FIRE_RL_responseSystemBusWrite,
       CAN_FIRE_RL_rg_clear_resume_ack__dreg_update,
       CAN_FIRE_RL_rl_authentication_bypass,
       CAN_FIRE_RL_rl_have_reset_logic,
       CAN_FIRE_RL_rl_set_dm_status_bits,
       CAN_FIRE_debug_master_m_arready,
       CAN_FIRE_debug_master_m_awready,
       CAN_FIRE_debug_master_m_bvalid,
       CAN_FIRE_debug_master_m_rvalid,
       CAN_FIRE_debug_master_m_wready,
       CAN_FIRE_dtm_getResponse_get,
       CAN_FIRE_dtm_putCommand_put,
       CAN_FIRE_hart_abstractOperation,
       CAN_FIRE_hart_abstractReadResponse,
       CAN_FIRE_hart_set_halted,
       CAN_FIRE_hart_set_have_reset,
       CAN_FIRE_hart_set_unavailable,
       WILL_FIRE_RL_access_system_bus,
       WILL_FIRE_RL_ackHaveReset__dreg_update,
       WILL_FIRE_RL_filter_abstract_commands,
       WILL_FIRE_RL_generate_derived_reset,
       WILL_FIRE_RL_responseSystemBusRead,
       WILL_FIRE_RL_responseSystemBusWrite,
       WILL_FIRE_RL_rg_clear_resume_ack__dreg_update,
       WILL_FIRE_RL_rl_authentication_bypass,
       WILL_FIRE_RL_rl_have_reset_logic,
       WILL_FIRE_RL_rl_set_dm_status_bits,
       WILL_FIRE_debug_master_m_arready,
       WILL_FIRE_debug_master_m_awready,
       WILL_FIRE_debug_master_m_bvalid,
       WILL_FIRE_debug_master_m_rvalid,
       WILL_FIRE_debug_master_m_wready,
       WILL_FIRE_dtm_getResponse_get,
       WILL_FIRE_dtm_putCommand_put,
       WILL_FIRE_hart_abstractOperation,
       WILL_FIRE_hart_abstractReadResponse,
       WILL_FIRE_hart_set_halted,
       WILL_FIRE_hart_set_have_reset,
       WILL_FIRE_hart_set_unavailable;

  // inputs to muxes for submodule ports
  wire [34 : 0] MUX_dmi_response_write_1__VAL_1,
		MUX_dmi_response_write_1__VAL_2;
  wire [31 : 0] MUX_sbData0_write_1__VAL_1;
  wire [15 : 0] MUX_abst_ar_regno_write_1__VAL_1;
  wire [2 : 0] MUX_abst_cmderr_write_1__VAL_2, MUX_sbError_write_1__VAL_3;
  wire [1 : 0] MUX_abst_command_good_write_1__VAL_2;
  wire MUX_abst_ar_regno_write_1__SEL_1,
       MUX_abst_ar_regno_write_1__SEL_2,
       MUX_abst_busy_write_1__SEL_1,
       MUX_abst_busy_write_1__SEL_2,
       MUX_abst_cmderr_write_1__SEL_1,
       MUX_abst_data_0_write_1__SEL_1,
       MUX_sbAddress0_write_1__SEL_1,
       MUX_sbData0_write_1__SEL_1,
       MUX_sbError_write_1__SEL_1,
       MUX_sbError_write_1__SEL_2,
       MUX_sbError_write_1__SEL_4,
       MUX_startSBAccess_write_1__SEL_2,
       MUX_vrg_have_reset_0_write_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] IF_sbAccess_3_EQ_0_4_THEN_sbData0_1_BITS_7_TO__ETC___d96;
  reg [31 : 0] dmi_response_data___1__h18224,
	       v__h11602,
	       y_avValue_fst__h18110;
  reg [7 : 0] write_strobe__h7157;
  reg [2 : 0] detect_error__h7159, size__h7155;
  wire [63 : 0] sbAddress1_read__16_CONCAT_sbAddress0_read__4__ETC___d120,
		write_data__h7240,
		write_data__h7243,
		write_data__h7246,
		write_data__h7249;
  wire [33 : 0] IF_dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b1_72_ETC___d691;
  wire [31 : 0] _theResult_____1_fst__h18222,
		dmi_response_data___2__h10904,
		dmi_response_data___2__h10911,
		dmi_response_data___2__h10939,
		dmi_response_data___2__h10946,
		dmi_response_data___2__h10953,
		dmi_response_data___2__h10960,
		dmi_response_data___2__h11030,
		dmi_response_data___2__h11082,
		v__h11554,
		y_avValue_fst__h12242;
  wire [30 : 0] r1__read__h12599, r1__read__h15183;
  wire [29 : 0] r1__read__h12611, r1__read__h15195;
  wire [28 : 0] r1__read__h12623, r1__read__h15207;
  wire [27 : 0] r1__read__h12635,
		r1__read__h13229,
		r1__read__h14278,
		r1__read__h15219;
  wire [26 : 0] r1__read__h13241, r1__read__h15231;
  wire [25 : 0] r1__read__h12647, r1__read__h13253;
  wire [24 : 0] r1__read__h13265;
  wire [23 : 0] r1__read__h13277, r1__read__h14290;
  wire [22 : 0] r1__read__h13289;
  wire [21 : 0] r1__read__h13301;
  wire [20 : 0] r1__read__h13313, r1__read__h14302;
  wire [19 : 0] r1__read__h13325, r1__read__h14314, r1__read__h15243;
  wire [18 : 0] r1__read__h13337;
  wire [17 : 0] r1__read__h13349;
  wire [16 : 0] r1__read__h13361, r1__read__h15255;
  wire [15 : 0] r1__read__h12659,
		r1__read__h13373,
		r1__read__h14577,
		r1__read__h15267;
  wire [14 : 0] r1__read__h13385, r1__read__h14589, r1__read__h15279;
  wire [13 : 0] r1__read__h13397, r1__read__h14601;
  wire [12 : 0] r1__read__h13409, r1__read__h14613;
  wire [11 : 0] r1__read__h14625, r1__read__h15291;
  wire [10 : 0] r1__read__h15303;
  wire [9 : 0] r1__read__h15315;
  wire [8 : 0] r1__read__h14637;
  wire [7 : 0] write_strobe__h7508, x__h9605;
  wire [6 : 0] i__h11619, x__h17163;
  wire [5 : 0] r1__read__h12671;
  wire [4 : 0] lv_shift__h9990, r1__read__h12683;
  wire [3 : 0] offset__h9677, r1__read__h12695;
  wire [2 : 0] IF_IF_sbAccess_3_EQ_0_4_OR_sbAccess_3_EQ_1_5_O_ETC___d130,
	       _theResult_____2__h7382,
	       _theResult_____2_snd_snd__h7386,
	       lv_abst_cmderr__h10337,
	       r1__read__h12707;
  wire [1 : 0] r1__read__h12719, v__h12335, v__h12347, y_avValue_snd__h18111;
  wire IF_sb_read_write_2_THEN_NOT_IF_sbAccess_3_EQ_0_ETC___d75,
       NOT_dtm_putCommand_put_BITS_40_TO_34_73_ULT_4__ETC___d343,
       dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d335,
       dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d363,
       dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d397,
       dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d402,
       dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d421,
       dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d468,
       dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b1_72_AN_ETC___d320,
       dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b1_72_AN_ETC___d348,
       dtm_putCommand_put_BITS_40_TO_34_73_EQ_16_74_O_ETC___d668,
       dtm_putCommand_put_BITS_40_TO_34_73_EQ_57_12_A_ETC___d292,
       dtm_putCommand_put_BITS_40_TO_34_73_ULE_15___d313,
       dtm_putCommand_put_BITS_40_TO_34_73_ULT_4___d311,
       sb_read_write_2_OR_IF_sbAccess_3_EQ_0_4_OR_sbA_ETC___d104;

  // output resets
  assign RST_N_dtm_dmactive_reset = derived_reset_RST_OUT ;
  assign RST_N_dmactive_reset = derived_reset_RST_OUT ;

  // action method dtm_putCommand_put
  assign RDY_dtm_putCommand_put = !dmi_response[34] && !abst_command_good[0] ;
  assign CAN_FIRE_dtm_putCommand_put =
	     !dmi_response[34] && !abst_command_good[0] ;
  assign WILL_FIRE_dtm_putCommand_put = EN_dtm_putCommand_put ;

  // actionvalue method dtm_getResponse_get
  assign dtm_getResponse_get = dmi_response[33:0] ;
  assign RDY_dtm_getResponse_get = dmi_response[34] ;
  assign CAN_FIRE_dtm_getResponse_get = dmi_response[34] ;
  assign WILL_FIRE_dtm_getResponse_get = EN_dtm_getResponse_get ;

  // actionvalue method hart_abstractOperation
  assign hart_abstractOperation =
	     { abst_ar_write, abst_ar_regno[13:0], abst_data_0 } ;
  assign RDY_hart_abstractOperation = abst_command_good == 2'd3 && abst_busy ;
  assign CAN_FIRE_hart_abstractOperation =
	     abst_command_good == 2'd3 && abst_busy ;
  assign WILL_FIRE_hart_abstractOperation = EN_hart_abstractOperation ;

  // action method hart_abstractReadResponse
  assign RDY_hart_abstractReadResponse =
	     abst_command_good == 2'd2 && abst_busy ;
  assign CAN_FIRE_hart_abstractReadResponse =
	     abst_command_good == 2'd2 && abst_busy ;
  assign WILL_FIRE_hart_abstractReadResponse = EN_hart_abstractReadResponse ;

  // value method hart_haltRequest
  assign hart_haltRequest = !vrg_unavailable_0 && haltReq ;

  // value method hart_resumeRequest
  assign hart_resumeRequest =
	     !vrg_unavailable_0 && !vrg_resume_ack_0 && resumeReq ;

  // value method hart_hart_reset
  assign hart_hart_reset = !vrg_unavailable_0 && hartReset ;

  // action method hart_set_have_reset
  assign CAN_FIRE_hart_set_have_reset = 1'd1 ;
  assign WILL_FIRE_hart_set_have_reset = 1'd1 ;

  // action method hart_set_halted
  assign CAN_FIRE_hart_set_halted = 1'd1 ;
  assign WILL_FIRE_hart_set_halted = 1'd1 ;

  // action method hart_set_unavailable
  assign CAN_FIRE_hart_set_unavailable = 1'd1 ;
  assign WILL_FIRE_hart_set_unavailable = 1'd1 ;

  // value method hart_dm_active
  assign hart_dm_active = dmActive ;

  // value method debug_master_m_awvalid
  assign debug_master_awvalid = master_xactor_f_wr_addr_EMPTY_N ;

  // value method debug_master_m_awaddr
  assign debug_master_awaddr = master_xactor_f_wr_addr_D_OUT[36:5] ;

  // value method debug_master_m_awprot
  assign debug_master_awprot = master_xactor_f_wr_addr_D_OUT[4:2] ;

  // value method debug_master_m_awsize
  assign debug_master_awsize = master_xactor_f_wr_addr_D_OUT[1:0] ;

  // action method debug_master_m_awready
  assign CAN_FIRE_debug_master_m_awready = 1'd1 ;
  assign WILL_FIRE_debug_master_m_awready = 1'd1 ;

  // value method debug_master_m_wvalid
  assign debug_master_wvalid = master_xactor_f_wr_data_EMPTY_N ;

  // value method debug_master_m_wdata
  assign debug_master_wdata = master_xactor_f_wr_data_D_OUT[35:4] ;

  // value method debug_master_m_wstrb
  assign debug_master_wstrb = master_xactor_f_wr_data_D_OUT[3:0] ;

  // action method debug_master_m_wready
  assign CAN_FIRE_debug_master_m_wready = 1'd1 ;
  assign WILL_FIRE_debug_master_m_wready = 1'd1 ;

  // action method debug_master_m_bvalid
  assign CAN_FIRE_debug_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_debug_master_m_bvalid = 1'd1 ;

  // value method debug_master_m_bready
  assign debug_master_bready = master_xactor_f_wr_resp_FULL_N ;

  // value method debug_master_m_arvalid
  assign debug_master_arvalid = master_xactor_f_rd_addr_EMPTY_N ;

  // value method debug_master_m_araddr
  assign debug_master_araddr = master_xactor_f_rd_addr_D_OUT[36:5] ;

  // value method debug_master_m_arprot
  assign debug_master_arprot = master_xactor_f_rd_addr_D_OUT[4:2] ;

  // value method debug_master_m_arsize
  assign debug_master_arsize = master_xactor_f_rd_addr_D_OUT[1:0] ;

  // action method debug_master_m_arready
  assign CAN_FIRE_debug_master_m_arready = 1'd1 ;
  assign WILL_FIRE_debug_master_m_arready = 1'd1 ;

  // action method debug_master_m_rvalid
  assign CAN_FIRE_debug_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_debug_master_m_rvalid = 1'd1 ;

  // value method debug_master_m_rready
  assign debug_master_rready = master_xactor_f_rd_data_FULL_N ;

  // value method getNDMReset
  assign getNDMReset = nDMReset ;
  assign RDY_getNDMReset = 1'd1 ;

  // submodule derived_reset
  ResetEither derived_reset(.A_RST(dm_reset_OUT_RST),
			    .B_RST(RST_N),
			    .RST_OUT(derived_reset_RST_OUT));

  // submodule dm_reset
  MakeReset0 #(.init(1'd1)) dm_reset(.CLK(CLK),
				     .RST(RST_N),
				     .ASSERT_IN(dm_reset_ASSERT_IN),
				     .ASSERT_OUT(),
				     .OUT_RST(dm_reset_OUT_RST));

  // submodule master_xactor_f_rd_addr
  FIFO2 #(.width(32'd37), .guarded(1'd1)) master_xactor_f_rd_addr(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(master_xactor_f_rd_addr_D_IN),
								  .ENQ(master_xactor_f_rd_addr_ENQ),
								  .DEQ(master_xactor_f_rd_addr_DEQ),
								  .CLR(master_xactor_f_rd_addr_CLR),
								  .D_OUT(master_xactor_f_rd_addr_D_OUT),
								  .FULL_N(master_xactor_f_rd_addr_FULL_N),
								  .EMPTY_N(master_xactor_f_rd_addr_EMPTY_N));

  // submodule master_xactor_f_rd_data
  FIFO2 #(.width(32'd34), .guarded(1'd1)) master_xactor_f_rd_data(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(master_xactor_f_rd_data_D_IN),
								  .ENQ(master_xactor_f_rd_data_ENQ),
								  .DEQ(master_xactor_f_rd_data_DEQ),
								  .CLR(master_xactor_f_rd_data_CLR),
								  .D_OUT(master_xactor_f_rd_data_D_OUT),
								  .FULL_N(master_xactor_f_rd_data_FULL_N),
								  .EMPTY_N(master_xactor_f_rd_data_EMPTY_N));

  // submodule master_xactor_f_wr_addr
  FIFO2 #(.width(32'd37), .guarded(1'd1)) master_xactor_f_wr_addr(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(master_xactor_f_wr_addr_D_IN),
								  .ENQ(master_xactor_f_wr_addr_ENQ),
								  .DEQ(master_xactor_f_wr_addr_DEQ),
								  .CLR(master_xactor_f_wr_addr_CLR),
								  .D_OUT(master_xactor_f_wr_addr_D_OUT),
								  .FULL_N(master_xactor_f_wr_addr_FULL_N),
								  .EMPTY_N(master_xactor_f_wr_addr_EMPTY_N));

  // submodule master_xactor_f_wr_data
  FIFO2 #(.width(32'd36), .guarded(1'd1)) master_xactor_f_wr_data(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(master_xactor_f_wr_data_D_IN),
								  .ENQ(master_xactor_f_wr_data_ENQ),
								  .DEQ(master_xactor_f_wr_data_DEQ),
								  .CLR(master_xactor_f_wr_data_CLR),
								  .D_OUT(master_xactor_f_wr_data_D_OUT),
								  .FULL_N(master_xactor_f_wr_data_FULL_N),
								  .EMPTY_N(master_xactor_f_wr_data_EMPTY_N));

  // submodule master_xactor_f_wr_resp
  FIFO2 #(.width(32'd2), .guarded(1'd1)) master_xactor_f_wr_resp(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(master_xactor_f_wr_resp_D_IN),
								 .ENQ(master_xactor_f_wr_resp_ENQ),
								 .DEQ(master_xactor_f_wr_resp_DEQ),
								 .CLR(master_xactor_f_wr_resp_CLR),
								 .D_OUT(master_xactor_f_wr_resp_D_OUT),
								 .FULL_N(master_xactor_f_wr_resp_FULL_N),
								 .EMPTY_N(master_xactor_f_wr_resp_EMPTY_N));

  // rule RL_generate_derived_reset
  assign CAN_FIRE_RL_generate_derived_reset = !dmActive ;
  assign WILL_FIRE_RL_generate_derived_reset =
	     CAN_FIRE_RL_generate_derived_reset ;

  // rule RL_rl_authentication_bypass
  assign CAN_FIRE_RL_rl_authentication_bypass = 1'd1 ;
  assign WILL_FIRE_RL_rl_authentication_bypass = 1'd1 ;

  // rule RL_rl_set_dm_status_bits
  assign CAN_FIRE_RL_rl_set_dm_status_bits = 1'd1 ;
  assign WILL_FIRE_RL_rl_set_dm_status_bits = !EN_dtm_putCommand_put ;

  // rule RL_rl_have_reset_logic
  assign CAN_FIRE_RL_rl_have_reset_logic = 1'd1 ;
  assign WILL_FIRE_RL_rl_have_reset_logic = 1'd1 ;

  // rule RL_access_system_bus
  assign CAN_FIRE_RL_access_system_bus =
	     master_xactor_f_rd_addr_FULL_N &&
	     master_xactor_f_wr_addr_FULL_N &&
	     master_xactor_f_wr_data_FULL_N &&
	     sbError == 3'd0 &&
	     !sbBusyError &&
	     !sbBusy &&
	     startSBAccess ;
  assign WILL_FIRE_RL_access_system_bus = CAN_FIRE_RL_access_system_bus ;

  // rule RL_responseSystemBusRead
  assign CAN_FIRE_RL_responseSystemBusRead =
	     master_xactor_f_rd_data_EMPTY_N && sbBusy ;
  assign WILL_FIRE_RL_responseSystemBusRead =
	     CAN_FIRE_RL_responseSystemBusRead ;

  // rule RL_responseSystemBusWrite
  assign CAN_FIRE_RL_responseSystemBusWrite =
	     master_xactor_f_wr_resp_EMPTY_N && sbBusy ;
  assign WILL_FIRE_RL_responseSystemBusWrite =
	     CAN_FIRE_RL_responseSystemBusWrite ;

  // rule RL_filter_abstract_commands
  assign CAN_FIRE_RL_filter_abstract_commands =
	     abst_busy && abst_command_good == 2'd1 ;
  assign WILL_FIRE_RL_filter_abstract_commands =
	     CAN_FIRE_RL_filter_abstract_commands ;

  // rule RL_rg_clear_resume_ack__dreg_update
  assign CAN_FIRE_RL_rg_clear_resume_ack__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_clear_resume_ack__dreg_update = 1'd1 ;

  // rule RL_ackHaveReset__dreg_update
  assign CAN_FIRE_RL_ackHaveReset__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ackHaveReset__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_abst_ar_regno_write_1__SEL_1 =
	     EN_hart_abstractReadResponse && abst_ar_aarPostIncrement ;
  assign MUX_abst_ar_regno_write_1__SEL_2 =
	     EN_dtm_putCommand_put && dtm_putCommand_put[1:0] == 2'b10 &&
	     dtm_putCommand_put[40:34] == 7'd23 ;
  assign MUX_abst_busy_write_1__SEL_1 =
	     WILL_FIRE_RL_filter_abstract_commands &&
	     (abst_ar_cmdType != 8'd0 || !abst_ar_transfer ||
	      vrg_unavailable_0 ||
	      abst_ar_aarSize != 3'd2) ;
  assign MUX_abst_busy_write_1__SEL_2 =
	     EN_dtm_putCommand_put &&
	     (dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b1_72_AN_ETC___d348 ||
	      dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d363) ;
  assign MUX_abst_cmderr_write_1__SEL_1 =
	     EN_dtm_putCommand_put &&
	     (dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b1_72_AN_ETC___d320 ||
	      dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d335) ;
  assign MUX_abst_data_0_write_1__SEL_1 =
	     EN_dtm_putCommand_put && i__h11619 == 7'd0 &&
	     dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d421 ;
  assign MUX_sbAddress0_write_1__SEL_1 =
	     WILL_FIRE_RL_access_system_bus &&
	     IF_sb_read_write_2_THEN_NOT_IF_sbAccess_3_EQ_0_ETC___d75 &&
	     sbAutoIncrement ;
  assign MUX_sbData0_write_1__SEL_1 =
	     WILL_FIRE_RL_responseSystemBusRead &&
	     master_xactor_f_rd_data_D_OUT[33:32] == 2'd0 ;
  assign MUX_sbError_write_1__SEL_1 =
	     WILL_FIRE_RL_responseSystemBusWrite &&
	     master_xactor_f_wr_resp_D_OUT != 2'd0 ;
  assign MUX_sbError_write_1__SEL_2 =
	     WILL_FIRE_RL_responseSystemBusRead &&
	     master_xactor_f_rd_data_D_OUT[33:32] != 2'd0 ;
  assign MUX_sbError_write_1__SEL_4 =
	     EN_dtm_putCommand_put &&
	     dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d397 ;
  assign MUX_startSBAccess_write_1__SEL_2 =
	     EN_dtm_putCommand_put &&
	     (dtm_putCommand_put[1:0] == 2'b01 &&
	      dtm_putCommand_put[40:34] == 7'd60 &&
	      !sbBusy &&
	      !sbBusyError &&
	      sbReadOnData ||
	      dtm_putCommand_put[1:0] == 2'b10 &&
	      dtm_putCommand_put[40:34] != 7'd16 &&
	      dtm_putCommand_put[40:34] != 7'd17 &&
	      dtm_putCommand_put[40:34] != 7'd18 &&
	      dtm_putCommand_put[40:34] != 7'd20 &&
	      dtm_putCommand_put[40:34] != 7'd21 &&
	      dtm_putCommand_put[40:34] != 7'd22 &&
	      dtm_putCommand_put[40:34] != 7'd23 &&
	      dtm_putCommand_put[40:34] != 7'd24 &&
	      dtm_putCommand_put[40:34] != 7'd48 &&
	      dtm_putCommand_put[40:34] != 7'd54 &&
	      dtm_putCommand_put[40:34] != 7'd56 &&
	      dtm_putCommand_put_BITS_40_TO_34_73_EQ_57_12_A_ETC___d292) ;
  assign MUX_vrg_have_reset_0_write_1__SEL_1 =
	     vrg_have_reset_sdw_0 != hart_set_have_reset_have_reset &&
	     hart_set_have_reset_have_reset ;
  assign MUX_abst_ar_regno_write_1__VAL_1 = abst_ar_regno + 16'd1 ;
  assign MUX_abst_cmderr_write_1__VAL_2 =
	     (abst_ar_cmdType == 8'd0 && abst_ar_transfer) ?
	       (vrg_unavailable_0 ? 3'd4 : lv_abst_cmderr__h10337) :
	       3'd2 ;
  assign MUX_abst_command_good_write_1__VAL_2 =
	     (abst_ar_cmdType == 8'd0 && abst_ar_transfer &&
	      !vrg_unavailable_0 &&
	      abst_ar_aarSize == 3'd2) ?
	       2'd3 :
	       2'd0 ;
  assign MUX_dmi_response_write_1__VAL_1 =
	     { 1'd0,
	       34'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign MUX_dmi_response_write_1__VAL_2 =
	     { 1'd1,
	       IF_dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b1_72_ETC___d691 } ;
  assign MUX_sbData0_write_1__VAL_1 =
	     master_xactor_f_rd_data_D_OUT[31:0] >> lv_shift__h9990 ;
  assign MUX_sbError_write_1__VAL_3 =
	     sb_read_write ?
	       IF_IF_sbAccess_3_EQ_0_4_OR_sbAccess_3_EQ_1_5_O_ETC___d130 :
	       _theResult_____2_snd_snd__h7386 ;

  // inlined wires
  assign rg_clear_resume_ack_1_whas =
	     EN_dtm_putCommand_put && dtm_putCommand_put[1:0] == 2'b10 &&
	     dtm_putCommand_put[40:34] == 7'd16 &&
	     dtm_putCommand_put[32] ;
  assign ackHaveReset_1_whas =
	     EN_dtm_putCommand_put && dtm_putCommand_put[1:0] == 2'b10 &&
	     dtm_putCommand_put[40:34] == 7'd16 ;

  // register abst_ar_aarPostIncrement
  assign abst_ar_aarPostIncrement_D_IN = dtm_putCommand_put[21] ;
  assign abst_ar_aarPostIncrement_EN = MUX_abst_ar_regno_write_1__SEL_2 ;

  // register abst_ar_aarSize
  assign abst_ar_aarSize_D_IN = dtm_putCommand_put[24:22] ;
  assign abst_ar_aarSize_EN = MUX_abst_ar_regno_write_1__SEL_2 ;

  // register abst_ar_cmdType
  assign abst_ar_cmdType_D_IN = dtm_putCommand_put[33:26] ;
  assign abst_ar_cmdType_EN = MUX_abst_ar_regno_write_1__SEL_2 ;

  // register abst_ar_regno
  assign abst_ar_regno_D_IN =
	     MUX_abst_ar_regno_write_1__SEL_1 ?
	       MUX_abst_ar_regno_write_1__VAL_1 :
	       dtm_putCommand_put[17:2] ;
  assign abst_ar_regno_EN =
	     EN_hart_abstractReadResponse && abst_ar_aarPostIncrement ||
	     EN_dtm_putCommand_put && dtm_putCommand_put[1:0] == 2'b10 &&
	     dtm_putCommand_put[40:34] == 7'd23 ;

  // register abst_ar_transfer
  assign abst_ar_transfer_D_IN = dtm_putCommand_put[19] ;
  assign abst_ar_transfer_EN = MUX_abst_ar_regno_write_1__SEL_2 ;

  // register abst_ar_write
  assign abst_ar_write_D_IN = dtm_putCommand_put[18] ;
  assign abst_ar_write_EN = MUX_abst_ar_regno_write_1__SEL_2 ;

  // register abst_busy
  assign abst_busy_D_IN =
	     !MUX_abst_busy_write_1__SEL_1 && !EN_hart_abstractReadResponse ;
  assign abst_busy_EN =
	     MUX_abst_busy_write_1__SEL_1 ||
	     EN_dtm_putCommand_put &&
	     (dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b1_72_AN_ETC___d348 ||
	      dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d363) ||
	     EN_hart_abstractReadResponse ;

  // register abst_cmderr
  assign abst_cmderr_D_IN =
	     MUX_abst_cmderr_write_1__SEL_1 ?
	       3'd1 :
	       MUX_abst_cmderr_write_1__VAL_2 ;
  assign abst_cmderr_EN =
	     EN_dtm_putCommand_put &&
	     (dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b1_72_AN_ETC___d320 ||
	      dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d335) ||
	     WILL_FIRE_RL_filter_abstract_commands ;

  // register abst_command_good
  always@(MUX_abst_busy_write_1__SEL_2 or
	  WILL_FIRE_RL_filter_abstract_commands or
	  MUX_abst_command_good_write_1__VAL_2 or
	  EN_hart_abstractReadResponse or EN_hart_abstractOperation)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_abst_busy_write_1__SEL_2: abst_command_good_D_IN = 2'd1;
      WILL_FIRE_RL_filter_abstract_commands:
	  abst_command_good_D_IN = MUX_abst_command_good_write_1__VAL_2;
      EN_hart_abstractReadResponse: abst_command_good_D_IN = 2'd0;
      EN_hart_abstractOperation: abst_command_good_D_IN = 2'd2;
      default: abst_command_good_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign abst_command_good_EN =
	     EN_dtm_putCommand_put &&
	     (dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b1_72_AN_ETC___d348 ||
	      dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d363) ||
	     WILL_FIRE_RL_filter_abstract_commands ||
	     EN_hart_abstractReadResponse ||
	     EN_hart_abstractOperation ;

  // register abst_data_0
  assign abst_data_0_D_IN =
	     MUX_abst_data_0_write_1__SEL_1 ?
	       dtm_putCommand_put[33:2] :
	       hart_abstractReadResponse_abstractResponse ;
  assign abst_data_0_EN =
	     EN_dtm_putCommand_put && i__h11619 == 7'd0 &&
	     dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d421 ||
	     EN_hart_abstractReadResponse ;

  // register abst_data_1
  assign abst_data_1_D_IN = dtm_putCommand_put[33:2] ;
  assign abst_data_1_EN =
	     EN_dtm_putCommand_put && i__h11619 == 7'd1 &&
	     dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d421 ;

  // register abst_data_10
  assign abst_data_10_D_IN = dtm_putCommand_put[33:2] ;
  assign abst_data_10_EN =
	     EN_dtm_putCommand_put && i__h11619 == 7'd10 &&
	     dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d421 ;

  // register abst_data_11
  assign abst_data_11_D_IN = dtm_putCommand_put[33:2] ;
  assign abst_data_11_EN =
	     EN_dtm_putCommand_put && i__h11619 == 7'd11 &&
	     dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d421 ;

  // register abst_data_2
  assign abst_data_2_D_IN = dtm_putCommand_put[33:2] ;
  assign abst_data_2_EN =
	     EN_dtm_putCommand_put && i__h11619 == 7'd2 &&
	     dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d421 ;

  // register abst_data_3
  assign abst_data_3_D_IN = dtm_putCommand_put[33:2] ;
  assign abst_data_3_EN =
	     EN_dtm_putCommand_put && i__h11619 == 7'd3 &&
	     dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d421 ;

  // register abst_data_4
  assign abst_data_4_D_IN = dtm_putCommand_put[33:2] ;
  assign abst_data_4_EN =
	     EN_dtm_putCommand_put && i__h11619 == 7'd4 &&
	     dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d421 ;

  // register abst_data_5
  assign abst_data_5_D_IN = dtm_putCommand_put[33:2] ;
  assign abst_data_5_EN =
	     EN_dtm_putCommand_put && i__h11619 == 7'd5 &&
	     dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d421 ;

  // register abst_data_6
  assign abst_data_6_D_IN = dtm_putCommand_put[33:2] ;
  assign abst_data_6_EN =
	     EN_dtm_putCommand_put && i__h11619 == 7'd6 &&
	     dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d421 ;

  // register abst_data_7
  assign abst_data_7_D_IN = dtm_putCommand_put[33:2] ;
  assign abst_data_7_EN =
	     EN_dtm_putCommand_put && i__h11619 == 7'd7 &&
	     dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d421 ;

  // register abst_data_8
  assign abst_data_8_D_IN = dtm_putCommand_put[33:2] ;
  assign abst_data_8_EN =
	     EN_dtm_putCommand_put && i__h11619 == 7'd8 &&
	     dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d421 ;

  // register abst_data_9
  assign abst_data_9_D_IN = dtm_putCommand_put[33:2] ;
  assign abst_data_9_EN =
	     EN_dtm_putCommand_put && i__h11619 == 7'd9 &&
	     dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d421 ;

  // register ackHaveReset
  assign ackHaveReset_D_IN = ackHaveReset_1_whas && dtm_putCommand_put[30] ;
  assign ackHaveReset_EN = 1'd1 ;

  // register allHalted
  assign allHalted_D_IN = vrg_halted_0 ;
  assign allHalted_EN = WILL_FIRE_RL_rl_set_dm_status_bits ;

  // register allHaveReset
  assign allHaveReset_D_IN = vrg_have_reset_0 ;
  assign allHaveReset_EN = WILL_FIRE_RL_rl_set_dm_status_bits ;

  // register allNonExistent
  assign allNonExistent_D_IN = 1'd0 ;
  assign allNonExistent_EN = WILL_FIRE_RL_rl_set_dm_status_bits ;

  // register allResumeAck
  assign allResumeAck_D_IN = vrg_resume_ack_0 ;
  assign allResumeAck_EN = WILL_FIRE_RL_rl_set_dm_status_bits ;

  // register allRunning
  assign allRunning_D_IN = ~vrg_halted_0 ;
  assign allRunning_EN = WILL_FIRE_RL_rl_set_dm_status_bits ;

  // register allUnAvail
  assign allUnAvail_D_IN = vrg_unavailable_0 ;
  assign allUnAvail_EN = WILL_FIRE_RL_rl_set_dm_status_bits ;

  // register anyHalted
  assign anyHalted_D_IN = vrg_halted_0 ;
  assign anyHalted_EN = WILL_FIRE_RL_rl_set_dm_status_bits ;

  // register anyHaveReset
  assign anyHaveReset_D_IN = vrg_have_reset_0 ;
  assign anyHaveReset_EN = WILL_FIRE_RL_rl_set_dm_status_bits ;

  // register anyNonExistent
  assign anyNonExistent_D_IN = 1'd0 ;
  assign anyNonExistent_EN = WILL_FIRE_RL_rl_set_dm_status_bits ;

  // register anyResumeAck
  assign anyResumeAck_D_IN = vrg_resume_ack_0 ;
  assign anyResumeAck_EN = WILL_FIRE_RL_rl_set_dm_status_bits ;

  // register anyRunning
  assign anyRunning_D_IN = ~vrg_halted_0 ;
  assign anyRunning_EN = WILL_FIRE_RL_rl_set_dm_status_bits ;

  // register anyUnAvail
  assign anyUnAvail_D_IN = vrg_unavailable_0 ;
  assign anyUnAvail_EN = WILL_FIRE_RL_rl_set_dm_status_bits ;

  // register auth_data
  assign auth_data_D_IN = dtm_putCommand_put[33:2] ;
  assign auth_data_EN =
	     EN_dtm_putCommand_put && dtm_putCommand_put[1:0] == 2'b10 &&
	     dtm_putCommand_put[40:34] == 7'd48 ;

  // register authbusy
  assign authbusy_D_IN = 1'b0 ;
  assign authbusy_EN = 1'b0 ;

  // register authenticated
  assign authenticated_D_IN = 1'b1 ;
  assign authenticated_EN = 1'd1 ;

  // register autoExecData
  assign autoExecData_D_IN = dtm_putCommand_put[13:2] ;
  assign autoExecData_EN =
	     EN_dtm_putCommand_put && dtm_putCommand_put[1:0] == 2'b10 &&
	     dtm_putCommand_put[40:34] == 7'd24 ;

  // register clrResetHaltReq
  assign clrResetHaltReq_D_IN = dtm_putCommand_put[4] ;
  assign clrResetHaltReq_EN = ackHaveReset_1_whas ;

  // register dmActive
  assign dmActive_D_IN = dtm_putCommand_put[2] ;
  assign dmActive_EN = ackHaveReset_1_whas ;

  // register dmi_response
  assign dmi_response_D_IN =
	     EN_dtm_getResponse_get ?
	       MUX_dmi_response_write_1__VAL_1 :
	       MUX_dmi_response_write_1__VAL_2 ;
  assign dmi_response_EN = EN_dtm_getResponse_get || EN_dtm_putCommand_put ;

  // register haltReq
  assign haltReq_D_IN = dtm_putCommand_put[33] ;
  assign haltReq_EN = ackHaveReset_1_whas ;

  // register hartReset
  assign hartReset_D_IN = dtm_putCommand_put[31] ;
  assign hartReset_EN = ackHaveReset_1_whas ;

  // register maskData
  assign maskData_D_IN = dtm_putCommand_put[2] ;
  assign maskData_EN =
	     EN_dtm_putCommand_put && dtm_putCommand_put[1:0] == 2'b10 &&
	     dtm_putCommand_put[40:34] == 7'd21 ;

  // register nDMReset
  assign nDMReset_D_IN = dtm_putCommand_put[3] ;
  assign nDMReset_EN = ackHaveReset_1_whas ;

  // register progbuf_0
  assign progbuf_0_D_IN = dtm_putCommand_put[33:2] ;
  assign progbuf_0_EN =
	     EN_dtm_putCommand_put && x__h17163 == 7'd0 &&
	     dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d468 ;

  // register progbuf_1
  assign progbuf_1_D_IN = dtm_putCommand_put[33:2] ;
  assign progbuf_1_EN =
	     EN_dtm_putCommand_put && x__h17163 == 7'd1 &&
	     dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d468 ;

  // register progbuf_10
  assign progbuf_10_D_IN = dtm_putCommand_put[33:2] ;
  assign progbuf_10_EN =
	     EN_dtm_putCommand_put && x__h17163 == 7'd10 &&
	     dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d468 ;

  // register progbuf_11
  assign progbuf_11_D_IN = dtm_putCommand_put[33:2] ;
  assign progbuf_11_EN =
	     EN_dtm_putCommand_put && x__h17163 == 7'd11 &&
	     dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d468 ;

  // register progbuf_12
  assign progbuf_12_D_IN = dtm_putCommand_put[33:2] ;
  assign progbuf_12_EN =
	     EN_dtm_putCommand_put && x__h17163 == 7'd12 &&
	     dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d468 ;

  // register progbuf_13
  assign progbuf_13_D_IN = dtm_putCommand_put[33:2] ;
  assign progbuf_13_EN =
	     EN_dtm_putCommand_put && x__h17163 == 7'd13 &&
	     dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d468 ;

  // register progbuf_14
  assign progbuf_14_D_IN = dtm_putCommand_put[33:2] ;
  assign progbuf_14_EN =
	     EN_dtm_putCommand_put && x__h17163 == 7'd14 &&
	     dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d468 ;

  // register progbuf_15
  assign progbuf_15_D_IN = dtm_putCommand_put[33:2] ;
  assign progbuf_15_EN =
	     EN_dtm_putCommand_put && x__h17163 == 7'd15 &&
	     dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d468 ;

  // register progbuf_2
  assign progbuf_2_D_IN = dtm_putCommand_put[33:2] ;
  assign progbuf_2_EN =
	     EN_dtm_putCommand_put && x__h17163 == 7'd2 &&
	     dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d468 ;

  // register progbuf_3
  assign progbuf_3_D_IN = dtm_putCommand_put[33:2] ;
  assign progbuf_3_EN =
	     EN_dtm_putCommand_put && x__h17163 == 7'd3 &&
	     dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d468 ;

  // register progbuf_4
  assign progbuf_4_D_IN = dtm_putCommand_put[33:2] ;
  assign progbuf_4_EN =
	     EN_dtm_putCommand_put && x__h17163 == 7'd4 &&
	     dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d468 ;

  // register progbuf_5
  assign progbuf_5_D_IN = dtm_putCommand_put[33:2] ;
  assign progbuf_5_EN =
	     EN_dtm_putCommand_put && x__h17163 == 7'd5 &&
	     dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d468 ;

  // register progbuf_6
  assign progbuf_6_D_IN = dtm_putCommand_put[33:2] ;
  assign progbuf_6_EN =
	     EN_dtm_putCommand_put && x__h17163 == 7'd6 &&
	     dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d468 ;

  // register progbuf_7
  assign progbuf_7_D_IN = dtm_putCommand_put[33:2] ;
  assign progbuf_7_EN =
	     EN_dtm_putCommand_put && x__h17163 == 7'd7 &&
	     dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d468 ;

  // register progbuf_8
  assign progbuf_8_D_IN = dtm_putCommand_put[33:2] ;
  assign progbuf_8_EN =
	     EN_dtm_putCommand_put && x__h17163 == 7'd8 &&
	     dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d468 ;

  // register progbuf_9
  assign progbuf_9_D_IN = dtm_putCommand_put[33:2] ;
  assign progbuf_9_EN =
	     EN_dtm_putCommand_put && x__h17163 == 7'd9 &&
	     dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d468 ;

  // register resumeReq
  assign resumeReq_D_IN = dtm_putCommand_put[32] ;
  assign resumeReq_EN = ackHaveReset_1_whas ;

  // register rg_clear_resume_ack
  assign rg_clear_resume_ack_D_IN = rg_clear_resume_ack_1_whas ;
  assign rg_clear_resume_ack_EN = 1'd1 ;

  // register rg_lower_addr_bits
  assign rg_lower_addr_bits_D_IN = sbAddress0[1:0] ;
  assign rg_lower_addr_bits_EN =
	     WILL_FIRE_RL_access_system_bus &&
	     IF_sb_read_write_2_THEN_NOT_IF_sbAccess_3_EQ_0_ETC___d75 &&
	     sb_read_write ;

  // register sbAccess
  assign sbAccess_D_IN = dtm_putCommand_put[21:19] ;
  assign sbAccess_EN =
	     EN_dtm_putCommand_put && dtm_putCommand_put[1:0] == 2'b10 &&
	     dtm_putCommand_put[40:34] == 7'd56 ;

  // register sbAddress0
  assign sbAddress0_D_IN =
	     MUX_sbAddress0_write_1__SEL_1 ?
	       sbAddress1_read__16_CONCAT_sbAddress0_read__4__ETC___d120[31:0] :
	       dtm_putCommand_put[33:2] ;
  assign sbAddress0_EN =
	     WILL_FIRE_RL_access_system_bus &&
	     IF_sb_read_write_2_THEN_NOT_IF_sbAccess_3_EQ_0_ETC___d75 &&
	     sbAutoIncrement ||
	     EN_dtm_putCommand_put && dtm_putCommand_put[1:0] == 2'b10 &&
	     dtm_putCommand_put[40:34] == 7'd57 &&
	     !sbBusy ;

  // register sbAddress1
  assign sbAddress1_D_IN =
	     MUX_sbAddress0_write_1__SEL_1 ?
	       sbAddress1_read__16_CONCAT_sbAddress0_read__4__ETC___d120[63:32] :
	       dtm_putCommand_put[33:2] ;
  assign sbAddress1_EN =
	     WILL_FIRE_RL_access_system_bus &&
	     IF_sb_read_write_2_THEN_NOT_IF_sbAccess_3_EQ_0_ETC___d75 &&
	     sbAutoIncrement ||
	     EN_dtm_putCommand_put && dtm_putCommand_put[1:0] == 2'b10 &&
	     dtm_putCommand_put[40:34] == 7'd58 &&
	     !sbBusy ;

  // register sbAutoIncrement
  assign sbAutoIncrement_D_IN = dtm_putCommand_put[18] ;
  assign sbAutoIncrement_EN =
	     EN_dtm_putCommand_put && dtm_putCommand_put[1:0] == 2'b10 &&
	     dtm_putCommand_put[40:34] == 7'd56 ;

  // register sbBusy
  assign sbBusy_D_IN =
	     !WILL_FIRE_RL_responseSystemBusWrite &&
	     !WILL_FIRE_RL_responseSystemBusRead ;
  assign sbBusy_EN =
	     WILL_FIRE_RL_access_system_bus &&
	     IF_sb_read_write_2_THEN_NOT_IF_sbAccess_3_EQ_0_ETC___d75 ||
	     WILL_FIRE_RL_responseSystemBusWrite ||
	     WILL_FIRE_RL_responseSystemBusRead ;

  // register sbBusyError
  assign sbBusyError_D_IN =
	     dtm_putCommand_put[1:0] == 2'b01 ||
	     dtm_putCommand_put[40:34] != 7'd56 ;
  assign sbBusyError_EN =
	     EN_dtm_putCommand_put &&
	     (dtm_putCommand_put[1:0] == 2'b01 &&
	      (dtm_putCommand_put[40:34] == 7'd60 && sbBusy ||
	       (dtm_putCommand_put[40:34] == 7'd61 ||
		dtm_putCommand_put[40:34] == 7'd62 ||
		dtm_putCommand_put[40:34] == 7'd63) &&
	       sbBusy) ||
	      dtm_putCommand_put[1:0] == 2'b10 &&
	      (dtm_putCommand_put[40:34] == 7'd54 && sbBusy ||
	       dtm_putCommand_put[40:34] == 7'd56 && dtm_putCommand_put[24] ||
	       dtm_putCommand_put[40:34] == 7'd57 && sbBusy ||
	       dtm_putCommand_put[40:34] == 7'd58 && sbBusy ||
	       dtm_putCommand_put[40:34] == 7'd60 && sbBusy ||
	       dtm_putCommand_put[40:34] == 7'd61 && sbBusy ||
	       (dtm_putCommand_put[40:34] == 7'd62 ||
		dtm_putCommand_put[40:34] == 7'd63) &&
	       sbBusy)) ;

  // register sbData0
  assign sbData0_D_IN =
	     MUX_sbData0_write_1__SEL_1 ?
	       MUX_sbData0_write_1__VAL_1 :
	       dtm_putCommand_put[33:2] ;
  assign sbData0_EN =
	     WILL_FIRE_RL_responseSystemBusRead &&
	     master_xactor_f_rd_data_D_OUT[33:32] == 2'd0 ||
	     EN_dtm_putCommand_put &&
	     dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d402 ;

  // register sbData1
  assign sbData1_D_IN = dtm_putCommand_put[33:2] ;
  assign sbData1_EN =
	     EN_dtm_putCommand_put && dtm_putCommand_put[1:0] == 2'b10 &&
	     dtm_putCommand_put[40:34] == 7'd61 &&
	     !sbBusy ;

  // register sbError
  always@(MUX_sbError_write_1__SEL_1 or
	  MUX_sbError_write_1__SEL_2 or
	  WILL_FIRE_RL_access_system_bus or
	  MUX_sbError_write_1__VAL_3 or MUX_sbError_write_1__SEL_4)
  case (1'b1)
    MUX_sbError_write_1__SEL_1 || MUX_sbError_write_1__SEL_2:
	sbError_D_IN = 3'd7;
    WILL_FIRE_RL_access_system_bus: sbError_D_IN = MUX_sbError_write_1__VAL_3;
    MUX_sbError_write_1__SEL_4: sbError_D_IN = 3'd0;
    default: sbError_D_IN = 3'bxxx /* unspecified value */ ;
  endcase
  assign sbError_EN =
	     WILL_FIRE_RL_responseSystemBusRead &&
	     master_xactor_f_rd_data_D_OUT[33:32] != 2'd0 ||
	     WILL_FIRE_RL_responseSystemBusWrite &&
	     master_xactor_f_wr_resp_D_OUT != 2'd0 ||
	     EN_dtm_putCommand_put &&
	     dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d397 ||
	     WILL_FIRE_RL_access_system_bus ;

  // register sbReadOnAddr
  assign sbReadOnAddr_D_IN = dtm_putCommand_put[22] ;
  assign sbReadOnAddr_EN =
	     EN_dtm_putCommand_put && dtm_putCommand_put[1:0] == 2'b10 &&
	     dtm_putCommand_put[40:34] == 7'd56 ;

  // register sbReadOnData
  assign sbReadOnData_D_IN = dtm_putCommand_put[17] ;
  assign sbReadOnData_EN =
	     EN_dtm_putCommand_put && dtm_putCommand_put[1:0] == 2'b10 &&
	     dtm_putCommand_put[40:34] == 7'd56 ;

  // register sb_read_write
  assign sb_read_write_D_IN =
	     dtm_putCommand_put[1:0] == 2'b01 ||
	     dtm_putCommand_put[40:34] == 7'd57 ;
  assign sb_read_write_EN = MUX_startSBAccess_write_1__SEL_2 ;

  // register setResetHaltRequest
  assign setResetHaltRequest_D_IN = dtm_putCommand_put[5] ;
  assign setResetHaltRequest_EN = ackHaveReset_1_whas ;

  // register startSBAccess
  assign startSBAccess_D_IN = !WILL_FIRE_RL_access_system_bus ;
  assign startSBAccess_EN =
	     MUX_startSBAccess_write_1__SEL_2 ||
	     WILL_FIRE_RL_access_system_bus ;

  // register vrg_halted_0
  assign vrg_halted_0_D_IN = hart_set_halted_halted ;
  assign vrg_halted_0_EN = 1'd1 ;

  // register vrg_halted_sdw_0
  assign vrg_halted_sdw_0_D_IN = vrg_halted_0 ;
  assign vrg_halted_sdw_0_EN = WILL_FIRE_RL_rl_set_dm_status_bits ;

  // register vrg_have_reset_0
  assign vrg_have_reset_0_D_IN = MUX_vrg_have_reset_0_write_1__SEL_1 ;
  assign vrg_have_reset_0_EN =
	     ackHaveReset && vrg_have_reset_0 ||
	     vrg_have_reset_sdw_0 != hart_set_have_reset_have_reset &&
	     hart_set_have_reset_have_reset ;

  // register vrg_have_reset_sdw_0
  assign vrg_have_reset_sdw_0_D_IN = hart_set_have_reset_have_reset ;
  assign vrg_have_reset_sdw_0_EN = 1'd1 ;

  // register vrg_hawsel_0
  assign vrg_hawsel_0_D_IN = 1'b0 ;
  assign vrg_hawsel_0_EN = 1'b0 ;

  // register vrg_resume_ack_0
  assign vrg_resume_ack_0_D_IN = vrg_halted_sdw_0 && !vrg_halted_0 ;
  assign vrg_resume_ack_0_EN =
	     WILL_FIRE_RL_rl_set_dm_status_bits &&
	     (vrg_halted_sdw_0 && !vrg_halted_0 ||
	      rg_clear_resume_ack && vrg_halted_0 ||
	      haltReq) ;

  // register vrg_unavailable_0
  assign vrg_unavailable_0_D_IN = hart_set_unavailable_unavailable ;
  assign vrg_unavailable_0_EN = 1'd1 ;

  // submodule dm_reset
  assign dm_reset_ASSERT_IN = CAN_FIRE_RL_generate_derived_reset ;

  // submodule master_xactor_f_rd_addr
  assign master_xactor_f_rd_addr_D_IN =
	     { sbAddress0, 3'd3, size__h7155[1:0] } ;
  assign master_xactor_f_rd_addr_ENQ =
	     WILL_FIRE_RL_access_system_bus &&
	     IF_sb_read_write_2_THEN_NOT_IF_sbAccess_3_EQ_0_ETC___d75 &&
	     sb_read_write ;
  assign master_xactor_f_rd_addr_DEQ =
	     master_xactor_f_rd_addr_EMPTY_N &&
	     debug_master_m_arready_arready ;
  assign master_xactor_f_rd_addr_CLR = 1'b0 ;

  // submodule master_xactor_f_rd_data
  assign master_xactor_f_rd_data_D_IN =
	     { debug_master_m_rvalid_rresp, debug_master_m_rvalid_rdata } ;
  assign master_xactor_f_rd_data_ENQ =
	     debug_master_m_rvalid_rvalid && master_xactor_f_rd_data_FULL_N ;
  assign master_xactor_f_rd_data_DEQ = CAN_FIRE_RL_responseSystemBusRead ;
  assign master_xactor_f_rd_data_CLR = 1'b0 ;

  // submodule master_xactor_f_wr_addr
  assign master_xactor_f_wr_addr_D_IN =
	     { sbAddress0, 3'd3, size__h7155[1:0] } ;
  assign master_xactor_f_wr_addr_ENQ =
	     WILL_FIRE_RL_access_system_bus &&
	     IF_sb_read_write_2_THEN_NOT_IF_sbAccess_3_EQ_0_ETC___d75 &&
	     !sb_read_write ;
  assign master_xactor_f_wr_addr_DEQ =
	     master_xactor_f_wr_addr_EMPTY_N &&
	     debug_master_m_awready_awready ;
  assign master_xactor_f_wr_addr_CLR = 1'b0 ;

  // submodule master_xactor_f_wr_data
  assign master_xactor_f_wr_data_D_IN =
	     { IF_sbAccess_3_EQ_0_4_THEN_sbData0_1_BITS_7_TO__ETC___d96[31:0],
	       x__h9605[3:0] } ;
  assign master_xactor_f_wr_data_ENQ =
	     WILL_FIRE_RL_access_system_bus &&
	     IF_sb_read_write_2_THEN_NOT_IF_sbAccess_3_EQ_0_ETC___d75 &&
	     !sb_read_write ;
  assign master_xactor_f_wr_data_DEQ =
	     master_xactor_f_wr_data_EMPTY_N && debug_master_m_wready_wready ;
  assign master_xactor_f_wr_data_CLR = 1'b0 ;

  // submodule master_xactor_f_wr_resp
  assign master_xactor_f_wr_resp_D_IN = debug_master_m_bvalid_bresp ;
  assign master_xactor_f_wr_resp_ENQ =
	     debug_master_m_bvalid_bvalid && master_xactor_f_wr_resp_FULL_N ;
  assign master_xactor_f_wr_resp_DEQ = CAN_FIRE_RL_responseSystemBusWrite ;
  assign master_xactor_f_wr_resp_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_sbAccess_3_EQ_0_4_OR_sbAccess_3_EQ_1_5_O_ETC___d130 =
	     (size__h7155 == 3'd3 && sbAddress0[2:0] != 3'd0 ||
	      size__h7155 == 3'd2 && sbAddress0[1:0] != 2'd0 ||
	      size__h7155 == 3'd1 && sbAddress0[0]) ?
	       3'd3 :
	       detect_error__h7159 ;
  assign IF_dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b1_72_ETC___d691 =
	     (dtm_putCommand_put[1:0] == 2'b01) ?
	       { y_avValue_fst__h18110, y_avValue_snd__h18111 } :
	       { 32'd0, v__h12335 } ;
  assign IF_sb_read_write_2_THEN_NOT_IF_sbAccess_3_EQ_0_ETC___d75 =
	     sb_read_write ?
	       (size__h7155 != 3'd3 || sbAddress0[2:0] == 3'd0) &&
	       (size__h7155 != 3'd2 || sbAddress0[1:0] == 2'd0) &&
	       (size__h7155 != 3'd1 || !sbAddress0[0]) &&
	       sbAccess != 3'd3 :
	       (size__h7155 != 3'd3 || sbAddress0[1:0] == 2'd0) &&
	       (size__h7155 != 3'd2 || sbAddress0[1:0] == 2'd0) &&
	       (size__h7155 != 3'd1 || !sbAddress0[0]) &&
	       sbAccess != 3'd3 ;
  assign NOT_dtm_putCommand_put_BITS_40_TO_34_73_ULT_4__ETC___d343 =
	     !dtm_putCommand_put_BITS_40_TO_34_73_ULT_4___d311 &&
	     dtm_putCommand_put_BITS_40_TO_34_73_ULE_15___d313 &&
	     !abst_busy &&
	     autoExecData[i__h11619[3:0]] ;
  assign _theResult_____1_fst__h18222 =
	     (dtm_putCommand_put[40:34] >= 7'd32 &&
	      dtm_putCommand_put[40:34] <= 7'd47) ?
	       dmi_response_data___1__h18224 :
	       32'd0 ;
  assign _theResult_____2__h7382 = { 1'd0, sbAddress0[1:0] } ;
  assign _theResult_____2_snd_snd__h7386 =
	     (size__h7155 == 3'd3 && sbAddress0[1:0] != 2'd0 ||
	      size__h7155 == 3'd2 && sbAddress0[1:0] != 2'd0 ||
	      size__h7155 == 3'd1 && sbAddress0[0]) ?
	       3'd3 :
	       detect_error__h7159 ;
  assign dmi_response_data___2__h10904 = { r1__read__h12599, dmActive } ;
  assign dmi_response_data___2__h10911 = { r1__read__h13229, 4'b0010 } ;
  assign dmi_response_data___2__h10939 = { 31'd0, maskData } ;
  assign dmi_response_data___2__h10946 = { r1__read__h14278, 4'd12 } ;
  assign dmi_response_data___2__h10953 = { r1__read__h14577, abst_ar_regno } ;
  assign dmi_response_data___2__h10960 = { 20'd0, autoExecData } ;
  assign dmi_response_data___2__h11030 = { r1__read__h15183, 1'd1 } ;
  assign dmi_response_data___2__h11082 = { 31'd0, vrg_halted_0 } ;
  assign dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d335 =
	     dtm_putCommand_put[1:0] == 2'b10 &&
	     dtm_putCommand_put[40:34] != 7'd16 &&
	     dtm_putCommand_put[40:34] != 7'd17 &&
	     dtm_putCommand_put[40:34] != 7'd18 &&
	     dtm_putCommand_put[40:34] != 7'd20 &&
	     dtm_putCommand_put[40:34] != 7'd21 &&
	     dtm_putCommand_put[40:34] != 7'd22 &&
	     dtm_putCommand_put[40:34] != 7'd23 &&
	     dtm_putCommand_put[40:34] != 7'd24 &&
	     dtm_putCommand_put[40:34] != 7'd48 &&
	     dtm_putCommand_put[40:34] != 7'd54 &&
	     dtm_putCommand_put[40:34] != 7'd56 &&
	     dtm_putCommand_put[40:34] != 7'd57 &&
	     dtm_putCommand_put[40:34] != 7'd58 &&
	     dtm_putCommand_put[40:34] != 7'd60 &&
	     dtm_putCommand_put[40:34] != 7'd61 &&
	     dtm_putCommand_put[40:34] != 7'd62 &&
	     dtm_putCommand_put[40:34] != 7'd63 &&
	     !dtm_putCommand_put_BITS_40_TO_34_73_ULT_4___d311 &&
	     dtm_putCommand_put_BITS_40_TO_34_73_ULE_15___d313 &&
	     abst_busy ;
  assign dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d363 =
	     dtm_putCommand_put[1:0] == 2'b10 &&
	     dtm_putCommand_put[40:34] != 7'd16 &&
	     dtm_putCommand_put[40:34] != 7'd17 &&
	     dtm_putCommand_put[40:34] != 7'd18 &&
	     dtm_putCommand_put[40:34] != 7'd20 &&
	     dtm_putCommand_put[40:34] != 7'd21 &&
	     dtm_putCommand_put[40:34] != 7'd22 &&
	     (dtm_putCommand_put[40:34] == 7'd23 ||
	      dtm_putCommand_put[40:34] != 7'd24 &&
	      dtm_putCommand_put[40:34] != 7'd48 &&
	      dtm_putCommand_put[40:34] != 7'd54 &&
	      dtm_putCommand_put[40:34] != 7'd56 &&
	      dtm_putCommand_put[40:34] != 7'd57 &&
	      dtm_putCommand_put[40:34] != 7'd58 &&
	      dtm_putCommand_put[40:34] != 7'd60 &&
	      dtm_putCommand_put[40:34] != 7'd61 &&
	      dtm_putCommand_put[40:34] != 7'd62 &&
	      dtm_putCommand_put[40:34] != 7'd63 &&
	      NOT_dtm_putCommand_put_BITS_40_TO_34_73_ULT_4__ETC___d343) ;
  assign dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d397 =
	     dtm_putCommand_put[1:0] == 2'b10 &&
	     dtm_putCommand_put[40:34] == 7'd56 &&
	     dtm_putCommand_put[16:14] == 3'b111 &&
	     sbError != 3'd0 ;
  assign dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d402 =
	     dtm_putCommand_put[1:0] == 2'b10 &&
	     dtm_putCommand_put[40:34] == 7'd60 &&
	     !sbBusy &&
	     !sbBusyError ;
  assign dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d421 =
	     dtm_putCommand_put[1:0] == 2'b10 &&
	     dtm_putCommand_put[40:34] != 7'd16 &&
	     dtm_putCommand_put[40:34] != 7'd17 &&
	     dtm_putCommand_put[40:34] != 7'd18 &&
	     dtm_putCommand_put[40:34] != 7'd20 &&
	     dtm_putCommand_put[40:34] != 7'd21 &&
	     dtm_putCommand_put[40:34] != 7'd22 &&
	     dtm_putCommand_put[40:34] != 7'd23 &&
	     dtm_putCommand_put[40:34] != 7'd24 &&
	     dtm_putCommand_put[40:34] != 7'd48 &&
	     dtm_putCommand_put[40:34] != 7'd54 &&
	     dtm_putCommand_put[40:34] != 7'd56 &&
	     dtm_putCommand_put[40:34] != 7'd57 &&
	     dtm_putCommand_put[40:34] != 7'd58 &&
	     dtm_putCommand_put[40:34] != 7'd60 &&
	     dtm_putCommand_put[40:34] != 7'd61 &&
	     dtm_putCommand_put[40:34] != 7'd62 &&
	     dtm_putCommand_put[40:34] != 7'd63 &&
	     !dtm_putCommand_put_BITS_40_TO_34_73_ULT_4___d311 &&
	     dtm_putCommand_put_BITS_40_TO_34_73_ULE_15___d313 &&
	     !abst_busy ;
  assign dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b10_49_A_ETC___d468 =
	     dtm_putCommand_put[1:0] == 2'b10 &&
	     (dtm_putCommand_put_BITS_40_TO_34_73_ULT_4___d311 ||
	      !dtm_putCommand_put_BITS_40_TO_34_73_ULE_15___d313) &&
	     dtm_putCommand_put[40:34] >= 7'd32 &&
	     dtm_putCommand_put[40:34] <= 7'd47 ;
  assign dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b1_72_AN_ETC___d320 =
	     dtm_putCommand_put[1:0] == 2'b01 &&
	     dtm_putCommand_put[40:34] != 7'd16 &&
	     dtm_putCommand_put[40:34] != 7'd17 &&
	     dtm_putCommand_put[40:34] != 7'd18 &&
	     dtm_putCommand_put[40:34] != 7'd19 &&
	     dtm_putCommand_put[40:34] != 7'd20 &&
	     dtm_putCommand_put[40:34] != 7'd21 &&
	     dtm_putCommand_put[40:34] != 7'd22 &&
	     dtm_putCommand_put[40:34] != 7'd23 &&
	     dtm_putCommand_put[40:34] != 7'd24 &&
	     dtm_putCommand_put[40:34] != 7'd25 &&
	     dtm_putCommand_put[40:34] != 7'd26 &&
	     dtm_putCommand_put[40:34] != 7'd27 &&
	     dtm_putCommand_put[40:34] != 7'd28 &&
	     dtm_putCommand_put[40:34] != 7'd29 &&
	     dtm_putCommand_put[40:34] != 7'd48 &&
	     dtm_putCommand_put[40:34] != 7'd52 &&
	     dtm_putCommand_put[40:34] != 7'd53 &&
	     dtm_putCommand_put[40:34] != 7'd54 &&
	     dtm_putCommand_put[40:34] != 7'd56 &&
	     dtm_putCommand_put[40:34] != 7'd57 &&
	     dtm_putCommand_put[40:34] != 7'd58 &&
	     dtm_putCommand_put[40:34] != 7'd60 &&
	     dtm_putCommand_put[40:34] != 7'd61 &&
	     dtm_putCommand_put[40:34] != 7'd62 &&
	     dtm_putCommand_put[40:34] != 7'd63 &&
	     dtm_putCommand_put[40:34] != 7'd64 &&
	     !dtm_putCommand_put_BITS_40_TO_34_73_ULT_4___d311 &&
	     dtm_putCommand_put_BITS_40_TO_34_73_ULE_15___d313 &&
	     abst_busy ;
  assign dtm_putCommand_put_BITS_1_TO_0_71_EQ_0b1_72_AN_ETC___d348 =
	     dtm_putCommand_put[1:0] == 2'b01 &&
	     dtm_putCommand_put[40:34] != 7'd16 &&
	     dtm_putCommand_put[40:34] != 7'd17 &&
	     dtm_putCommand_put[40:34] != 7'd18 &&
	     dtm_putCommand_put[40:34] != 7'd19 &&
	     dtm_putCommand_put[40:34] != 7'd20 &&
	     dtm_putCommand_put[40:34] != 7'd21 &&
	     dtm_putCommand_put[40:34] != 7'd22 &&
	     dtm_putCommand_put[40:34] != 7'd23 &&
	     dtm_putCommand_put[40:34] != 7'd24 &&
	     dtm_putCommand_put[40:34] != 7'd25 &&
	     dtm_putCommand_put[40:34] != 7'd26 &&
	     dtm_putCommand_put[40:34] != 7'd27 &&
	     dtm_putCommand_put[40:34] != 7'd28 &&
	     dtm_putCommand_put[40:34] != 7'd29 &&
	     dtm_putCommand_put[40:34] != 7'd48 &&
	     dtm_putCommand_put[40:34] != 7'd52 &&
	     dtm_putCommand_put[40:34] != 7'd53 &&
	     dtm_putCommand_put[40:34] != 7'd54 &&
	     dtm_putCommand_put[40:34] != 7'd56 &&
	     dtm_putCommand_put[40:34] != 7'd57 &&
	     dtm_putCommand_put[40:34] != 7'd58 &&
	     dtm_putCommand_put[40:34] != 7'd60 &&
	     dtm_putCommand_put[40:34] != 7'd61 &&
	     dtm_putCommand_put[40:34] != 7'd62 &&
	     dtm_putCommand_put[40:34] != 7'd63 &&
	     dtm_putCommand_put[40:34] != 7'd64 &&
	     NOT_dtm_putCommand_put_BITS_40_TO_34_73_ULT_4__ETC___d343 ;
  assign dtm_putCommand_put_BITS_40_TO_34_73_EQ_16_74_O_ETC___d668 =
	     dtm_putCommand_put[40:34] == 7'd16 ||
	     dtm_putCommand_put[40:34] == 7'd17 ||
	     dtm_putCommand_put[40:34] == 7'd18 ||
	     dtm_putCommand_put[40:34] == 7'd19 ||
	     dtm_putCommand_put[40:34] == 7'd20 ||
	     dtm_putCommand_put[40:34] == 7'd21 ||
	     dtm_putCommand_put[40:34] == 7'd22 ||
	     dtm_putCommand_put[40:34] == 7'd23 ||
	     dtm_putCommand_put[40:34] == 7'd24 ||
	     dtm_putCommand_put[40:34] == 7'd25 ||
	     dtm_putCommand_put[40:34] == 7'd26 ||
	     dtm_putCommand_put[40:34] == 7'd27 ||
	     dtm_putCommand_put[40:34] == 7'd28 ||
	     dtm_putCommand_put[40:34] == 7'd29 ||
	     dtm_putCommand_put[40:34] == 7'd48 ||
	     dtm_putCommand_put[40:34] == 7'd52 ||
	     dtm_putCommand_put[40:34] == 7'd53 ||
	     dtm_putCommand_put[40:34] == 7'd54 ||
	     dtm_putCommand_put[40:34] == 7'd56 ||
	     dtm_putCommand_put[40:34] == 7'd57 ||
	     dtm_putCommand_put[40:34] == 7'd58 ||
	     dtm_putCommand_put[40:34] == 7'd60 ||
	     dtm_putCommand_put[40:34] == 7'd61 ||
	     dtm_putCommand_put[40:34] == 7'd62 ||
	     dtm_putCommand_put[40:34] == 7'd63 ||
	     dtm_putCommand_put[40:34] == 7'd64 ||
	     !dtm_putCommand_put_BITS_40_TO_34_73_ULT_4___d311 &&
	     dtm_putCommand_put_BITS_40_TO_34_73_ULE_15___d313 ||
	     dtm_putCommand_put[40:34] >= 7'd32 &&
	     dtm_putCommand_put[40:34] <= 7'd47 ;
  assign dtm_putCommand_put_BITS_40_TO_34_73_EQ_57_12_A_ETC___d292 =
	     dtm_putCommand_put[40:34] == 7'd57 && !sbBusy && !sbBusyError &&
	     sbReadOnAddr ||
	     dtm_putCommand_put[40:34] == 7'd60 && !sbBusy && !sbBusyError ;
  assign dtm_putCommand_put_BITS_40_TO_34_73_ULE_15___d313 =
	     dtm_putCommand_put[40:34] <= 7'd15 ;
  assign dtm_putCommand_put_BITS_40_TO_34_73_ULT_4___d311 =
	     dtm_putCommand_put[40:34] < 7'd4 ;
  assign i__h11619 = dtm_putCommand_put[40:34] - 7'd4 ;
  assign lv_abst_cmderr__h10337 = (abst_ar_aarSize == 3'd2) ? 3'd0 : 3'd5 ;
  assign lv_shift__h9990 = { rg_lower_addr_bits, 3'd0 } ;
  assign offset__h9677 = 4'd1 << size__h7155 ;
  assign r1__read__h12599 = { r1__read__h12611, nDMReset } ;
  assign r1__read__h12611 = { r1__read__h12623, clrResetHaltReq } ;
  assign r1__read__h12623 = { r1__read__h12635, setResetHaltRequest } ;
  assign r1__read__h12635 = { r1__read__h12647, 2'd0 } ;
  assign r1__read__h12647 = { r1__read__h12659, 10'd0 } ;
  assign r1__read__h12659 = { r1__read__h12671, 10'd0 } ;
  assign r1__read__h12671 = { r1__read__h12683, 1'd0 } ;
  assign r1__read__h12683 = { r1__read__h12695, 1'd0 } ;
  assign r1__read__h12695 = { r1__read__h12707, ackHaveReset } ;
  assign r1__read__h12707 = { r1__read__h12719, hartReset } ;
  assign r1__read__h12719 = { haltReq, resumeReq } ;
  assign r1__read__h13229 = { r1__read__h13241, 1'd1 } ;
  assign r1__read__h13241 = { r1__read__h13253, 1'd1 } ;
  assign r1__read__h13253 = { r1__read__h13265, authbusy } ;
  assign r1__read__h13265 = { r1__read__h13277, authenticated } ;
  assign r1__read__h13277 = { r1__read__h13289, anyHalted } ;
  assign r1__read__h13289 = { r1__read__h13301, allHalted } ;
  assign r1__read__h13301 = { r1__read__h13313, anyRunning } ;
  assign r1__read__h13313 = { r1__read__h13325, allRunning } ;
  assign r1__read__h13325 = { r1__read__h13337, anyUnAvail } ;
  assign r1__read__h13337 = { r1__read__h13349, allUnAvail } ;
  assign r1__read__h13349 = { r1__read__h13361, anyNonExistent } ;
  assign r1__read__h13361 = { r1__read__h13373, allNonExistent } ;
  assign r1__read__h13373 = { r1__read__h13385, anyResumeAck } ;
  assign r1__read__h13385 = { r1__read__h13397, allResumeAck } ;
  assign r1__read__h13397 = { r1__read__h13409, anyHaveReset } ;
  assign r1__read__h13409 = { 12'd0, allHaveReset } ;
  assign r1__read__h14278 = { r1__read__h14290, 4'd0 } ;
  assign r1__read__h14290 = { r1__read__h14302, abst_cmderr } ;
  assign r1__read__h14302 = { r1__read__h14314, 1'd0 } ;
  assign r1__read__h14314 = { 19'd0, abst_busy } ;
  assign r1__read__h14577 = { r1__read__h14589, abst_ar_write } ;
  assign r1__read__h14589 = { r1__read__h14601, abst_ar_transfer } ;
  assign r1__read__h14601 = { r1__read__h14613, 1'd0 } ;
  assign r1__read__h14613 = { r1__read__h14625, abst_ar_aarPostIncrement } ;
  assign r1__read__h14625 = { r1__read__h14637, abst_ar_aarSize } ;
  assign r1__read__h14637 = { abst_ar_cmdType, 1'd0 } ;
  assign r1__read__h15183 = { r1__read__h15195, 1'd1 } ;
  assign r1__read__h15195 = { r1__read__h15207, 1'd1 } ;
  assign r1__read__h15207 = { r1__read__h15219, 1'd0 } ;
  assign r1__read__h15219 = { r1__read__h15231, 1'd0 } ;
  assign r1__read__h15231 = { r1__read__h15243, 7'd32 } ;
  assign r1__read__h15243 = { r1__read__h15255, sbError } ;
  assign r1__read__h15255 = { r1__read__h15267, sbReadOnData } ;
  assign r1__read__h15267 = { r1__read__h15279, sbAutoIncrement } ;
  assign r1__read__h15279 = { r1__read__h15291, sbAccess } ;
  assign r1__read__h15291 = { r1__read__h15303, sbReadOnAddr } ;
  assign r1__read__h15303 = { r1__read__h15315, sbBusy } ;
  assign r1__read__h15315 = { 9'd64, sbBusyError } ;
  assign sbAddress1_read__16_CONCAT_sbAddress0_read__4__ETC___d120 =
	     { sbAddress1, sbAddress0 } + { 60'd0, offset__h9677 } ;
  assign sb_read_write_2_OR_IF_sbAccess_3_EQ_0_4_OR_sbA_ETC___d104 =
	     sb_read_write ||
	     size__h7155 == 3'd3 && sbAddress0[1:0] != 2'd0 ||
	     size__h7155 == 3'd2 && sbAddress0[1:0] != 2'd0 ||
	     size__h7155 == 3'd1 && sbAddress0[0] ;
  assign v__h11554 = abst_busy ? 32'd0 : v__h11602 ;
  assign v__h12335 = (dtm_putCommand_put[1:0] == 2'b10) ? v__h12347 : 2'd0 ;
  assign v__h12347 =
	     (dtm_putCommand_put[40:34] == 7'd16 ||
	      dtm_putCommand_put[40:34] == 7'd17 ||
	      dtm_putCommand_put[40:34] == 7'd18 ||
	      dtm_putCommand_put[40:34] == 7'd20 ||
	      dtm_putCommand_put[40:34] == 7'd21 ||
	      dtm_putCommand_put[40:34] == 7'd22 ||
	      dtm_putCommand_put[40:34] == 7'd23 ||
	      dtm_putCommand_put[40:34] == 7'd24 ||
	      dtm_putCommand_put[40:34] == 7'd48 ||
	      dtm_putCommand_put[40:34] == 7'd54 ||
	      dtm_putCommand_put[40:34] == 7'd56 ||
	      dtm_putCommand_put[40:34] == 7'd57 ||
	      dtm_putCommand_put[40:34] == 7'd58 ||
	      dtm_putCommand_put[40:34] == 7'd60 ||
	      dtm_putCommand_put[40:34] == 7'd61 ||
	      dtm_putCommand_put[40:34] == 7'd62 ||
	      dtm_putCommand_put[40:34] == 7'd63 ||
	      !dtm_putCommand_put_BITS_40_TO_34_73_ULT_4___d311 &&
	      dtm_putCommand_put_BITS_40_TO_34_73_ULE_15___d313 ||
	      dtm_putCommand_put[40:34] >= 7'd32 &&
	      dtm_putCommand_put[40:34] <= 7'd47) ?
	       2'd0 :
	       2'd2 ;
  assign write_data__h7240 = {8{sbData0[7:0]}} ;
  assign write_data__h7243 = {4{sbData0[15:0]}} ;
  assign write_data__h7246 = {2{sbData0}} ;
  assign write_data__h7249 = { sbData1, sbData0 } ;
  assign write_strobe__h7508 =
	     write_strobe__h7157 << _theResult_____2__h7382 ;
  assign x__h17163 = dtm_putCommand_put[40:34] - 7'd32 ;
  assign x__h9605 =
	     sb_read_write_2_OR_IF_sbAccess_3_EQ_0_4_OR_sbA_ETC___d104 ?
	       write_strobe__h7157 :
	       write_strobe__h7508 ;
  assign y_avValue_fst__h12242 =
	     (!dtm_putCommand_put_BITS_40_TO_34_73_ULT_4___d311 &&
	      dtm_putCommand_put_BITS_40_TO_34_73_ULE_15___d313) ?
	       v__h11554 :
	       _theResult_____1_fst__h18222 ;
  assign y_avValue_snd__h18111 =
	     dtm_putCommand_put_BITS_40_TO_34_73_EQ_16_74_O_ETC___d668 ?
	       2'd0 :
	       2'd2 ;
  always@(sbAccess)
  begin
    case (sbAccess)
      3'd0, 3'd1, 3'd2, 3'd3: size__h7155 = sbAccess;
      default: size__h7155 = 3'd0;
    endcase
  end
  always@(sbAccess)
  begin
    case (sbAccess)
      3'd0: write_strobe__h7157 = 8'b00000001;
      3'd1: write_strobe__h7157 = 8'b00000011;
      3'd2: write_strobe__h7157 = 8'b00001111;
      3'd3: write_strobe__h7157 = 8'b11111111;
      default: write_strobe__h7157 = 8'd0;
    endcase
  end
  always@(sbAccess)
  begin
    case (sbAccess)
      3'd0, 3'd1, 3'd2: detect_error__h7159 = 3'd0;
      3'd3: detect_error__h7159 = 3'd4;
      default: detect_error__h7159 = 3'd0;
    endcase
  end
  always@(i__h11619 or
	  abst_data_0 or
	  abst_data_1 or
	  abst_data_2 or
	  abst_data_3 or
	  abst_data_4 or
	  abst_data_5 or
	  abst_data_6 or
	  abst_data_7 or
	  abst_data_8 or abst_data_9 or abst_data_10 or abst_data_11)
  begin
    case (i__h11619)
      7'd0: v__h11602 = abst_data_0;
      7'd1: v__h11602 = abst_data_1;
      7'd2: v__h11602 = abst_data_2;
      7'd3: v__h11602 = abst_data_3;
      7'd4: v__h11602 = abst_data_4;
      7'd5: v__h11602 = abst_data_5;
      7'd6: v__h11602 = abst_data_6;
      7'd7: v__h11602 = abst_data_7;
      7'd8: v__h11602 = abst_data_8;
      7'd9: v__h11602 = abst_data_9;
      7'd10: v__h11602 = abst_data_10;
      7'd11: v__h11602 = abst_data_11;
      default: v__h11602 =
		   32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h17163 or
	  progbuf_0 or
	  progbuf_1 or
	  progbuf_2 or
	  progbuf_3 or
	  progbuf_4 or
	  progbuf_5 or
	  progbuf_6 or
	  progbuf_7 or
	  progbuf_8 or
	  progbuf_9 or
	  progbuf_10 or
	  progbuf_11 or progbuf_12 or progbuf_13 or progbuf_14 or progbuf_15)
  begin
    case (x__h17163)
      7'd0: dmi_response_data___1__h18224 = progbuf_0;
      7'd1: dmi_response_data___1__h18224 = progbuf_1;
      7'd2: dmi_response_data___1__h18224 = progbuf_2;
      7'd3: dmi_response_data___1__h18224 = progbuf_3;
      7'd4: dmi_response_data___1__h18224 = progbuf_4;
      7'd5: dmi_response_data___1__h18224 = progbuf_5;
      7'd6: dmi_response_data___1__h18224 = progbuf_6;
      7'd7: dmi_response_data___1__h18224 = progbuf_7;
      7'd8: dmi_response_data___1__h18224 = progbuf_8;
      7'd9: dmi_response_data___1__h18224 = progbuf_9;
      7'd10: dmi_response_data___1__h18224 = progbuf_10;
      7'd11: dmi_response_data___1__h18224 = progbuf_11;
      7'd12: dmi_response_data___1__h18224 = progbuf_12;
      7'd13: dmi_response_data___1__h18224 = progbuf_13;
      7'd14: dmi_response_data___1__h18224 = progbuf_14;
      7'd15: dmi_response_data___1__h18224 = progbuf_15;
      default: dmi_response_data___1__h18224 =
		   32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(sbAccess or
	  write_data__h7240 or
	  write_data__h7243 or write_data__h7246 or write_data__h7249)
  begin
    case (sbAccess)
      3'd0:
	  IF_sbAccess_3_EQ_0_4_THEN_sbData0_1_BITS_7_TO__ETC___d96 =
	      write_data__h7240;
      3'd1:
	  IF_sbAccess_3_EQ_0_4_THEN_sbData0_1_BITS_7_TO__ETC___d96 =
	      write_data__h7243;
      3'd2:
	  IF_sbAccess_3_EQ_0_4_THEN_sbData0_1_BITS_7_TO__ETC___d96 =
	      write_data__h7246;
      3'd3:
	  IF_sbAccess_3_EQ_0_4_THEN_sbData0_1_BITS_7_TO__ETC___d96 =
	      write_data__h7249;
      default: IF_sbAccess_3_EQ_0_4_THEN_sbData0_1_BITS_7_TO__ETC___d96 =
		   64'd0;
    endcase
  end
  always@(dtm_putCommand_put or
	  y_avValue_fst__h12242 or
	  dmi_response_data___2__h10904 or
	  dmi_response_data___2__h10911 or
	  dmi_response_data___2__h10939 or
	  dmi_response_data___2__h10946 or
	  dmi_response_data___2__h10953 or
	  dmi_response_data___2__h10960 or
	  auth_data or
	  dmi_response_data___2__h11030 or
	  sbAddress0 or
	  sbAddress1 or sbData0 or sbData1 or dmi_response_data___2__h11082)
  begin
    case (dtm_putCommand_put[40:34])
      7'd16: y_avValue_fst__h18110 = dmi_response_data___2__h10904;
      7'd17: y_avValue_fst__h18110 = dmi_response_data___2__h10911;
      7'd18: y_avValue_fst__h18110 = 32'd51136;
      7'd19,
      7'd20,
      7'd25,
      7'd26,
      7'd27,
      7'd28,
      7'd29,
      7'd52,
      7'd53,
      7'd54,
      7'd62,
      7'd63:
	  y_avValue_fst__h18110 = 32'd0;
      7'd21: y_avValue_fst__h18110 = dmi_response_data___2__h10939;
      7'd22: y_avValue_fst__h18110 = dmi_response_data___2__h10946;
      7'd23: y_avValue_fst__h18110 = dmi_response_data___2__h10953;
      7'd24: y_avValue_fst__h18110 = dmi_response_data___2__h10960;
      7'd48: y_avValue_fst__h18110 = auth_data;
      7'd56: y_avValue_fst__h18110 = dmi_response_data___2__h11030;
      7'd57: y_avValue_fst__h18110 = sbAddress0;
      7'd58: y_avValue_fst__h18110 = sbAddress1;
      7'd60: y_avValue_fst__h18110 = sbData0;
      7'd61: y_avValue_fst__h18110 = sbData1;
      7'd64: y_avValue_fst__h18110 = dmi_response_data___2__h11082;
      default: y_avValue_fst__h18110 = y_avValue_fst__h12242;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        allHalted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	allHaveReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
	allNonExistent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	allResumeAck <= `BSV_ASSIGNMENT_DELAY 1'd0;
	allRunning <= `BSV_ASSIGNMENT_DELAY 1'd1;
	allUnAvail <= `BSV_ASSIGNMENT_DELAY 1'd0;
	anyHalted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	anyHaveReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
	anyNonExistent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	anyResumeAck <= `BSV_ASSIGNMENT_DELAY 1'd0;
	anyRunning <= `BSV_ASSIGNMENT_DELAY 1'd1;
	anyUnAvail <= `BSV_ASSIGNMENT_DELAY 1'd0;
	authenticated <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dmActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dmi_response <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      34'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	progbuf_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	progbuf_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	progbuf_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	progbuf_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	progbuf_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	progbuf_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	progbuf_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	progbuf_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	progbuf_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	progbuf_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	progbuf_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	progbuf_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	progbuf_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	progbuf_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	progbuf_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	progbuf_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_clear_resume_ack <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_lower_addr_bits <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (allHalted_EN) allHalted <= `BSV_ASSIGNMENT_DELAY allHalted_D_IN;
	if (allHaveReset_EN)
	  allHaveReset <= `BSV_ASSIGNMENT_DELAY allHaveReset_D_IN;
	if (allNonExistent_EN)
	  allNonExistent <= `BSV_ASSIGNMENT_DELAY allNonExistent_D_IN;
	if (allResumeAck_EN)
	  allResumeAck <= `BSV_ASSIGNMENT_DELAY allResumeAck_D_IN;
	if (allRunning_EN)
	  allRunning <= `BSV_ASSIGNMENT_DELAY allRunning_D_IN;
	if (allUnAvail_EN)
	  allUnAvail <= `BSV_ASSIGNMENT_DELAY allUnAvail_D_IN;
	if (anyHalted_EN) anyHalted <= `BSV_ASSIGNMENT_DELAY anyHalted_D_IN;
	if (anyHaveReset_EN)
	  anyHaveReset <= `BSV_ASSIGNMENT_DELAY anyHaveReset_D_IN;
	if (anyNonExistent_EN)
	  anyNonExistent <= `BSV_ASSIGNMENT_DELAY anyNonExistent_D_IN;
	if (anyResumeAck_EN)
	  anyResumeAck <= `BSV_ASSIGNMENT_DELAY anyResumeAck_D_IN;
	if (anyRunning_EN)
	  anyRunning <= `BSV_ASSIGNMENT_DELAY anyRunning_D_IN;
	if (anyUnAvail_EN)
	  anyUnAvail <= `BSV_ASSIGNMENT_DELAY anyUnAvail_D_IN;
	if (authenticated_EN)
	  authenticated <= `BSV_ASSIGNMENT_DELAY authenticated_D_IN;
	if (dmActive_EN) dmActive <= `BSV_ASSIGNMENT_DELAY dmActive_D_IN;
	if (dmi_response_EN)
	  dmi_response <= `BSV_ASSIGNMENT_DELAY dmi_response_D_IN;
	if (progbuf_0_EN) progbuf_0 <= `BSV_ASSIGNMENT_DELAY progbuf_0_D_IN;
	if (progbuf_1_EN) progbuf_1 <= `BSV_ASSIGNMENT_DELAY progbuf_1_D_IN;
	if (progbuf_10_EN)
	  progbuf_10 <= `BSV_ASSIGNMENT_DELAY progbuf_10_D_IN;
	if (progbuf_11_EN)
	  progbuf_11 <= `BSV_ASSIGNMENT_DELAY progbuf_11_D_IN;
	if (progbuf_12_EN)
	  progbuf_12 <= `BSV_ASSIGNMENT_DELAY progbuf_12_D_IN;
	if (progbuf_13_EN)
	  progbuf_13 <= `BSV_ASSIGNMENT_DELAY progbuf_13_D_IN;
	if (progbuf_14_EN)
	  progbuf_14 <= `BSV_ASSIGNMENT_DELAY progbuf_14_D_IN;
	if (progbuf_15_EN)
	  progbuf_15 <= `BSV_ASSIGNMENT_DELAY progbuf_15_D_IN;
	if (progbuf_2_EN) progbuf_2 <= `BSV_ASSIGNMENT_DELAY progbuf_2_D_IN;
	if (progbuf_3_EN) progbuf_3 <= `BSV_ASSIGNMENT_DELAY progbuf_3_D_IN;
	if (progbuf_4_EN) progbuf_4 <= `BSV_ASSIGNMENT_DELAY progbuf_4_D_IN;
	if (progbuf_5_EN) progbuf_5 <= `BSV_ASSIGNMENT_DELAY progbuf_5_D_IN;
	if (progbuf_6_EN) progbuf_6 <= `BSV_ASSIGNMENT_DELAY progbuf_6_D_IN;
	if (progbuf_7_EN) progbuf_7 <= `BSV_ASSIGNMENT_DELAY progbuf_7_D_IN;
	if (progbuf_8_EN) progbuf_8 <= `BSV_ASSIGNMENT_DELAY progbuf_8_D_IN;
	if (progbuf_9_EN) progbuf_9 <= `BSV_ASSIGNMENT_DELAY progbuf_9_D_IN;
	if (rg_clear_resume_ack_EN)
	  rg_clear_resume_ack <= `BSV_ASSIGNMENT_DELAY
	      rg_clear_resume_ack_D_IN;
	if (rg_lower_addr_bits_EN)
	  rg_lower_addr_bits <= `BSV_ASSIGNMENT_DELAY rg_lower_addr_bits_D_IN;
      end
    if (derived_reset_RST_OUT == `BSV_RESET_VALUE)
      begin
        abst_ar_aarPostIncrement <= `BSV_ASSIGNMENT_DELAY 1'd0;
	abst_ar_aarSize <= `BSV_ASSIGNMENT_DELAY 3'd0;
	abst_ar_cmdType <= `BSV_ASSIGNMENT_DELAY 8'd0;
	abst_ar_regno <= `BSV_ASSIGNMENT_DELAY 16'd0;
	abst_ar_transfer <= `BSV_ASSIGNMENT_DELAY 1'd0;
	abst_ar_write <= `BSV_ASSIGNMENT_DELAY 1'd0;
	abst_busy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	abst_cmderr <= `BSV_ASSIGNMENT_DELAY 3'd0;
	abst_command_good <= `BSV_ASSIGNMENT_DELAY 2'd0;
	abst_data_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	abst_data_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	abst_data_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	abst_data_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	abst_data_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	abst_data_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	abst_data_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	abst_data_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	abst_data_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	abst_data_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	abst_data_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	abst_data_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ackHaveReset <= `BSV_ASSIGNMENT_DELAY 1'd0;
	auth_data <= `BSV_ASSIGNMENT_DELAY 32'd0;
	authbusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	autoExecData <= `BSV_ASSIGNMENT_DELAY 12'd0;
	clrResetHaltReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	haltReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hartReset <= `BSV_ASSIGNMENT_DELAY 1'd0;
	maskData <= `BSV_ASSIGNMENT_DELAY 1'd0;
	nDMReset <= `BSV_ASSIGNMENT_DELAY 1'd0;
	resumeReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sbAccess <= `BSV_ASSIGNMENT_DELAY 3'd2;
	sbAddress0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sbAddress1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sbAutoIncrement <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sbBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sbBusyError <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sbData0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sbData1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sbError <= `BSV_ASSIGNMENT_DELAY 3'd0;
	sbReadOnAddr <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sbReadOnData <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sb_read_write <= `BSV_ASSIGNMENT_DELAY 1'd0;
	setResetHaltRequest <= `BSV_ASSIGNMENT_DELAY 1'd0;
	startSBAccess <= `BSV_ASSIGNMENT_DELAY 1'd0;
	vrg_halted_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	vrg_halted_sdw_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	vrg_have_reset_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	vrg_have_reset_sdw_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	vrg_hawsel_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	vrg_resume_ack_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	vrg_unavailable_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (abst_ar_aarPostIncrement_EN)
	  abst_ar_aarPostIncrement <= `BSV_ASSIGNMENT_DELAY
	      abst_ar_aarPostIncrement_D_IN;
	if (abst_ar_aarSize_EN)
	  abst_ar_aarSize <= `BSV_ASSIGNMENT_DELAY abst_ar_aarSize_D_IN;
	if (abst_ar_cmdType_EN)
	  abst_ar_cmdType <= `BSV_ASSIGNMENT_DELAY abst_ar_cmdType_D_IN;
	if (abst_ar_regno_EN)
	  abst_ar_regno <= `BSV_ASSIGNMENT_DELAY abst_ar_regno_D_IN;
	if (abst_ar_transfer_EN)
	  abst_ar_transfer <= `BSV_ASSIGNMENT_DELAY abst_ar_transfer_D_IN;
	if (abst_ar_write_EN)
	  abst_ar_write <= `BSV_ASSIGNMENT_DELAY abst_ar_write_D_IN;
	if (abst_busy_EN) abst_busy <= `BSV_ASSIGNMENT_DELAY abst_busy_D_IN;
	if (abst_cmderr_EN)
	  abst_cmderr <= `BSV_ASSIGNMENT_DELAY abst_cmderr_D_IN;
	if (abst_command_good_EN)
	  abst_command_good <= `BSV_ASSIGNMENT_DELAY abst_command_good_D_IN;
	if (abst_data_0_EN)
	  abst_data_0 <= `BSV_ASSIGNMENT_DELAY abst_data_0_D_IN;
	if (abst_data_1_EN)
	  abst_data_1 <= `BSV_ASSIGNMENT_DELAY abst_data_1_D_IN;
	if (abst_data_10_EN)
	  abst_data_10 <= `BSV_ASSIGNMENT_DELAY abst_data_10_D_IN;
	if (abst_data_11_EN)
	  abst_data_11 <= `BSV_ASSIGNMENT_DELAY abst_data_11_D_IN;
	if (abst_data_2_EN)
	  abst_data_2 <= `BSV_ASSIGNMENT_DELAY abst_data_2_D_IN;
	if (abst_data_3_EN)
	  abst_data_3 <= `BSV_ASSIGNMENT_DELAY abst_data_3_D_IN;
	if (abst_data_4_EN)
	  abst_data_4 <= `BSV_ASSIGNMENT_DELAY abst_data_4_D_IN;
	if (abst_data_5_EN)
	  abst_data_5 <= `BSV_ASSIGNMENT_DELAY abst_data_5_D_IN;
	if (abst_data_6_EN)
	  abst_data_6 <= `BSV_ASSIGNMENT_DELAY abst_data_6_D_IN;
	if (abst_data_7_EN)
	  abst_data_7 <= `BSV_ASSIGNMENT_DELAY abst_data_7_D_IN;
	if (abst_data_8_EN)
	  abst_data_8 <= `BSV_ASSIGNMENT_DELAY abst_data_8_D_IN;
	if (abst_data_9_EN)
	  abst_data_9 <= `BSV_ASSIGNMENT_DELAY abst_data_9_D_IN;
	if (ackHaveReset_EN)
	  ackHaveReset <= `BSV_ASSIGNMENT_DELAY ackHaveReset_D_IN;
	if (auth_data_EN) auth_data <= `BSV_ASSIGNMENT_DELAY auth_data_D_IN;
	if (authbusy_EN) authbusy <= `BSV_ASSIGNMENT_DELAY authbusy_D_IN;
	if (autoExecData_EN)
	  autoExecData <= `BSV_ASSIGNMENT_DELAY autoExecData_D_IN;
	if (clrResetHaltReq_EN)
	  clrResetHaltReq <= `BSV_ASSIGNMENT_DELAY clrResetHaltReq_D_IN;
	if (haltReq_EN) haltReq <= `BSV_ASSIGNMENT_DELAY haltReq_D_IN;
	if (hartReset_EN) hartReset <= `BSV_ASSIGNMENT_DELAY hartReset_D_IN;
	if (maskData_EN) maskData <= `BSV_ASSIGNMENT_DELAY maskData_D_IN;
	if (nDMReset_EN) nDMReset <= `BSV_ASSIGNMENT_DELAY nDMReset_D_IN;
	if (resumeReq_EN) resumeReq <= `BSV_ASSIGNMENT_DELAY resumeReq_D_IN;
	if (sbAccess_EN) sbAccess <= `BSV_ASSIGNMENT_DELAY sbAccess_D_IN;
	if (sbAddress0_EN)
	  sbAddress0 <= `BSV_ASSIGNMENT_DELAY sbAddress0_D_IN;
	if (sbAddress1_EN)
	  sbAddress1 <= `BSV_ASSIGNMENT_DELAY sbAddress1_D_IN;
	if (sbAutoIncrement_EN)
	  sbAutoIncrement <= `BSV_ASSIGNMENT_DELAY sbAutoIncrement_D_IN;
	if (sbBusy_EN) sbBusy <= `BSV_ASSIGNMENT_DELAY sbBusy_D_IN;
	if (sbBusyError_EN)
	  sbBusyError <= `BSV_ASSIGNMENT_DELAY sbBusyError_D_IN;
	if (sbData0_EN) sbData0 <= `BSV_ASSIGNMENT_DELAY sbData0_D_IN;
	if (sbData1_EN) sbData1 <= `BSV_ASSIGNMENT_DELAY sbData1_D_IN;
	if (sbError_EN) sbError <= `BSV_ASSIGNMENT_DELAY sbError_D_IN;
	if (sbReadOnAddr_EN)
	  sbReadOnAddr <= `BSV_ASSIGNMENT_DELAY sbReadOnAddr_D_IN;
	if (sbReadOnData_EN)
	  sbReadOnData <= `BSV_ASSIGNMENT_DELAY sbReadOnData_D_IN;
	if (sb_read_write_EN)
	  sb_read_write <= `BSV_ASSIGNMENT_DELAY sb_read_write_D_IN;
	if (setResetHaltRequest_EN)
	  setResetHaltRequest <= `BSV_ASSIGNMENT_DELAY
	      setResetHaltRequest_D_IN;
	if (startSBAccess_EN)
	  startSBAccess <= `BSV_ASSIGNMENT_DELAY startSBAccess_D_IN;
	if (vrg_halted_0_EN)
	  vrg_halted_0 <= `BSV_ASSIGNMENT_DELAY vrg_halted_0_D_IN;
	if (vrg_halted_sdw_0_EN)
	  vrg_halted_sdw_0 <= `BSV_ASSIGNMENT_DELAY vrg_halted_sdw_0_D_IN;
	if (vrg_have_reset_0_EN)
	  vrg_have_reset_0 <= `BSV_ASSIGNMENT_DELAY vrg_have_reset_0_D_IN;
	if (vrg_have_reset_sdw_0_EN)
	  vrg_have_reset_sdw_0 <= `BSV_ASSIGNMENT_DELAY
	      vrg_have_reset_sdw_0_D_IN;
	if (vrg_hawsel_0_EN)
	  vrg_hawsel_0 <= `BSV_ASSIGNMENT_DELAY vrg_hawsel_0_D_IN;
	if (vrg_resume_ack_0_EN)
	  vrg_resume_ack_0 <= `BSV_ASSIGNMENT_DELAY vrg_resume_ack_0_D_IN;
	if (vrg_unavailable_0_EN)
	  vrg_unavailable_0 <= `BSV_ASSIGNMENT_DELAY vrg_unavailable_0_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    abst_ar_aarPostIncrement = 1'h0;
    abst_ar_aarSize = 3'h2;
    abst_ar_cmdType = 8'hAA;
    abst_ar_regno = 16'hAAAA;
    abst_ar_transfer = 1'h0;
    abst_ar_write = 1'h0;
    abst_busy = 1'h0;
    abst_cmderr = 3'h2;
    abst_command_good = 2'h2;
    abst_data_0 = 32'hAAAAAAAA;
    abst_data_1 = 32'hAAAAAAAA;
    abst_data_10 = 32'hAAAAAAAA;
    abst_data_11 = 32'hAAAAAAAA;
    abst_data_2 = 32'hAAAAAAAA;
    abst_data_3 = 32'hAAAAAAAA;
    abst_data_4 = 32'hAAAAAAAA;
    abst_data_5 = 32'hAAAAAAAA;
    abst_data_6 = 32'hAAAAAAAA;
    abst_data_7 = 32'hAAAAAAAA;
    abst_data_8 = 32'hAAAAAAAA;
    abst_data_9 = 32'hAAAAAAAA;
    ackHaveReset = 1'h0;
    allHalted = 1'h0;
    allHaveReset = 1'h0;
    allNonExistent = 1'h0;
    allResumeAck = 1'h0;
    allRunning = 1'h0;
    allUnAvail = 1'h0;
    anyHalted = 1'h0;
    anyHaveReset = 1'h0;
    anyNonExistent = 1'h0;
    anyResumeAck = 1'h0;
    anyRunning = 1'h0;
    anyUnAvail = 1'h0;
    auth_data = 32'hAAAAAAAA;
    authbusy = 1'h0;
    authenticated = 1'h0;
    autoExecData = 12'hAAA;
    clrResetHaltReq = 1'h0;
    dmActive = 1'h0;
    dmi_response = 35'h2AAAAAAAA;
    haltReq = 1'h0;
    hartReset = 1'h0;
    maskData = 1'h0;
    nDMReset = 1'h0;
    progbuf_0 = 32'hAAAAAAAA;
    progbuf_1 = 32'hAAAAAAAA;
    progbuf_10 = 32'hAAAAAAAA;
    progbuf_11 = 32'hAAAAAAAA;
    progbuf_12 = 32'hAAAAAAAA;
    progbuf_13 = 32'hAAAAAAAA;
    progbuf_14 = 32'hAAAAAAAA;
    progbuf_15 = 32'hAAAAAAAA;
    progbuf_2 = 32'hAAAAAAAA;
    progbuf_3 = 32'hAAAAAAAA;
    progbuf_4 = 32'hAAAAAAAA;
    progbuf_5 = 32'hAAAAAAAA;
    progbuf_6 = 32'hAAAAAAAA;
    progbuf_7 = 32'hAAAAAAAA;
    progbuf_8 = 32'hAAAAAAAA;
    progbuf_9 = 32'hAAAAAAAA;
    resumeReq = 1'h0;
    rg_clear_resume_ack = 1'h0;
    rg_lower_addr_bits = 2'h2;
    sbAccess = 3'h2;
    sbAddress0 = 32'hAAAAAAAA;
    sbAddress1 = 32'hAAAAAAAA;
    sbAutoIncrement = 1'h0;
    sbBusy = 1'h0;
    sbBusyError = 1'h0;
    sbData0 = 32'hAAAAAAAA;
    sbData1 = 32'hAAAAAAAA;
    sbError = 3'h2;
    sbReadOnAddr = 1'h0;
    sbReadOnData = 1'h0;
    sb_read_write = 1'h0;
    setResetHaltRequest = 1'h0;
    startSBAccess = 1'h0;
    vrg_halted_0 = 1'h0;
    vrg_halted_sdw_0 = 1'h0;
    vrg_have_reset_0 = 1'h0;
    vrg_have_reset_sdw_0 = 1'h0;
    vrg_hawsel_0 = 1'h0;
    vrg_resume_ack_0 = 1'h0;
    vrg_unavailable_0 = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkriscvDebug013

