//
// Generated by Bluespec Compiler, version 2022.01-36-ga6304315 (build a6304315)
//
// On Tue Oct  4 10:37:13 CEST 2022
//
//
// Ports:
// Name                         I/O  size props
// inst_request_get               O    34
// RDY_inst_request_get           O     1
// RDY_inst_response_put          O     1 reg
// memory_request_get             O    70 reg
// RDY_memory_request_get         O     1 reg
// RDY_memory_response_put        O     1 const
// RDY_clint_msip                 O     1 const
// RDY_clint_mtip                 O     1 const
// RDY_clint_mtime                O     1 const
// RDY_ext_interrupt              O     1 const
// mav_debug_access_gprs          O    32
// RDY_mav_debug_access_gprs      O     1
// mav_debug_access_csrs          O    32
// RDY_mav_debug_access_csrs      O     1 const
// RDY_ma_debug_halt_request      O     1 const
// RDY_ma_debug_resume_request    O     1 const
// RDY_ma_debugger_available      O     1 const
// mv_core_is_halted              O     1 reg
// RDY_mv_core_is_halted          O     1 const
// mv_core_debugenable            O     1 reg
// RDY_mv_core_debugenable        O     1 const
// mv_curr_priv                   O     2 reg
// RDY_mv_curr_priv               O     1 const
// mv_trap                        O     1
// RDY_mv_trap                    O     1 const
// resetpc                        I    32
// CLK                            I     1 clock
// RST_N                          I     1 reset
// inst_response_put              I    35 reg
// memory_response_put            I    34
// clint_msip_intrpt              I     1 reg
// clint_mtip_intrpt              I     1 reg
// clint_mtime_c_mtime            I    64 reg
// ext_interrupt_intrpt           I     1 reg
// mav_debug_access_gprs_cmd      I    47
// mav_debug_access_csrs_cmd      I    47
// ma_debug_halt_request_ip       I     1 reg
// ma_debug_resume_request_ip     I     1 reg
// ma_debugger_available_avail    I     1
// EN_inst_response_put           I     1
// EN_memory_response_put         I     1
// EN_clint_msip                  I     1
// EN_clint_mtip                  I     1
// EN_clint_mtime                 I     1
// EN_ext_interrupt               I     1
// EN_ma_debug_halt_request       I     1
// EN_ma_debug_resume_request     I     1
// EN_ma_debugger_available       I     1 inhigh
// EN_inst_request_get            I     1
// EN_memory_request_get          I     1
// EN_mav_debug_access_gprs       I     1
// EN_mav_debug_access_csrs       I     1
//
// Combinational paths from inputs to outputs:
//   (mav_debug_access_gprs_cmd,
//    EN_mav_debug_access_gprs,
//    resetpc) -> mav_debug_access_gprs
//   (mav_debug_access_csrs_cmd, EN_mav_debug_access_csrs) -> mv_trap
//   (mav_debug_access_csrs_cmd,
//    EN_mav_debug_access_csrs) -> mav_debug_access_csrs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkriscv(resetpc,
	       CLK,
	       RST_N,

	       EN_inst_request_get,
	       inst_request_get,
	       RDY_inst_request_get,

	       inst_response_put,
	       EN_inst_response_put,
	       RDY_inst_response_put,

	       EN_memory_request_get,
	       memory_request_get,
	       RDY_memory_request_get,

	       memory_response_put,
	       EN_memory_response_put,
	       RDY_memory_response_put,

	       clint_msip_intrpt,
	       EN_clint_msip,
	       RDY_clint_msip,

	       clint_mtip_intrpt,
	       EN_clint_mtip,
	       RDY_clint_mtip,

	       clint_mtime_c_mtime,
	       EN_clint_mtime,
	       RDY_clint_mtime,

	       ext_interrupt_intrpt,
	       EN_ext_interrupt,
	       RDY_ext_interrupt,

	       mav_debug_access_gprs_cmd,
	       EN_mav_debug_access_gprs,
	       mav_debug_access_gprs,
	       RDY_mav_debug_access_gprs,

	       mav_debug_access_csrs_cmd,
	       EN_mav_debug_access_csrs,
	       mav_debug_access_csrs,
	       RDY_mav_debug_access_csrs,

	       ma_debug_halt_request_ip,
	       EN_ma_debug_halt_request,
	       RDY_ma_debug_halt_request,

	       ma_debug_resume_request_ip,
	       EN_ma_debug_resume_request,
	       RDY_ma_debug_resume_request,

	       ma_debugger_available_avail,
	       EN_ma_debugger_available,
	       RDY_ma_debugger_available,

	       mv_core_is_halted,
	       RDY_mv_core_is_halted,

	       mv_core_debugenable,
	       RDY_mv_core_debugenable,

	       mv_curr_priv,
	       RDY_mv_curr_priv,

	       mv_trap,
	       RDY_mv_trap);
  input  [31 : 0] resetpc;
  input  CLK;
  input  RST_N;

  // actionvalue method inst_request_get
  input  EN_inst_request_get;
  output [33 : 0] inst_request_get;
  output RDY_inst_request_get;

  // action method inst_response_put
  input  [34 : 0] inst_response_put;
  input  EN_inst_response_put;
  output RDY_inst_response_put;

  // actionvalue method memory_request_get
  input  EN_memory_request_get;
  output [69 : 0] memory_request_get;
  output RDY_memory_request_get;

  // action method memory_response_put
  input  [33 : 0] memory_response_put;
  input  EN_memory_response_put;
  output RDY_memory_response_put;

  // action method clint_msip
  input  clint_msip_intrpt;
  input  EN_clint_msip;
  output RDY_clint_msip;

  // action method clint_mtip
  input  clint_mtip_intrpt;
  input  EN_clint_mtip;
  output RDY_clint_mtip;

  // action method clint_mtime
  input  [63 : 0] clint_mtime_c_mtime;
  input  EN_clint_mtime;
  output RDY_clint_mtime;

  // action method ext_interrupt
  input  ext_interrupt_intrpt;
  input  EN_ext_interrupt;
  output RDY_ext_interrupt;

  // actionvalue method mav_debug_access_gprs
  input  [46 : 0] mav_debug_access_gprs_cmd;
  input  EN_mav_debug_access_gprs;
  output [31 : 0] mav_debug_access_gprs;
  output RDY_mav_debug_access_gprs;

  // actionvalue method mav_debug_access_csrs
  input  [46 : 0] mav_debug_access_csrs_cmd;
  input  EN_mav_debug_access_csrs;
  output [31 : 0] mav_debug_access_csrs;
  output RDY_mav_debug_access_csrs;

  // action method ma_debug_halt_request
  input  ma_debug_halt_request_ip;
  input  EN_ma_debug_halt_request;
  output RDY_ma_debug_halt_request;

  // action method ma_debug_resume_request
  input  ma_debug_resume_request_ip;
  input  EN_ma_debug_resume_request;
  output RDY_ma_debug_resume_request;

  // action method ma_debugger_available
  input  ma_debugger_available_avail;
  input  EN_ma_debugger_available;
  output RDY_ma_debugger_available;

  // value method mv_core_is_halted
  output mv_core_is_halted;
  output RDY_mv_core_is_halted;

  // value method mv_core_debugenable
  output mv_core_debugenable;
  output RDY_mv_core_debugenable;

  // value method mv_curr_priv
  output [1 : 0] mv_curr_priv;
  output RDY_mv_curr_priv;

  // value method mv_trap
  output mv_trap;
  output RDY_mv_trap;

  // signals for module outputs
  wire [69 : 0] memory_request_get;
  wire [33 : 0] inst_request_get;
  wire [31 : 0] mav_debug_access_csrs, mav_debug_access_gprs;
  wire [1 : 0] mv_curr_priv;
  wire RDY_clint_msip,
       RDY_clint_mtime,
       RDY_clint_mtip,
       RDY_ext_interrupt,
       RDY_inst_request_get,
       RDY_inst_response_put,
       RDY_ma_debug_halt_request,
       RDY_ma_debug_resume_request,
       RDY_ma_debugger_available,
       RDY_mav_debug_access_csrs,
       RDY_mav_debug_access_gprs,
       RDY_memory_request_get,
       RDY_memory_response_put,
       RDY_mv_core_debugenable,
       RDY_mv_core_is_halted,
       RDY_mv_curr_priv,
       RDY_mv_trap,
       mv_core_debugenable,
       mv_core_is_halted,
       mv_trap;

  // ports of submodule fifof
  wire [63 : 0] fifof_D_IN, fifof_D_OUT;
  wire fifof_CLR, fifof_DEQ, fifof_EMPTY_N, fifof_ENQ, fifof_FULL_N;

  // ports of submodule fifof_1
  wire [33 : 0] fifof_1_D_IN, fifof_1_D_OUT;
  wire fifof_1_CLR, fifof_1_DEQ, fifof_1_EMPTY_N, fifof_1_ENQ, fifof_1_FULL_N;

  // ports of submodule fifof_2
  wire [61 : 0] fifof_2_D_IN, fifof_2_D_OUT;
  wire fifof_2_CLR, fifof_2_DEQ, fifof_2_EMPTY_N, fifof_2_ENQ, fifof_2_FULL_N;

  // ports of submodule fifof_3
  wire [37 : 0] fifof_3_D_IN, fifof_3_D_OUT;
  wire fifof_3_CLR, fifof_3_DEQ, fifof_3_EMPTY_N, fifof_3_ENQ, fifof_3_FULL_N;

  // ports of submodule fifof_4
  wire [50 : 0] fifof_4_D_IN, fifof_4_D_OUT;
  wire fifof_4_CLR, fifof_4_DEQ, fifof_4_EMPTY_N, fifof_4_ENQ, fifof_4_FULL_N;

  // ports of submodule stage1
  wire [117 : 0] stage1_ma_csr_decode_c;
  wire [63 : 0] stage1_tx_stage1_operands_enq_data;
  wire [61 : 0] stage1_tx_stage1_meta_enq_data;
  wire [46 : 0] stage1_mav_debug_access_gprs_cmd;
  wire [36 : 0] stage1_commit_rd_put;
  wire [34 : 0] stage1_inst_response_put;
  wire [33 : 0] stage1_inst_request_get, stage1_tx_stage1_control_enq_data;
  wire [31 : 0] stage1_ma_flush_newpc, stage1_mav_debug_access_gprs;
  wire [4 : 0] stage1_ma_debug_status_status;
  wire stage1_EN_commit_rd_put,
       stage1_EN_inst_request_get,
       stage1_EN_inst_response_put,
       stage1_EN_ma_flush,
       stage1_EN_ma_update_eEpoch,
       stage1_EN_ma_update_wEpoch,
       stage1_EN_mav_debug_access_gprs,
       stage1_RDY_commit_rd_put,
       stage1_RDY_inst_request_get,
       stage1_RDY_inst_response_put,
       stage1_RDY_mav_debug_access_gprs,
       stage1_ma_csr_misa_c_c,
       stage1_ma_interrupt_i,
       stage1_tx_stage1_control_enq_ena,
       stage1_tx_stage1_control_enq_rdy_b,
       stage1_tx_stage1_control_notFull_b,
       stage1_tx_stage1_meta_enq_ena,
       stage1_tx_stage1_meta_enq_rdy_b,
       stage1_tx_stage1_meta_notFull_b,
       stage1_tx_stage1_operands_enq_ena,
       stage1_tx_stage1_operands_enq_rdy_b,
       stage1_tx_stage1_operands_notFull_b;

  // ports of submodule stage2
  wire [69 : 0] stage2_memory_request_get;
  wire [63 : 0] stage2_rx_stage1_operands_first_x;
  wire [61 : 0] stage2_rx_stage1_meta_first_x;
  wire [50 : 0] stage2_tx_stage3_type_enq_data;
  wire [37 : 0] stage2_operand_fwding_put, stage2_tx_stage3_common_enq_data;
  wire [33 : 0] stage2_rx_stage1_control_first_x;
  wire [31 : 0] stage2_mv_redirection_fst;
  wire stage2_EN_ma_csr_misa_c,
       stage2_EN_ma_update_wEpoch,
       stage2_EN_memory_request_get,
       stage2_EN_operand_fwding_put,
       stage2_RDY_memory_request_get,
       stage2_ma_csr_misa_c_c,
       stage2_mv_redirection_snd,
       stage2_rx_stage1_control_deq_ena,
       stage2_rx_stage1_control_first_deq_rdy_b,
       stage2_rx_stage1_control_notEmpty_b,
       stage2_rx_stage1_meta_deq_ena,
       stage2_rx_stage1_meta_first_deq_rdy_b,
       stage2_rx_stage1_meta_notEmpty_b,
       stage2_rx_stage1_operands_deq_ena,
       stage2_rx_stage1_operands_first_deq_rdy_b,
       stage2_rx_stage1_operands_notEmpty_b,
       stage2_tx_stage3_common_enq_ena,
       stage2_tx_stage3_common_enq_rdy_b,
       stage2_tx_stage3_common_notFull_b,
       stage2_tx_stage3_type_enq_ena,
       stage2_tx_stage3_type_enq_rdy_b,
       stage2_tx_stage3_type_notFull_b;

  // ports of submodule stage3
  wire [117 : 0] stage3_mv_csr_decode;
  wire [63 : 0] stage3_clint_mtime_c_mtime;
  wire [50 : 0] stage3_rx_stage3_type_first_x;
  wire [46 : 0] stage3_mav_debug_access_csrs_cmd;
  wire [37 : 0] stage3_operand_fwding_get, stage3_rx_stage3_common_first_x;
  wire [36 : 0] stage3_commit_rd_get;
  wire [33 : 0] stage3_memory_response_put;
  wire [31 : 0] stage3_flush_fst, stage3_mav_debug_access_csrs;
  wire [1 : 0] stage3_mv_curr_priv;
  wire stage3_EN_clint_msip,
       stage3_EN_clint_mtime,
       stage3_EN_clint_mtip,
       stage3_EN_commit_rd_get,
       stage3_EN_ext_interrupt,
       stage3_EN_ma_debug_halt_request,
       stage3_EN_ma_debug_resume_request,
       stage3_EN_mav_debug_access_csrs,
       stage3_EN_memory_response_put,
       stage3_EN_operand_fwding_get,
       stage3_RDY_commit_rd_get,
       stage3_clint_msip_intrpt,
       stage3_clint_mtip_intrpt,
       stage3_ext_interrupt_i,
       stage3_flush_snd,
       stage3_ma_debug_halt_request_ip,
       stage3_ma_debug_resume_request_ip,
       stage3_mv_core_debugenable,
       stage3_mv_core_is_halted,
       stage3_mv_csr_misa_c,
       stage3_mv_interrupt,
       stage3_mv_step_ie,
       stage3_mv_step_is_set,
       stage3_rx_stage3_common_deq_ena,
       stage3_rx_stage3_common_first_deq_rdy_b,
       stage3_rx_stage3_common_notEmpty_b,
       stage3_rx_stage3_type_deq_ena,
       stage3_rx_stage3_type_first_deq_rdy_b,
       stage3_rx_stage3_type_notEmpty_b;

  // rule scheduling signals
  wire CAN_FIRE_RL_connect_debug_info,
       CAN_FIRE_RL_empty_fifof_to_rxe_1_connect_ena,
       CAN_FIRE_RL_empty_fifof_to_rxe_1_connect_first,
       CAN_FIRE_RL_empty_fifof_to_rxe_1_connect_notEmpty,
       CAN_FIRE_RL_empty_fifof_to_rxe_1_connect_rdy,
       CAN_FIRE_RL_empty_fifof_to_rxe_2_connect_ena,
       CAN_FIRE_RL_empty_fifof_to_rxe_2_connect_first,
       CAN_FIRE_RL_empty_fifof_to_rxe_2_connect_notEmpty,
       CAN_FIRE_RL_empty_fifof_to_rxe_2_connect_rdy,
       CAN_FIRE_RL_empty_fifof_to_rxe_3_connect_ena,
       CAN_FIRE_RL_empty_fifof_to_rxe_3_connect_first,
       CAN_FIRE_RL_empty_fifof_to_rxe_3_connect_notEmpty,
       CAN_FIRE_RL_empty_fifof_to_rxe_3_connect_rdy,
       CAN_FIRE_RL_empty_fifof_to_rxe_4_connect_ena,
       CAN_FIRE_RL_empty_fifof_to_rxe_4_connect_first,
       CAN_FIRE_RL_empty_fifof_to_rxe_4_connect_notEmpty,
       CAN_FIRE_RL_empty_fifof_to_rxe_4_connect_rdy,
       CAN_FIRE_RL_empty_fifof_to_rxe_connect_ena,
       CAN_FIRE_RL_empty_fifof_to_rxe_connect_first,
       CAN_FIRE_RL_empty_fifof_to_rxe_connect_notEmpty,
       CAN_FIRE_RL_empty_fifof_to_rxe_connect_rdy,
       CAN_FIRE_RL_empty_txe_to_fifof_1_connect_ena_data,
       CAN_FIRE_RL_empty_txe_to_fifof_1_connect_notFull,
       CAN_FIRE_RL_empty_txe_to_fifof_1_connect_rdy,
       CAN_FIRE_RL_empty_txe_to_fifof_2_connect_ena_data,
       CAN_FIRE_RL_empty_txe_to_fifof_2_connect_notFull,
       CAN_FIRE_RL_empty_txe_to_fifof_2_connect_rdy,
       CAN_FIRE_RL_empty_txe_to_fifof_3_connect_ena_data,
       CAN_FIRE_RL_empty_txe_to_fifof_3_connect_notFull,
       CAN_FIRE_RL_empty_txe_to_fifof_3_connect_rdy,
       CAN_FIRE_RL_empty_txe_to_fifof_4_connect_ena_data,
       CAN_FIRE_RL_empty_txe_to_fifof_4_connect_notFull,
       CAN_FIRE_RL_empty_txe_to_fifof_4_connect_rdy,
       CAN_FIRE_RL_empty_txe_to_fifof_connect_ena_data,
       CAN_FIRE_RL_empty_txe_to_fifof_connect_notFull,
       CAN_FIRE_RL_empty_txe_to_fifof_connect_rdy,
       CAN_FIRE_RL_flush_from_writeback,
       CAN_FIRE_RL_gen_new_pc,
       CAN_FIRE_RL_mkConnectionGetPut,
       CAN_FIRE_RL_mkConnectionGetPut_1,
       CAN_FIRE_RL_mkConnectionVtoAf,
       CAN_FIRE_RL_mkConnectionVtoAf_1,
       CAN_FIRE_RL_mkConnectionVtoAf_2,
       CAN_FIRE_RL_mkConnectionVtoAf_3,
       CAN_FIRE_RL_redirection_from_stage2,
       CAN_FIRE_clint_msip,
       CAN_FIRE_clint_mtime,
       CAN_FIRE_clint_mtip,
       CAN_FIRE_ext_interrupt,
       CAN_FIRE_inst_request_get,
       CAN_FIRE_inst_response_put,
       CAN_FIRE_ma_debug_halt_request,
       CAN_FIRE_ma_debug_resume_request,
       CAN_FIRE_ma_debugger_available,
       CAN_FIRE_mav_debug_access_csrs,
       CAN_FIRE_mav_debug_access_gprs,
       CAN_FIRE_memory_request_get,
       CAN_FIRE_memory_response_put,
       WILL_FIRE_RL_connect_debug_info,
       WILL_FIRE_RL_empty_fifof_to_rxe_1_connect_ena,
       WILL_FIRE_RL_empty_fifof_to_rxe_1_connect_first,
       WILL_FIRE_RL_empty_fifof_to_rxe_1_connect_notEmpty,
       WILL_FIRE_RL_empty_fifof_to_rxe_1_connect_rdy,
       WILL_FIRE_RL_empty_fifof_to_rxe_2_connect_ena,
       WILL_FIRE_RL_empty_fifof_to_rxe_2_connect_first,
       WILL_FIRE_RL_empty_fifof_to_rxe_2_connect_notEmpty,
       WILL_FIRE_RL_empty_fifof_to_rxe_2_connect_rdy,
       WILL_FIRE_RL_empty_fifof_to_rxe_3_connect_ena,
       WILL_FIRE_RL_empty_fifof_to_rxe_3_connect_first,
       WILL_FIRE_RL_empty_fifof_to_rxe_3_connect_notEmpty,
       WILL_FIRE_RL_empty_fifof_to_rxe_3_connect_rdy,
       WILL_FIRE_RL_empty_fifof_to_rxe_4_connect_ena,
       WILL_FIRE_RL_empty_fifof_to_rxe_4_connect_first,
       WILL_FIRE_RL_empty_fifof_to_rxe_4_connect_notEmpty,
       WILL_FIRE_RL_empty_fifof_to_rxe_4_connect_rdy,
       WILL_FIRE_RL_empty_fifof_to_rxe_connect_ena,
       WILL_FIRE_RL_empty_fifof_to_rxe_connect_first,
       WILL_FIRE_RL_empty_fifof_to_rxe_connect_notEmpty,
       WILL_FIRE_RL_empty_fifof_to_rxe_connect_rdy,
       WILL_FIRE_RL_empty_txe_to_fifof_1_connect_ena_data,
       WILL_FIRE_RL_empty_txe_to_fifof_1_connect_notFull,
       WILL_FIRE_RL_empty_txe_to_fifof_1_connect_rdy,
       WILL_FIRE_RL_empty_txe_to_fifof_2_connect_ena_data,
       WILL_FIRE_RL_empty_txe_to_fifof_2_connect_notFull,
       WILL_FIRE_RL_empty_txe_to_fifof_2_connect_rdy,
       WILL_FIRE_RL_empty_txe_to_fifof_3_connect_ena_data,
       WILL_FIRE_RL_empty_txe_to_fifof_3_connect_notFull,
       WILL_FIRE_RL_empty_txe_to_fifof_3_connect_rdy,
       WILL_FIRE_RL_empty_txe_to_fifof_4_connect_ena_data,
       WILL_FIRE_RL_empty_txe_to_fifof_4_connect_notFull,
       WILL_FIRE_RL_empty_txe_to_fifof_4_connect_rdy,
       WILL_FIRE_RL_empty_txe_to_fifof_connect_ena_data,
       WILL_FIRE_RL_empty_txe_to_fifof_connect_notFull,
       WILL_FIRE_RL_empty_txe_to_fifof_connect_rdy,
       WILL_FIRE_RL_flush_from_writeback,
       WILL_FIRE_RL_gen_new_pc,
       WILL_FIRE_RL_mkConnectionGetPut,
       WILL_FIRE_RL_mkConnectionGetPut_1,
       WILL_FIRE_RL_mkConnectionVtoAf,
       WILL_FIRE_RL_mkConnectionVtoAf_1,
       WILL_FIRE_RL_mkConnectionVtoAf_2,
       WILL_FIRE_RL_mkConnectionVtoAf_3,
       WILL_FIRE_RL_redirection_from_stage2,
       WILL_FIRE_clint_msip,
       WILL_FIRE_clint_mtime,
       WILL_FIRE_clint_mtip,
       WILL_FIRE_ext_interrupt,
       WILL_FIRE_inst_request_get,
       WILL_FIRE_inst_response_put,
       WILL_FIRE_ma_debug_halt_request,
       WILL_FIRE_ma_debug_resume_request,
       WILL_FIRE_ma_debugger_available,
       WILL_FIRE_mav_debug_access_csrs,
       WILL_FIRE_mav_debug_access_gprs,
       WILL_FIRE_memory_request_get,
       WILL_FIRE_memory_response_put;

  // actionvalue method inst_request_get
  assign inst_request_get = stage1_inst_request_get ;
  assign RDY_inst_request_get = stage1_RDY_inst_request_get ;
  assign CAN_FIRE_inst_request_get = stage1_RDY_inst_request_get ;
  assign WILL_FIRE_inst_request_get = EN_inst_request_get ;

  // action method inst_response_put
  assign RDY_inst_response_put = stage1_RDY_inst_response_put ;
  assign CAN_FIRE_inst_response_put = stage1_RDY_inst_response_put ;
  assign WILL_FIRE_inst_response_put = EN_inst_response_put ;

  // actionvalue method memory_request_get
  assign memory_request_get = stage2_memory_request_get ;
  assign RDY_memory_request_get = stage2_RDY_memory_request_get ;
  assign CAN_FIRE_memory_request_get = stage2_RDY_memory_request_get ;
  assign WILL_FIRE_memory_request_get = EN_memory_request_get ;

  // action method memory_response_put
  assign RDY_memory_response_put = 1'd1 ;
  assign CAN_FIRE_memory_response_put = 1'd1 ;
  assign WILL_FIRE_memory_response_put = EN_memory_response_put ;

  // action method clint_msip
  assign RDY_clint_msip = 1'd1 ;
  assign CAN_FIRE_clint_msip = 1'd1 ;
  assign WILL_FIRE_clint_msip = EN_clint_msip ;

  // action method clint_mtip
  assign RDY_clint_mtip = 1'd1 ;
  assign CAN_FIRE_clint_mtip = 1'd1 ;
  assign WILL_FIRE_clint_mtip = EN_clint_mtip ;

  // action method clint_mtime
  assign RDY_clint_mtime = 1'd1 ;
  assign CAN_FIRE_clint_mtime = 1'd1 ;
  assign WILL_FIRE_clint_mtime = EN_clint_mtime ;

  // action method ext_interrupt
  assign RDY_ext_interrupt = 1'd1 ;
  assign CAN_FIRE_ext_interrupt = 1'd1 ;
  assign WILL_FIRE_ext_interrupt = EN_ext_interrupt ;

  // actionvalue method mav_debug_access_gprs
  assign mav_debug_access_gprs = stage1_mav_debug_access_gprs ;
  assign RDY_mav_debug_access_gprs = stage1_RDY_mav_debug_access_gprs ;
  assign CAN_FIRE_mav_debug_access_gprs = stage1_RDY_mav_debug_access_gprs ;
  assign WILL_FIRE_mav_debug_access_gprs = EN_mav_debug_access_gprs ;

  // actionvalue method mav_debug_access_csrs
  assign mav_debug_access_csrs = stage3_mav_debug_access_csrs ;
  assign RDY_mav_debug_access_csrs = 1'd1 ;
  assign CAN_FIRE_mav_debug_access_csrs = 1'd1 ;
  assign WILL_FIRE_mav_debug_access_csrs = EN_mav_debug_access_csrs ;

  // action method ma_debug_halt_request
  assign RDY_ma_debug_halt_request = 1'd1 ;
  assign CAN_FIRE_ma_debug_halt_request = 1'd1 ;
  assign WILL_FIRE_ma_debug_halt_request = EN_ma_debug_halt_request ;

  // action method ma_debug_resume_request
  assign RDY_ma_debug_resume_request = 1'd1 ;
  assign CAN_FIRE_ma_debug_resume_request = 1'd1 ;
  assign WILL_FIRE_ma_debug_resume_request = EN_ma_debug_resume_request ;

  // action method ma_debugger_available
  assign RDY_ma_debugger_available = 1'd1 ;
  assign CAN_FIRE_ma_debugger_available = 1'd1 ;
  assign WILL_FIRE_ma_debugger_available = EN_ma_debugger_available ;

  // value method mv_core_is_halted
  assign mv_core_is_halted = stage3_mv_core_is_halted ;
  assign RDY_mv_core_is_halted = 1'd1 ;

  // value method mv_core_debugenable
  assign mv_core_debugenable = stage3_mv_core_debugenable ;
  assign RDY_mv_core_debugenable = 1'd1 ;

  // value method mv_curr_priv
  assign mv_curr_priv = stage3_mv_curr_priv ;
  assign RDY_mv_curr_priv = 1'd1 ;

  // value method mv_trap
  assign mv_trap = stage3_flush_snd ;
  assign RDY_mv_trap = 1'd1 ;

  // submodule fifof
  FIFOL1 #(.width(32'd64)) fifof(.RST(RST_N),
				 .CLK(CLK),
				 .D_IN(fifof_D_IN),
				 .ENQ(fifof_ENQ),
				 .DEQ(fifof_DEQ),
				 .CLR(fifof_CLR),
				 .D_OUT(fifof_D_OUT),
				 .FULL_N(fifof_FULL_N),
				 .EMPTY_N(fifof_EMPTY_N));

  // submodule fifof_1
  FIFOL1 #(.width(32'd34)) fifof_1(.RST(RST_N),
				   .CLK(CLK),
				   .D_IN(fifof_1_D_IN),
				   .ENQ(fifof_1_ENQ),
				   .DEQ(fifof_1_DEQ),
				   .CLR(fifof_1_CLR),
				   .D_OUT(fifof_1_D_OUT),
				   .FULL_N(fifof_1_FULL_N),
				   .EMPTY_N(fifof_1_EMPTY_N));

  // submodule fifof_2
  FIFOL1 #(.width(32'd62)) fifof_2(.RST(RST_N),
				   .CLK(CLK),
				   .D_IN(fifof_2_D_IN),
				   .ENQ(fifof_2_ENQ),
				   .DEQ(fifof_2_DEQ),
				   .CLR(fifof_2_CLR),
				   .D_OUT(fifof_2_D_OUT),
				   .FULL_N(fifof_2_FULL_N),
				   .EMPTY_N(fifof_2_EMPTY_N));

  // submodule fifof_3
  FIFOL1 #(.width(32'd38)) fifof_3(.RST(RST_N),
				   .CLK(CLK),
				   .D_IN(fifof_3_D_IN),
				   .ENQ(fifof_3_ENQ),
				   .DEQ(fifof_3_DEQ),
				   .CLR(fifof_3_CLR),
				   .D_OUT(fifof_3_D_OUT),
				   .FULL_N(fifof_3_FULL_N),
				   .EMPTY_N(fifof_3_EMPTY_N));

  // submodule fifof_4
  FIFOL1 #(.width(32'd51)) fifof_4(.RST(RST_N),
				   .CLK(CLK),
				   .D_IN(fifof_4_D_IN),
				   .ENQ(fifof_4_ENQ),
				   .DEQ(fifof_4_DEQ),
				   .CLR(fifof_4_CLR),
				   .D_OUT(fifof_4_D_OUT),
				   .FULL_N(fifof_4_FULL_N),
				   .EMPTY_N(fifof_4_EMPTY_N));

  // submodule stage1
  mkstage1 stage1(.resetpc(resetpc),
		  .CLK(CLK),
		  .RST_N(RST_N),
		  .commit_rd_put(stage1_commit_rd_put),
		  .inst_response_put(stage1_inst_response_put),
		  .ma_csr_decode_c(stage1_ma_csr_decode_c),
		  .ma_csr_misa_c_c(stage1_ma_csr_misa_c_c),
		  .ma_debug_status_status(stage1_ma_debug_status_status),
		  .ma_flush_newpc(stage1_ma_flush_newpc),
		  .ma_interrupt_i(stage1_ma_interrupt_i),
		  .mav_debug_access_gprs_cmd(stage1_mav_debug_access_gprs_cmd),
		  .tx_stage1_control_enq_rdy_b(stage1_tx_stage1_control_enq_rdy_b),
		  .tx_stage1_control_notFull_b(stage1_tx_stage1_control_notFull_b),
		  .tx_stage1_meta_enq_rdy_b(stage1_tx_stage1_meta_enq_rdy_b),
		  .tx_stage1_meta_notFull_b(stage1_tx_stage1_meta_notFull_b),
		  .tx_stage1_operands_enq_rdy_b(stage1_tx_stage1_operands_enq_rdy_b),
		  .tx_stage1_operands_notFull_b(stage1_tx_stage1_operands_notFull_b),
		  .EN_inst_request_get(stage1_EN_inst_request_get),
		  .EN_inst_response_put(stage1_EN_inst_response_put),
		  .EN_commit_rd_put(stage1_EN_commit_rd_put),
		  .EN_ma_flush(stage1_EN_ma_flush),
		  .EN_ma_update_eEpoch(stage1_EN_ma_update_eEpoch),
		  .EN_ma_update_wEpoch(stage1_EN_ma_update_wEpoch),
		  .EN_mav_debug_access_gprs(stage1_EN_mav_debug_access_gprs),
		  .inst_request_get(stage1_inst_request_get),
		  .RDY_inst_request_get(stage1_RDY_inst_request_get),
		  .RDY_inst_response_put(stage1_RDY_inst_response_put),
		  .tx_stage1_operands_enq_ena(stage1_tx_stage1_operands_enq_ena),
		  .tx_stage1_operands_enq_data(stage1_tx_stage1_operands_enq_data),
		  .tx_stage1_meta_enq_ena(stage1_tx_stage1_meta_enq_ena),
		  .tx_stage1_meta_enq_data(stage1_tx_stage1_meta_enq_data),
		  .tx_stage1_control_enq_ena(stage1_tx_stage1_control_enq_ena),
		  .tx_stage1_control_enq_data(stage1_tx_stage1_control_enq_data),
		  .RDY_commit_rd_put(stage1_RDY_commit_rd_put),
		  .RDY_ma_update_eEpoch(),
		  .RDY_ma_update_wEpoch(),
		  .mav_debug_access_gprs(stage1_mav_debug_access_gprs),
		  .RDY_mav_debug_access_gprs(stage1_RDY_mav_debug_access_gprs));

  // submodule stage2
  mkstage2 stage2(.CLK(CLK),
		  .RST_N(RST_N),
		  .ma_csr_misa_c_c(stage2_ma_csr_misa_c_c),
		  .operand_fwding_put(stage2_operand_fwding_put),
		  .rx_stage1_control_first_deq_rdy_b(stage2_rx_stage1_control_first_deq_rdy_b),
		  .rx_stage1_control_first_x(stage2_rx_stage1_control_first_x),
		  .rx_stage1_control_notEmpty_b(stage2_rx_stage1_control_notEmpty_b),
		  .rx_stage1_meta_first_deq_rdy_b(stage2_rx_stage1_meta_first_deq_rdy_b),
		  .rx_stage1_meta_first_x(stage2_rx_stage1_meta_first_x),
		  .rx_stage1_meta_notEmpty_b(stage2_rx_stage1_meta_notEmpty_b),
		  .rx_stage1_operands_first_deq_rdy_b(stage2_rx_stage1_operands_first_deq_rdy_b),
		  .rx_stage1_operands_first_x(stage2_rx_stage1_operands_first_x),
		  .rx_stage1_operands_notEmpty_b(stage2_rx_stage1_operands_notEmpty_b),
		  .tx_stage3_common_enq_rdy_b(stage2_tx_stage3_common_enq_rdy_b),
		  .tx_stage3_common_notFull_b(stage2_tx_stage3_common_notFull_b),
		  .tx_stage3_type_enq_rdy_b(stage2_tx_stage3_type_enq_rdy_b),
		  .tx_stage3_type_notFull_b(stage2_tx_stage3_type_notFull_b),
		  .EN_memory_request_get(stage2_EN_memory_request_get),
		  .EN_operand_fwding_put(stage2_EN_operand_fwding_put),
		  .EN_ma_update_wEpoch(stage2_EN_ma_update_wEpoch),
		  .EN_ma_csr_misa_c(stage2_EN_ma_csr_misa_c),
		  .rx_stage1_operands_deq_ena(stage2_rx_stage1_operands_deq_ena),
		  .rx_stage1_meta_deq_ena(stage2_rx_stage1_meta_deq_ena),
		  .rx_stage1_control_deq_ena(stage2_rx_stage1_control_deq_ena),
		  .tx_stage3_common_enq_ena(stage2_tx_stage3_common_enq_ena),
		  .tx_stage3_common_enq_data(stage2_tx_stage3_common_enq_data),
		  .tx_stage3_type_enq_ena(stage2_tx_stage3_type_enq_ena),
		  .tx_stage3_type_enq_data(stage2_tx_stage3_type_enq_data),
		  .memory_request_get(stage2_memory_request_get),
		  .RDY_memory_request_get(stage2_RDY_memory_request_get),
		  .RDY_operand_fwding_put(),
		  .RDY_ma_update_wEpoch(),
		  .RDY_ma_csr_misa_c(),
		  .mv_redirection_fst(stage2_mv_redirection_fst),
		  .RDY_mv_redirection_fst(),
		  .mv_redirection_snd(stage2_mv_redirection_snd),
		  .RDY_mv_redirection_snd());

  // submodule stage3
  mkstage3 stage3(.CLK(CLK),
		  .RST_N(RST_N),
		  .clint_msip_intrpt(stage3_clint_msip_intrpt),
		  .clint_mtime_c_mtime(stage3_clint_mtime_c_mtime),
		  .clint_mtip_intrpt(stage3_clint_mtip_intrpt),
		  .ext_interrupt_i(stage3_ext_interrupt_i),
		  .ma_debug_halt_request_ip(stage3_ma_debug_halt_request_ip),
		  .ma_debug_resume_request_ip(stage3_ma_debug_resume_request_ip),
		  .mav_debug_access_csrs_cmd(stage3_mav_debug_access_csrs_cmd),
		  .memory_response_put(stage3_memory_response_put),
		  .rx_stage3_common_first_deq_rdy_b(stage3_rx_stage3_common_first_deq_rdy_b),
		  .rx_stage3_common_first_x(stage3_rx_stage3_common_first_x),
		  .rx_stage3_common_notEmpty_b(stage3_rx_stage3_common_notEmpty_b),
		  .rx_stage3_type_first_deq_rdy_b(stage3_rx_stage3_type_first_deq_rdy_b),
		  .rx_stage3_type_first_x(stage3_rx_stage3_type_first_x),
		  .rx_stage3_type_notEmpty_b(stage3_rx_stage3_type_notEmpty_b),
		  .EN_memory_response_put(stage3_EN_memory_response_put),
		  .EN_commit_rd_get(stage3_EN_commit_rd_get),
		  .EN_operand_fwding_get(stage3_EN_operand_fwding_get),
		  .EN_clint_msip(stage3_EN_clint_msip),
		  .EN_clint_mtip(stage3_EN_clint_mtip),
		  .EN_clint_mtime(stage3_EN_clint_mtime),
		  .EN_ext_interrupt(stage3_EN_ext_interrupt),
		  .EN_mav_debug_access_csrs(stage3_EN_mav_debug_access_csrs),
		  .EN_ma_debug_halt_request(stage3_EN_ma_debug_halt_request),
		  .EN_ma_debug_resume_request(stage3_EN_ma_debug_resume_request),
		  .rx_stage3_common_deq_ena(stage3_rx_stage3_common_deq_ena),
		  .rx_stage3_type_deq_ena(stage3_rx_stage3_type_deq_ena),
		  .RDY_memory_response_put(),
		  .commit_rd_get(stage3_commit_rd_get),
		  .RDY_commit_rd_get(stage3_RDY_commit_rd_get),
		  .operand_fwding_get(stage3_operand_fwding_get),
		  .RDY_operand_fwding_get(),
		  .flush_fst(stage3_flush_fst),
		  .RDY_flush_fst(),
		  .flush_snd(stage3_flush_snd),
		  .RDY_flush_snd(),
		  .mv_csr_decode(stage3_mv_csr_decode),
		  .RDY_mv_csr_decode(),
		  .mv_csr_misa_c(stage3_mv_csr_misa_c),
		  .RDY_mv_csr_misa_c(),
		  .RDY_clint_msip(),
		  .RDY_clint_mtip(),
		  .RDY_clint_mtime(),
		  .RDY_ext_interrupt(),
		  .csr_updated(),
		  .RDY_csr_updated(),
		  .mv_interrupt(stage3_mv_interrupt),
		  .mav_debug_access_csrs(stage3_mav_debug_access_csrs),
		  .RDY_mav_debug_access_csrs(),
		  .RDY_ma_debug_halt_request(),
		  .RDY_ma_debug_resume_request(),
		  .mv_core_is_halted(stage3_mv_core_is_halted),
		  .RDY_mv_core_is_halted(),
		  .mv_step_is_set(stage3_mv_step_is_set),
		  .RDY_mv_step_is_set(),
		  .mv_step_ie(stage3_mv_step_ie),
		  .RDY_mv_step_ie(),
		  .mv_core_debugenable(stage3_mv_core_debugenable),
		  .RDY_mv_core_debugenable(),
		  .mv_curr_priv(stage3_mv_curr_priv),
		  .RDY_mv_curr_priv());

  // rule RL_mkConnectionVtoAf
  assign CAN_FIRE_RL_mkConnectionVtoAf = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf = 1'd1 ;

  // rule RL_mkConnectionVtoAf_1
  assign CAN_FIRE_RL_mkConnectionVtoAf_1 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_1 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_2
  assign CAN_FIRE_RL_mkConnectionVtoAf_2 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_2 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_3
  assign CAN_FIRE_RL_mkConnectionVtoAf_3 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_3 = 1'd1 ;

  // rule RL_connect_debug_info
  assign CAN_FIRE_RL_connect_debug_info = EN_ma_debugger_available ;
  assign WILL_FIRE_RL_connect_debug_info = EN_ma_debugger_available ;

  // rule RL_empty_fifof_to_rxe_connect_notEmpty
  assign CAN_FIRE_RL_empty_fifof_to_rxe_connect_notEmpty = 1'd1 ;
  assign WILL_FIRE_RL_empty_fifof_to_rxe_connect_notEmpty = 1'd1 ;

  // rule RL_empty_fifof_to_rxe_connect_rdy
  assign CAN_FIRE_RL_empty_fifof_to_rxe_connect_rdy = 1'd1 ;
  assign WILL_FIRE_RL_empty_fifof_to_rxe_connect_rdy = 1'd1 ;

  // rule RL_empty_fifof_to_rxe_connect_first
  assign CAN_FIRE_RL_empty_fifof_to_rxe_connect_first = fifof_EMPTY_N ;
  assign WILL_FIRE_RL_empty_fifof_to_rxe_connect_first = fifof_EMPTY_N ;

  // rule RL_empty_fifof_to_rxe_1_connect_notEmpty
  assign CAN_FIRE_RL_empty_fifof_to_rxe_1_connect_notEmpty = 1'd1 ;
  assign WILL_FIRE_RL_empty_fifof_to_rxe_1_connect_notEmpty = 1'd1 ;

  // rule RL_empty_fifof_to_rxe_1_connect_rdy
  assign CAN_FIRE_RL_empty_fifof_to_rxe_1_connect_rdy = 1'd1 ;
  assign WILL_FIRE_RL_empty_fifof_to_rxe_1_connect_rdy = 1'd1 ;

  // rule RL_empty_fifof_to_rxe_1_connect_first
  assign CAN_FIRE_RL_empty_fifof_to_rxe_1_connect_first = fifof_1_EMPTY_N ;
  assign WILL_FIRE_RL_empty_fifof_to_rxe_1_connect_first = fifof_1_EMPTY_N ;

  // rule RL_empty_fifof_to_rxe_2_connect_notEmpty
  assign CAN_FIRE_RL_empty_fifof_to_rxe_2_connect_notEmpty = 1'd1 ;
  assign WILL_FIRE_RL_empty_fifof_to_rxe_2_connect_notEmpty = 1'd1 ;

  // rule RL_empty_fifof_to_rxe_2_connect_rdy
  assign CAN_FIRE_RL_empty_fifof_to_rxe_2_connect_rdy = 1'd1 ;
  assign WILL_FIRE_RL_empty_fifof_to_rxe_2_connect_rdy = 1'd1 ;

  // rule RL_empty_fifof_to_rxe_2_connect_first
  assign CAN_FIRE_RL_empty_fifof_to_rxe_2_connect_first = fifof_2_EMPTY_N ;
  assign WILL_FIRE_RL_empty_fifof_to_rxe_2_connect_first = fifof_2_EMPTY_N ;

  // rule RL_empty_fifof_to_rxe_3_connect_notEmpty
  assign CAN_FIRE_RL_empty_fifof_to_rxe_3_connect_notEmpty = 1'd1 ;
  assign WILL_FIRE_RL_empty_fifof_to_rxe_3_connect_notEmpty = 1'd1 ;

  // rule RL_empty_fifof_to_rxe_3_connect_rdy
  assign CAN_FIRE_RL_empty_fifof_to_rxe_3_connect_rdy = 1'd1 ;
  assign WILL_FIRE_RL_empty_fifof_to_rxe_3_connect_rdy = 1'd1 ;

  // rule RL_empty_fifof_to_rxe_3_connect_first
  assign CAN_FIRE_RL_empty_fifof_to_rxe_3_connect_first = fifof_3_EMPTY_N ;
  assign WILL_FIRE_RL_empty_fifof_to_rxe_3_connect_first = fifof_3_EMPTY_N ;

  // rule RL_empty_fifof_to_rxe_4_connect_notEmpty
  assign CAN_FIRE_RL_empty_fifof_to_rxe_4_connect_notEmpty = 1'd1 ;
  assign WILL_FIRE_RL_empty_fifof_to_rxe_4_connect_notEmpty = 1'd1 ;

  // rule RL_empty_fifof_to_rxe_4_connect_rdy
  assign CAN_FIRE_RL_empty_fifof_to_rxe_4_connect_rdy = 1'd1 ;
  assign WILL_FIRE_RL_empty_fifof_to_rxe_4_connect_rdy = 1'd1 ;

  // rule RL_empty_fifof_to_rxe_4_connect_first
  assign CAN_FIRE_RL_empty_fifof_to_rxe_4_connect_first = fifof_4_EMPTY_N ;
  assign WILL_FIRE_RL_empty_fifof_to_rxe_4_connect_first = fifof_4_EMPTY_N ;

  // rule RL_mkConnectionGetPut_1
  assign CAN_FIRE_RL_mkConnectionGetPut_1 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionGetPut_1 = 1'd1 ;

  // rule RL_mkConnectionGetPut
  assign CAN_FIRE_RL_mkConnectionGetPut =
	     stage1_RDY_commit_rd_put && stage3_RDY_commit_rd_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut = CAN_FIRE_RL_mkConnectionGetPut ;

  // rule RL_empty_fifof_to_rxe_3_connect_ena
  assign CAN_FIRE_RL_empty_fifof_to_rxe_3_connect_ena =
	     fifof_3_EMPTY_N && stage3_rx_stage3_common_deq_ena ;
  assign WILL_FIRE_RL_empty_fifof_to_rxe_3_connect_ena =
	     CAN_FIRE_RL_empty_fifof_to_rxe_3_connect_ena ;

  // rule RL_empty_txe_to_fifof_3_connect_notFull
  assign CAN_FIRE_RL_empty_txe_to_fifof_3_connect_notFull = 1'd1 ;
  assign WILL_FIRE_RL_empty_txe_to_fifof_3_connect_notFull = 1'd1 ;

  // rule RL_empty_txe_to_fifof_3_connect_rdy
  assign CAN_FIRE_RL_empty_txe_to_fifof_3_connect_rdy = 1'd1 ;
  assign WILL_FIRE_RL_empty_txe_to_fifof_3_connect_rdy = 1'd1 ;

  // rule RL_empty_fifof_to_rxe_4_connect_ena
  assign CAN_FIRE_RL_empty_fifof_to_rxe_4_connect_ena =
	     fifof_4_EMPTY_N && stage3_rx_stage3_type_deq_ena ;
  assign WILL_FIRE_RL_empty_fifof_to_rxe_4_connect_ena =
	     CAN_FIRE_RL_empty_fifof_to_rxe_4_connect_ena ;

  // rule RL_empty_txe_to_fifof_4_connect_notFull
  assign CAN_FIRE_RL_empty_txe_to_fifof_4_connect_notFull = 1'd1 ;
  assign WILL_FIRE_RL_empty_txe_to_fifof_4_connect_notFull = 1'd1 ;

  // rule RL_empty_txe_to_fifof_4_connect_rdy
  assign CAN_FIRE_RL_empty_txe_to_fifof_4_connect_rdy = 1'd1 ;
  assign WILL_FIRE_RL_empty_txe_to_fifof_4_connect_rdy = 1'd1 ;

  // rule RL_gen_new_pc
  assign CAN_FIRE_RL_gen_new_pc =
	     stage3_flush_snd || stage2_mv_redirection_snd ;
  assign WILL_FIRE_RL_gen_new_pc = CAN_FIRE_RL_gen_new_pc ;

  // rule RL_empty_fifof_to_rxe_connect_ena
  assign CAN_FIRE_RL_empty_fifof_to_rxe_connect_ena =
	     fifof_EMPTY_N && stage2_rx_stage1_operands_deq_ena ;
  assign WILL_FIRE_RL_empty_fifof_to_rxe_connect_ena =
	     CAN_FIRE_RL_empty_fifof_to_rxe_connect_ena ;

  // rule RL_empty_txe_to_fifof_connect_notFull
  assign CAN_FIRE_RL_empty_txe_to_fifof_connect_notFull = 1'd1 ;
  assign WILL_FIRE_RL_empty_txe_to_fifof_connect_notFull = 1'd1 ;

  // rule RL_empty_txe_to_fifof_connect_rdy
  assign CAN_FIRE_RL_empty_txe_to_fifof_connect_rdy = 1'd1 ;
  assign WILL_FIRE_RL_empty_txe_to_fifof_connect_rdy = 1'd1 ;

  // rule RL_empty_fifof_to_rxe_1_connect_ena
  assign CAN_FIRE_RL_empty_fifof_to_rxe_1_connect_ena =
	     fifof_1_EMPTY_N && stage2_rx_stage1_control_deq_ena ;
  assign WILL_FIRE_RL_empty_fifof_to_rxe_1_connect_ena =
	     CAN_FIRE_RL_empty_fifof_to_rxe_1_connect_ena ;

  // rule RL_empty_txe_to_fifof_1_connect_notFull
  assign CAN_FIRE_RL_empty_txe_to_fifof_1_connect_notFull = 1'd1 ;
  assign WILL_FIRE_RL_empty_txe_to_fifof_1_connect_notFull = 1'd1 ;

  // rule RL_empty_txe_to_fifof_1_connect_rdy
  assign CAN_FIRE_RL_empty_txe_to_fifof_1_connect_rdy = 1'd1 ;
  assign WILL_FIRE_RL_empty_txe_to_fifof_1_connect_rdy = 1'd1 ;

  // rule RL_empty_fifof_to_rxe_2_connect_ena
  assign CAN_FIRE_RL_empty_fifof_to_rxe_2_connect_ena =
	     fifof_2_EMPTY_N && stage2_rx_stage1_meta_deq_ena ;
  assign WILL_FIRE_RL_empty_fifof_to_rxe_2_connect_ena =
	     CAN_FIRE_RL_empty_fifof_to_rxe_2_connect_ena ;

  // rule RL_empty_txe_to_fifof_2_connect_notFull
  assign CAN_FIRE_RL_empty_txe_to_fifof_2_connect_notFull = 1'd1 ;
  assign WILL_FIRE_RL_empty_txe_to_fifof_2_connect_notFull = 1'd1 ;

  // rule RL_empty_txe_to_fifof_2_connect_rdy
  assign CAN_FIRE_RL_empty_txe_to_fifof_2_connect_rdy = 1'd1 ;
  assign WILL_FIRE_RL_empty_txe_to_fifof_2_connect_rdy = 1'd1 ;

  // rule RL_redirection_from_stage2
  assign CAN_FIRE_RL_redirection_from_stage2 = stage2_mv_redirection_snd ;
  assign WILL_FIRE_RL_redirection_from_stage2 = stage2_mv_redirection_snd ;

  // rule RL_flush_from_writeback
  assign CAN_FIRE_RL_flush_from_writeback = stage3_flush_snd ;
  assign WILL_FIRE_RL_flush_from_writeback = stage3_flush_snd ;

  // rule RL_empty_txe_to_fifof_connect_ena_data
  assign CAN_FIRE_RL_empty_txe_to_fifof_connect_ena_data =
	     fifof_FULL_N && stage1_tx_stage1_operands_enq_ena ;
  assign WILL_FIRE_RL_empty_txe_to_fifof_connect_ena_data =
	     CAN_FIRE_RL_empty_txe_to_fifof_connect_ena_data ;

  // rule RL_empty_txe_to_fifof_1_connect_ena_data
  assign CAN_FIRE_RL_empty_txe_to_fifof_1_connect_ena_data =
	     fifof_1_FULL_N && stage1_tx_stage1_control_enq_ena ;
  assign WILL_FIRE_RL_empty_txe_to_fifof_1_connect_ena_data =
	     CAN_FIRE_RL_empty_txe_to_fifof_1_connect_ena_data ;

  // rule RL_empty_txe_to_fifof_2_connect_ena_data
  assign CAN_FIRE_RL_empty_txe_to_fifof_2_connect_ena_data =
	     fifof_2_FULL_N && stage1_tx_stage1_meta_enq_ena ;
  assign WILL_FIRE_RL_empty_txe_to_fifof_2_connect_ena_data =
	     CAN_FIRE_RL_empty_txe_to_fifof_2_connect_ena_data ;

  // rule RL_empty_txe_to_fifof_3_connect_ena_data
  assign CAN_FIRE_RL_empty_txe_to_fifof_3_connect_ena_data =
	     fifof_3_FULL_N && stage2_tx_stage3_common_enq_ena ;
  assign WILL_FIRE_RL_empty_txe_to_fifof_3_connect_ena_data =
	     CAN_FIRE_RL_empty_txe_to_fifof_3_connect_ena_data ;

  // rule RL_empty_txe_to_fifof_4_connect_ena_data
  assign CAN_FIRE_RL_empty_txe_to_fifof_4_connect_ena_data =
	     fifof_4_FULL_N && stage2_tx_stage3_type_enq_ena ;
  assign WILL_FIRE_RL_empty_txe_to_fifof_4_connect_ena_data =
	     CAN_FIRE_RL_empty_txe_to_fifof_4_connect_ena_data ;

  // submodule fifof
  assign fifof_D_IN = stage1_tx_stage1_operands_enq_data ;
  assign fifof_ENQ = CAN_FIRE_RL_empty_txe_to_fifof_connect_ena_data ;
  assign fifof_DEQ = CAN_FIRE_RL_empty_fifof_to_rxe_connect_ena ;
  assign fifof_CLR = 1'b0 ;

  // submodule fifof_1
  assign fifof_1_D_IN = stage1_tx_stage1_control_enq_data ;
  assign fifof_1_ENQ = CAN_FIRE_RL_empty_txe_to_fifof_1_connect_ena_data ;
  assign fifof_1_DEQ = CAN_FIRE_RL_empty_fifof_to_rxe_1_connect_ena ;
  assign fifof_1_CLR = 1'b0 ;

  // submodule fifof_2
  assign fifof_2_D_IN = stage1_tx_stage1_meta_enq_data ;
  assign fifof_2_ENQ = CAN_FIRE_RL_empty_txe_to_fifof_2_connect_ena_data ;
  assign fifof_2_DEQ = CAN_FIRE_RL_empty_fifof_to_rxe_2_connect_ena ;
  assign fifof_2_CLR = 1'b0 ;

  // submodule fifof_3
  assign fifof_3_D_IN = stage2_tx_stage3_common_enq_data ;
  assign fifof_3_ENQ = CAN_FIRE_RL_empty_txe_to_fifof_3_connect_ena_data ;
  assign fifof_3_DEQ = CAN_FIRE_RL_empty_fifof_to_rxe_3_connect_ena ;
  assign fifof_3_CLR = 1'b0 ;

  // submodule fifof_4
  assign fifof_4_D_IN = stage2_tx_stage3_type_enq_data ;
  assign fifof_4_ENQ = CAN_FIRE_RL_empty_txe_to_fifof_4_connect_ena_data ;
  assign fifof_4_DEQ = CAN_FIRE_RL_empty_fifof_to_rxe_4_connect_ena ;
  assign fifof_4_CLR = 1'b0 ;

  // submodule stage1
  assign stage1_commit_rd_put = stage3_commit_rd_get ;
  assign stage1_inst_response_put = inst_response_put ;
  assign stage1_ma_csr_decode_c = stage3_mv_csr_decode ;
  assign stage1_ma_csr_misa_c_c = stage3_mv_csr_misa_c ;
  assign stage1_ma_debug_status_status =
	     { ma_debugger_available_avail,
	       stage3_mv_core_is_halted,
	       stage3_mv_step_is_set,
	       stage3_mv_step_ie,
	       stage3_mv_core_debugenable } ;
  assign stage1_ma_flush_newpc =
	     stage3_flush_snd ? stage3_flush_fst : stage2_mv_redirection_fst ;
  assign stage1_ma_interrupt_i = stage3_mv_interrupt ;
  assign stage1_mav_debug_access_gprs_cmd = mav_debug_access_gprs_cmd ;
  assign stage1_tx_stage1_control_enq_rdy_b = fifof_1_FULL_N ;
  assign stage1_tx_stage1_control_notFull_b = fifof_1_FULL_N ;
  assign stage1_tx_stage1_meta_enq_rdy_b = fifof_2_FULL_N ;
  assign stage1_tx_stage1_meta_notFull_b = fifof_2_FULL_N ;
  assign stage1_tx_stage1_operands_enq_rdy_b = fifof_FULL_N ;
  assign stage1_tx_stage1_operands_notFull_b = fifof_FULL_N ;
  assign stage1_EN_inst_request_get = EN_inst_request_get ;
  assign stage1_EN_inst_response_put = EN_inst_response_put ;
  assign stage1_EN_commit_rd_put = CAN_FIRE_RL_mkConnectionGetPut ;
  assign stage1_EN_ma_flush = CAN_FIRE_RL_gen_new_pc ;
  assign stage1_EN_ma_update_eEpoch = stage2_mv_redirection_snd ;
  assign stage1_EN_ma_update_wEpoch = stage3_flush_snd ;
  assign stage1_EN_mav_debug_access_gprs = EN_mav_debug_access_gprs ;

  // submodule stage2
  assign stage2_ma_csr_misa_c_c = stage3_mv_csr_misa_c ;
  assign stage2_operand_fwding_put = stage3_operand_fwding_get ;
  assign stage2_rx_stage1_control_first_deq_rdy_b = fifof_1_EMPTY_N ;
  assign stage2_rx_stage1_control_first_x = fifof_1_D_OUT ;
  assign stage2_rx_stage1_control_notEmpty_b = fifof_1_EMPTY_N ;
  assign stage2_rx_stage1_meta_first_deq_rdy_b = fifof_2_EMPTY_N ;
  assign stage2_rx_stage1_meta_first_x = fifof_2_D_OUT ;
  assign stage2_rx_stage1_meta_notEmpty_b = fifof_2_EMPTY_N ;
  assign stage2_rx_stage1_operands_first_deq_rdy_b = fifof_EMPTY_N ;
  assign stage2_rx_stage1_operands_first_x = fifof_D_OUT ;
  assign stage2_rx_stage1_operands_notEmpty_b = fifof_EMPTY_N ;
  assign stage2_tx_stage3_common_enq_rdy_b = fifof_3_FULL_N ;
  assign stage2_tx_stage3_common_notFull_b = fifof_3_FULL_N ;
  assign stage2_tx_stage3_type_enq_rdy_b = fifof_4_FULL_N ;
  assign stage2_tx_stage3_type_notFull_b = fifof_4_FULL_N ;
  assign stage2_EN_memory_request_get = EN_memory_request_get ;
  assign stage2_EN_operand_fwding_put = 1'd1 ;
  assign stage2_EN_ma_update_wEpoch = stage3_flush_snd ;
  assign stage2_EN_ma_csr_misa_c = 1'd1 ;

  // submodule stage3
  assign stage3_clint_msip_intrpt = clint_msip_intrpt ;
  assign stage3_clint_mtime_c_mtime = clint_mtime_c_mtime ;
  assign stage3_clint_mtip_intrpt = clint_mtip_intrpt ;
  assign stage3_ext_interrupt_i = ext_interrupt_intrpt ;
  assign stage3_ma_debug_halt_request_ip = ma_debug_halt_request_ip ;
  assign stage3_ma_debug_resume_request_ip = ma_debug_resume_request_ip ;
  assign stage3_mav_debug_access_csrs_cmd = mav_debug_access_csrs_cmd ;
  assign stage3_memory_response_put = memory_response_put ;
  assign stage3_rx_stage3_common_first_deq_rdy_b = fifof_3_EMPTY_N ;
  assign stage3_rx_stage3_common_first_x = fifof_3_D_OUT ;
  assign stage3_rx_stage3_common_notEmpty_b = fifof_3_EMPTY_N ;
  assign stage3_rx_stage3_type_first_deq_rdy_b = fifof_4_EMPTY_N ;
  assign stage3_rx_stage3_type_first_x = fifof_4_D_OUT ;
  assign stage3_rx_stage3_type_notEmpty_b = fifof_4_EMPTY_N ;
  assign stage3_EN_memory_response_put = EN_memory_response_put ;
  assign stage3_EN_commit_rd_get = CAN_FIRE_RL_mkConnectionGetPut ;
  assign stage3_EN_operand_fwding_get = 1'd1 ;
  assign stage3_EN_clint_msip = EN_clint_msip ;
  assign stage3_EN_clint_mtip = EN_clint_mtip ;
  assign stage3_EN_clint_mtime = EN_clint_mtime ;
  assign stage3_EN_ext_interrupt = EN_ext_interrupt ;
  assign stage3_EN_mav_debug_access_csrs = EN_mav_debug_access_csrs ;
  assign stage3_EN_ma_debug_halt_request = EN_ma_debug_halt_request ;
  assign stage3_EN_ma_debug_resume_request = EN_ma_debug_resume_request ;
endmodule  // mkriscv

