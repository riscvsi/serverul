//
// Generated by Bluespec Compiler, version 2022.01-36-ga6304315 (build a6304315)
//
// On Tue Oct  4 10:37:11 CEST 2022
//
//
// Ports:
// Name                         I/O  size props
// system_instruction             O    65
// RDY_system_instruction         O     1 const
// mv_csr_decode                  O   118
// RDY_mv_csr_decode              O     1 const
// take_trap                      O    32
// RDY_take_trap                  O     1 const
// RDY_clint_msip                 O     1 const
// RDY_clint_mtip                 O     1 const
// RDY_clint_mtime                O     1 const
// RDY_incr_minstret              O     1 const
// RDY_ext_interrupt              O     1 const
// mv_csr_misa_c                  O     1 const
// RDY_mv_csr_misa_c              O     1 const
// mv_interrupt                   O     1
// mv_curr_priv                   O     2 reg
// RDY_mv_curr_priv               O     1 const
// csr_mstatus                    O    32
// RDY_csr_mstatus                O     1 const
// mav_debug_access_csrs          O    32
// RDY_mav_debug_access_csrs      O     1 const
// RDY_ma_debug_halt_request      O     1 const
// RDY_ma_debug_resume_request    O     1 const
// mv_core_is_halted              O     1 reg
// RDY_mv_core_is_halted          O     1 const
// mv_step_is_set                 O     1 reg
// RDY_mv_step_is_set             O     1 const
// mv_step_ie                     O     1 reg
// RDY_mv_step_ie                 O     1 const
// mv_core_debugenable            O     1 reg
// RDY_mv_core_debugenable        O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// system_instruction_csr_address  I    12
// system_instruction_op1         I    32
// system_instruction_funct3      I     3
// system_instruction_lpc         I     2
// take_trap_type_cause           I     6
// take_trap_pc                   I    32
// take_trap_badaddr              I    32
// clint_msip_intrpt              I     1 reg
// clint_mtip_intrpt              I     1 reg
// clint_mtime_c_mtime            I    64 reg
// ext_interrupt_ex_i             I     1 reg
// mav_debug_access_csrs_cmd      I    47
// ma_debug_halt_request_ip       I     1 reg
// ma_debug_resume_request_ip     I     1 reg
// EN_clint_msip                  I     1
// EN_clint_mtip                  I     1
// EN_clint_mtime                 I     1
// EN_incr_minstret               I     1
// EN_ext_interrupt               I     1
// EN_ma_debug_halt_request       I     1
// EN_ma_debug_resume_request     I     1
// EN_system_instruction          I     1
// EN_take_trap                   I     1
// EN_mav_debug_access_csrs       I     1
//
// Combinational paths from inputs to outputs:
//   (system_instruction_csr_address,
//    system_instruction_funct3,
//    mav_debug_access_csrs_cmd,
//    EN_system_instruction,
//    EN_mav_debug_access_csrs) -> system_instruction
//   (system_instruction_csr_address,
//    mav_debug_access_csrs_cmd,
//    EN_system_instruction,
//    EN_mav_debug_access_csrs) -> mav_debug_access_csrs
//   (take_trap_type_cause, EN_take_trap) -> take_trap
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkcsr(CLK,
	     RST_N,

	     system_instruction_csr_address,
	     system_instruction_op1,
	     system_instruction_funct3,
	     system_instruction_lpc,
	     EN_system_instruction,
	     system_instruction,
	     RDY_system_instruction,

	     mv_csr_decode,
	     RDY_mv_csr_decode,

	     take_trap_type_cause,
	     take_trap_pc,
	     take_trap_badaddr,
	     EN_take_trap,
	     take_trap,
	     RDY_take_trap,

	     clint_msip_intrpt,
	     EN_clint_msip,
	     RDY_clint_msip,

	     clint_mtip_intrpt,
	     EN_clint_mtip,
	     RDY_clint_mtip,

	     clint_mtime_c_mtime,
	     EN_clint_mtime,
	     RDY_clint_mtime,

	     EN_incr_minstret,
	     RDY_incr_minstret,

	     ext_interrupt_ex_i,
	     EN_ext_interrupt,
	     RDY_ext_interrupt,

	     mv_csr_misa_c,
	     RDY_mv_csr_misa_c,

	     mv_interrupt,

	     mv_curr_priv,
	     RDY_mv_curr_priv,

	     csr_mstatus,
	     RDY_csr_mstatus,

	     mav_debug_access_csrs_cmd,
	     EN_mav_debug_access_csrs,
	     mav_debug_access_csrs,
	     RDY_mav_debug_access_csrs,

	     ma_debug_halt_request_ip,
	     EN_ma_debug_halt_request,
	     RDY_ma_debug_halt_request,

	     ma_debug_resume_request_ip,
	     EN_ma_debug_resume_request,
	     RDY_ma_debug_resume_request,

	     mv_core_is_halted,
	     RDY_mv_core_is_halted,

	     mv_step_is_set,
	     RDY_mv_step_is_set,

	     mv_step_ie,
	     RDY_mv_step_ie,

	     mv_core_debugenable,
	     RDY_mv_core_debugenable);
  input  CLK;
  input  RST_N;

  // actionvalue method system_instruction
  input  [11 : 0] system_instruction_csr_address;
  input  [31 : 0] system_instruction_op1;
  input  [2 : 0] system_instruction_funct3;
  input  [1 : 0] system_instruction_lpc;
  input  EN_system_instruction;
  output [64 : 0] system_instruction;
  output RDY_system_instruction;

  // value method mv_csr_decode
  output [117 : 0] mv_csr_decode;
  output RDY_mv_csr_decode;

  // actionvalue method take_trap
  input  [5 : 0] take_trap_type_cause;
  input  [31 : 0] take_trap_pc;
  input  [31 : 0] take_trap_badaddr;
  input  EN_take_trap;
  output [31 : 0] take_trap;
  output RDY_take_trap;

  // action method clint_msip
  input  clint_msip_intrpt;
  input  EN_clint_msip;
  output RDY_clint_msip;

  // action method clint_mtip
  input  clint_mtip_intrpt;
  input  EN_clint_mtip;
  output RDY_clint_mtip;

  // action method clint_mtime
  input  [63 : 0] clint_mtime_c_mtime;
  input  EN_clint_mtime;
  output RDY_clint_mtime;

  // action method incr_minstret
  input  EN_incr_minstret;
  output RDY_incr_minstret;

  // action method ext_interrupt
  input  ext_interrupt_ex_i;
  input  EN_ext_interrupt;
  output RDY_ext_interrupt;

  // value method mv_csr_misa_c
  output mv_csr_misa_c;
  output RDY_mv_csr_misa_c;

  // value method mv_interrupt
  output mv_interrupt;

  // value method mv_curr_priv
  output [1 : 0] mv_curr_priv;
  output RDY_mv_curr_priv;

  // value method csr_mstatus
  output [31 : 0] csr_mstatus;
  output RDY_csr_mstatus;

  // actionvalue method mav_debug_access_csrs
  input  [46 : 0] mav_debug_access_csrs_cmd;
  input  EN_mav_debug_access_csrs;
  output [31 : 0] mav_debug_access_csrs;
  output RDY_mav_debug_access_csrs;

  // action method ma_debug_halt_request
  input  ma_debug_halt_request_ip;
  input  EN_ma_debug_halt_request;
  output RDY_ma_debug_halt_request;

  // action method ma_debug_resume_request
  input  ma_debug_resume_request_ip;
  input  EN_ma_debug_resume_request;
  output RDY_ma_debug_resume_request;

  // value method mv_core_is_halted
  output mv_core_is_halted;
  output RDY_mv_core_is_halted;

  // value method mv_step_is_set
  output mv_step_is_set;
  output RDY_mv_step_is_set;

  // value method mv_step_ie
  output mv_step_ie;
  output RDY_mv_step_ie;

  // value method mv_core_debugenable
  output mv_core_debugenable;
  output RDY_mv_core_debugenable;

  // signals for module outputs
  wire [117 : 0] mv_csr_decode;
  wire [64 : 0] system_instruction;
  wire [31 : 0] csr_mstatus, mav_debug_access_csrs, take_trap;
  wire [1 : 0] mv_curr_priv;
  wire RDY_clint_msip,
       RDY_clint_mtime,
       RDY_clint_mtip,
       RDY_csr_mstatus,
       RDY_ext_interrupt,
       RDY_incr_minstret,
       RDY_ma_debug_halt_request,
       RDY_ma_debug_resume_request,
       RDY_mav_debug_access_csrs,
       RDY_mv_core_debugenable,
       RDY_mv_core_is_halted,
       RDY_mv_csr_decode,
       RDY_mv_csr_misa_c,
       RDY_mv_curr_priv,
       RDY_mv_step_ie,
       RDY_mv_step_is_set,
       RDY_system_instruction,
       RDY_take_trap,
       mv_core_debugenable,
       mv_core_is_halted,
       mv_csr_misa_c,
       mv_interrupt,
       mv_step_ie,
       mv_step_is_set;

  // ports of submodule csrfile
  wire [117 : 0] csrfile_mv_csr_decode;
  wire [63 : 0] csrfile_clint_mtime_c_mtime;
  wire [31 : 0] csrfile_csr_mstatus,
		csrfile_read_csr,
		csrfile_upd_on_ret,
		csrfile_upd_on_trap,
		csrfile_upd_on_trap_pc,
		csrfile_upd_on_trap_tval,
		csrfile_write_csr_word;
  wire [11 : 0] csrfile_read_csr_addr, csrfile_write_csr_addr;
  wire [5 : 0] csrfile_upd_on_trap_cause;
  wire [1 : 0] csrfile_mv_curr_priv, csrfile_write_csr_lpc;
  wire csrfile_EN_clint_msip,
       csrfile_EN_clint_mtime,
       csrfile_EN_clint_mtip,
       csrfile_EN_debug_halt_request,
       csrfile_EN_debug_resume_request,
       csrfile_EN_ext_interrupt,
       csrfile_EN_incr_minstret,
       csrfile_EN_read_csr,
       csrfile_EN_upd_on_ret,
       csrfile_EN_upd_on_trap,
       csrfile_EN_write_csr,
       csrfile_clint_msip_intrpt,
       csrfile_clint_mtip_intrpt,
       csrfile_core_debugenable,
       csrfile_core_is_halted,
       csrfile_debug_halt_request_ip,
       csrfile_debug_resume_request_ip,
       csrfile_ext_interrupt_ex_i,
       csrfile_mv_csr_misa_c,
       csrfile_mv_interrupt,
       csrfile_step_ie,
       csrfile_step_is_set;

  // rule scheduling signals
  wire CAN_FIRE_clint_msip,
       CAN_FIRE_clint_mtime,
       CAN_FIRE_clint_mtip,
       CAN_FIRE_ext_interrupt,
       CAN_FIRE_incr_minstret,
       CAN_FIRE_ma_debug_halt_request,
       CAN_FIRE_ma_debug_resume_request,
       CAN_FIRE_mav_debug_access_csrs,
       CAN_FIRE_system_instruction,
       CAN_FIRE_take_trap,
       WILL_FIRE_clint_msip,
       WILL_FIRE_clint_mtime,
       WILL_FIRE_clint_mtip,
       WILL_FIRE_ext_interrupt,
       WILL_FIRE_incr_minstret,
       WILL_FIRE_ma_debug_halt_request,
       WILL_FIRE_ma_debug_resume_request,
       WILL_FIRE_mav_debug_access_csrs,
       WILL_FIRE_system_instruction,
       WILL_FIRE_take_trap;

  // inputs to muxes for submodule ports
  reg [31 : 0] MUX_csrfile_write_csr_2__VAL_2;
  wire MUX_csrfile_read_csr_1__SEL_1, MUX_csrfile_write_csr_1__SEL_1;

  // remaining internal signals
  reg [31 : 0] y_avValue_snd_fst__h627;
  wire [31 : 0] writecsrdata__h567, writecsrdata__h568, x__h580;

  // actionvalue method system_instruction
  assign system_instruction =
	     { system_instruction_funct3 == 3'd0 &&
	       (system_instruction_csr_address[11:8] == 4'h0 ||
		system_instruction_csr_address[11:8] == 4'h3),
	       (system_instruction_funct3 == 3'd0) ?
		 { y_avValue_snd_fst__h627, 32'd0 } :
		 { 32'd0, csrfile_read_csr } } ;
  assign RDY_system_instruction = 1'd1 ;
  assign CAN_FIRE_system_instruction = 1'd1 ;
  assign WILL_FIRE_system_instruction = EN_system_instruction ;

  // value method mv_csr_decode
  assign mv_csr_decode = csrfile_mv_csr_decode ;
  assign RDY_mv_csr_decode = 1'd1 ;

  // actionvalue method take_trap
  assign take_trap = csrfile_upd_on_trap ;
  assign RDY_take_trap = 1'd1 ;
  assign CAN_FIRE_take_trap = 1'd1 ;
  assign WILL_FIRE_take_trap = EN_take_trap ;

  // action method clint_msip
  assign RDY_clint_msip = 1'd1 ;
  assign CAN_FIRE_clint_msip = 1'd1 ;
  assign WILL_FIRE_clint_msip = EN_clint_msip ;

  // action method clint_mtip
  assign RDY_clint_mtip = 1'd1 ;
  assign CAN_FIRE_clint_mtip = 1'd1 ;
  assign WILL_FIRE_clint_mtip = EN_clint_mtip ;

  // action method clint_mtime
  assign RDY_clint_mtime = 1'd1 ;
  assign CAN_FIRE_clint_mtime = 1'd1 ;
  assign WILL_FIRE_clint_mtime = EN_clint_mtime ;

  // action method incr_minstret
  assign RDY_incr_minstret = 1'd1 ;
  assign CAN_FIRE_incr_minstret = 1'd1 ;
  assign WILL_FIRE_incr_minstret = EN_incr_minstret ;

  // action method ext_interrupt
  assign RDY_ext_interrupt = 1'd1 ;
  assign CAN_FIRE_ext_interrupt = 1'd1 ;
  assign WILL_FIRE_ext_interrupt = EN_ext_interrupt ;

  // value method mv_csr_misa_c
  assign mv_csr_misa_c = csrfile_mv_csr_misa_c ;
  assign RDY_mv_csr_misa_c = 1'd1 ;

  // value method mv_interrupt
  assign mv_interrupt = csrfile_mv_interrupt ;

  // value method mv_curr_priv
  assign mv_curr_priv = csrfile_mv_curr_priv ;
  assign RDY_mv_curr_priv = 1'd1 ;

  // value method csr_mstatus
  assign csr_mstatus = csrfile_csr_mstatus ;
  assign RDY_csr_mstatus = 1'd1 ;

  // actionvalue method mav_debug_access_csrs
  assign mav_debug_access_csrs =
	     mav_debug_access_csrs_cmd[46] ? 32'd0 : csrfile_read_csr ;
  assign RDY_mav_debug_access_csrs = 1'd1 ;
  assign CAN_FIRE_mav_debug_access_csrs = 1'd1 ;
  assign WILL_FIRE_mav_debug_access_csrs = EN_mav_debug_access_csrs ;

  // action method ma_debug_halt_request
  assign RDY_ma_debug_halt_request = 1'd1 ;
  assign CAN_FIRE_ma_debug_halt_request = 1'd1 ;
  assign WILL_FIRE_ma_debug_halt_request = EN_ma_debug_halt_request ;

  // action method ma_debug_resume_request
  assign RDY_ma_debug_resume_request = 1'd1 ;
  assign CAN_FIRE_ma_debug_resume_request = 1'd1 ;
  assign WILL_FIRE_ma_debug_resume_request = EN_ma_debug_resume_request ;

  // value method mv_core_is_halted
  assign mv_core_is_halted = csrfile_core_is_halted ;
  assign RDY_mv_core_is_halted = 1'd1 ;

  // value method mv_step_is_set
  assign mv_step_is_set = csrfile_step_is_set ;
  assign RDY_mv_step_is_set = 1'd1 ;

  // value method mv_step_ie
  assign mv_step_ie = csrfile_step_ie ;
  assign RDY_mv_step_ie = 1'd1 ;

  // value method mv_core_debugenable
  assign mv_core_debugenable = csrfile_core_debugenable ;
  assign RDY_mv_core_debugenable = 1'd1 ;

  // submodule csrfile
  mkcsrfile csrfile(.CLK(CLK),
		    .RST_N(RST_N),
		    .clint_msip_intrpt(csrfile_clint_msip_intrpt),
		    .clint_mtime_c_mtime(csrfile_clint_mtime_c_mtime),
		    .clint_mtip_intrpt(csrfile_clint_mtip_intrpt),
		    .debug_halt_request_ip(csrfile_debug_halt_request_ip),
		    .debug_resume_request_ip(csrfile_debug_resume_request_ip),
		    .ext_interrupt_ex_i(csrfile_ext_interrupt_ex_i),
		    .read_csr_addr(csrfile_read_csr_addr),
		    .upd_on_trap_cause(csrfile_upd_on_trap_cause),
		    .upd_on_trap_pc(csrfile_upd_on_trap_pc),
		    .upd_on_trap_tval(csrfile_upd_on_trap_tval),
		    .write_csr_addr(csrfile_write_csr_addr),
		    .write_csr_lpc(csrfile_write_csr_lpc),
		    .write_csr_word(csrfile_write_csr_word),
		    .EN_read_csr(csrfile_EN_read_csr),
		    .EN_write_csr(csrfile_EN_write_csr),
		    .EN_upd_on_ret(csrfile_EN_upd_on_ret),
		    .EN_upd_on_trap(csrfile_EN_upd_on_trap),
		    .EN_incr_minstret(csrfile_EN_incr_minstret),
		    .EN_clint_msip(csrfile_EN_clint_msip),
		    .EN_clint_mtip(csrfile_EN_clint_mtip),
		    .EN_clint_mtime(csrfile_EN_clint_mtime),
		    .EN_ext_interrupt(csrfile_EN_ext_interrupt),
		    .EN_debug_halt_request(csrfile_EN_debug_halt_request),
		    .EN_debug_resume_request(csrfile_EN_debug_resume_request),
		    .read_csr(csrfile_read_csr),
		    .RDY_read_csr(),
		    .RDY_write_csr(),
		    .upd_on_ret(csrfile_upd_on_ret),
		    .RDY_upd_on_ret(),
		    .upd_on_trap(csrfile_upd_on_trap),
		    .RDY_upd_on_trap(),
		    .RDY_incr_minstret(),
		    .mv_csr_decode(csrfile_mv_csr_decode),
		    .RDY_mv_csr_decode(),
		    .mv_csr_misa_c(csrfile_mv_csr_misa_c),
		    .RDY_mv_csr_misa_c(),
		    .mv_curr_priv(csrfile_mv_curr_priv),
		    .RDY_mv_curr_priv(),
		    .csr_mstatus(csrfile_csr_mstatus),
		    .RDY_csr_mstatus(),
		    .RDY_clint_msip(),
		    .RDY_clint_mtip(),
		    .RDY_clint_mtime(),
		    .RDY_ext_interrupt(),
		    .mv_interrupt(csrfile_mv_interrupt),
		    .RDY_debug_halt_request(),
		    .RDY_debug_resume_request(),
		    .core_is_halted(csrfile_core_is_halted),
		    .RDY_core_is_halted(),
		    .step_is_set(csrfile_step_is_set),
		    .RDY_step_is_set(),
		    .step_ie(csrfile_step_ie),
		    .RDY_step_ie(),
		    .core_debugenable(csrfile_core_debugenable),
		    .RDY_core_debugenable());

  // inputs to muxes for submodule ports
  assign MUX_csrfile_read_csr_1__SEL_1 =
	     EN_mav_debug_access_csrs && !mav_debug_access_csrs_cmd[46] ;
  assign MUX_csrfile_write_csr_1__SEL_1 =
	     EN_mav_debug_access_csrs && mav_debug_access_csrs_cmd[46] ;
  always@(system_instruction_funct3 or
	  writecsrdata__h568 or system_instruction_op1 or writecsrdata__h567)
  begin
    case (system_instruction_funct3[1:0])
      2'd1: MUX_csrfile_write_csr_2__VAL_2 = system_instruction_op1;
      2'd2: MUX_csrfile_write_csr_2__VAL_2 = writecsrdata__h567;
      default: MUX_csrfile_write_csr_2__VAL_2 = writecsrdata__h568;
    endcase
  end

  // submodule csrfile
  assign csrfile_clint_msip_intrpt = clint_msip_intrpt ;
  assign csrfile_clint_mtime_c_mtime = clint_mtime_c_mtime ;
  assign csrfile_clint_mtip_intrpt = clint_mtip_intrpt ;
  assign csrfile_debug_halt_request_ip = ma_debug_halt_request_ip ;
  assign csrfile_debug_resume_request_ip = ma_debug_resume_request_ip ;
  assign csrfile_ext_interrupt_ex_i = ext_interrupt_ex_i ;
  assign csrfile_read_csr_addr =
	     MUX_csrfile_read_csr_1__SEL_1 ?
	       mav_debug_access_csrs_cmd[43:32] :
	       system_instruction_csr_address ;
  assign csrfile_upd_on_trap_cause = take_trap_type_cause ;
  assign csrfile_upd_on_trap_pc = take_trap_pc ;
  assign csrfile_upd_on_trap_tval = take_trap_badaddr ;
  assign csrfile_write_csr_addr =
	     MUX_csrfile_write_csr_1__SEL_1 ?
	       mav_debug_access_csrs_cmd[43:32] :
	       system_instruction_csr_address ;
  assign csrfile_write_csr_lpc =
	     MUX_csrfile_write_csr_1__SEL_1 ? 2'd0 : system_instruction_lpc ;
  assign csrfile_write_csr_word =
	     MUX_csrfile_write_csr_1__SEL_1 ?
	       mav_debug_access_csrs_cmd[31:0] :
	       MUX_csrfile_write_csr_2__VAL_2 ;
  assign csrfile_EN_read_csr =
	     EN_mav_debug_access_csrs && !mav_debug_access_csrs_cmd[46] ||
	     EN_system_instruction ;
  assign csrfile_EN_write_csr =
	     EN_mav_debug_access_csrs && mav_debug_access_csrs_cmd[46] ||
	     EN_system_instruction && system_instruction_funct3 != 3'd0 ;
  assign csrfile_EN_upd_on_ret =
	     EN_system_instruction && system_instruction_funct3 == 3'd0 &&
	     (system_instruction_csr_address[11:8] == 4'h0 ||
	      system_instruction_csr_address[11:8] == 4'h3) ;
  assign csrfile_EN_upd_on_trap = EN_take_trap ;
  assign csrfile_EN_incr_minstret = EN_incr_minstret ;
  assign csrfile_EN_clint_msip = EN_clint_msip ;
  assign csrfile_EN_clint_mtip = EN_clint_mtip ;
  assign csrfile_EN_clint_mtime = EN_clint_mtime ;
  assign csrfile_EN_ext_interrupt = EN_ext_interrupt ;
  assign csrfile_EN_debug_halt_request = EN_ma_debug_halt_request ;
  assign csrfile_EN_debug_resume_request = EN_ma_debug_resume_request ;

  // remaining internal signals
  assign writecsrdata__h567 = system_instruction_op1 | csrfile_read_csr ;
  assign writecsrdata__h568 = x__h580 & csrfile_read_csr ;
  assign x__h580 = ~system_instruction_op1 ;
  always@(system_instruction_csr_address or csrfile_upd_on_ret)
  begin
    case (system_instruction_csr_address[11:8])
      4'h0, 4'h3: y_avValue_snd_fst__h627 = csrfile_upd_on_ret;
      default: y_avValue_snd_fst__h627 = 32'd0;
    endcase
  end
endmodule  // mkcsr

