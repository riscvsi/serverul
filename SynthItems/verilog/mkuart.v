//
// Generated by Bluespec Compiler, version 2022.01-36-ga6304315 (build a6304315)
//
// On Tue Oct  4 10:37:16 CEST 2022
//
//
// Ports:
// Name                         I/O  size props
// slave_awready                  O     1 reg
// slave_wready                   O     1 reg
// slave_bvalid                   O     1 reg
// slave_bresp                    O     2 reg
// slave_arready                  O     1 reg
// slave_rvalid                   O     1 reg
// slave_rresp                    O     2 reg
// slave_rdata                    O    32 reg
// io_SOUT                        O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// slave_m_awvalid_awvalid        I     1
// slave_m_awvalid_awaddr         I    32 reg
// slave_m_awvalid_awsize         I     2 reg
// slave_m_awvalid_awprot         I     3 reg
// slave_m_wvalid_wvalid          I     1
// slave_m_wvalid_wdata           I    32 reg
// slave_m_wvalid_wstrb           I     4 reg
// slave_m_bready_bready          I     1
// slave_m_arvalid_arvalid        I     1
// slave_m_arvalid_araddr         I    32 reg
// slave_m_arvalid_arsize         I     2 reg
// slave_m_arvalid_arprot         I     3 reg
// slave_m_rready_rready          I     1
// io_SIN                         I     1 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkuart(CLK,
	      RST_N,

	      slave_m_awvalid_awvalid,
	      slave_m_awvalid_awaddr,
	      slave_m_awvalid_awsize,
	      slave_m_awvalid_awprot,

	      slave_awready,

	      slave_m_wvalid_wvalid,
	      slave_m_wvalid_wdata,
	      slave_m_wvalid_wstrb,

	      slave_wready,

	      slave_bvalid,

	      slave_bresp,

	      slave_m_bready_bready,

	      slave_m_arvalid_arvalid,
	      slave_m_arvalid_araddr,
	      slave_m_arvalid_arsize,
	      slave_m_arvalid_arprot,

	      slave_arready,

	      slave_rvalid,

	      slave_rresp,

	      slave_rdata,

	      slave_m_rready_rready,

	      io_SIN,

	      io_SOUT);
  input  CLK;
  input  RST_N;

  // action method slave_m_awvalid
  input  slave_m_awvalid_awvalid;
  input  [31 : 0] slave_m_awvalid_awaddr;
  input  [1 : 0] slave_m_awvalid_awsize;
  input  [2 : 0] slave_m_awvalid_awprot;

  // value method slave_m_awready
  output slave_awready;

  // action method slave_m_wvalid
  input  slave_m_wvalid_wvalid;
  input  [31 : 0] slave_m_wvalid_wdata;
  input  [3 : 0] slave_m_wvalid_wstrb;

  // value method slave_m_wready
  output slave_wready;

  // value method slave_m_bvalid
  output slave_bvalid;

  // value method slave_m_bresp
  output [1 : 0] slave_bresp;

  // value method slave_m_buser

  // action method slave_m_bready
  input  slave_m_bready_bready;

  // action method slave_m_arvalid
  input  slave_m_arvalid_arvalid;
  input  [31 : 0] slave_m_arvalid_araddr;
  input  [1 : 0] slave_m_arvalid_arsize;
  input  [2 : 0] slave_m_arvalid_arprot;

  // value method slave_m_arready
  output slave_arready;

  // value method slave_m_rvalid
  output slave_rvalid;

  // value method slave_m_rresp
  output [1 : 0] slave_rresp;

  // value method slave_m_rdata
  output [31 : 0] slave_rdata;

  // value method slave_m_ruser

  // action method slave_m_rready
  input  slave_m_rready_rready;

  // action method io_sin
  input  io_SIN;

  // value method io_sout
  output io_SOUT;

  // signals for module outputs
  wire [31 : 0] slave_rdata;
  wire [1 : 0] slave_bresp, slave_rresp;
  wire io_SOUT,
       slave_arready,
       slave_awready,
       slave_bvalid,
       slave_rvalid,
       slave_wready;

  // inlined wires
  wire user_ifc_uart_fifoRecv_r_deq_whas,
       user_ifc_uart_fifoXmit_r_enq_whas,
       user_ifc_uart_pwRecvCellCountReset_whas,
       user_ifc_uart_pwRecvEnableBitCount_whas,
       user_ifc_uart_pwRecvResetBitCount_whas,
       user_ifc_uart_pwXmitCellCountReset_whas,
       user_ifc_uart_pwXmitEnableBitCount_whas,
       user_ifc_uart_pwXmitLoadBuffer_whas;

  // register user_ifc_baud_value
  reg [15 : 0] user_ifc_baud_value;
  wire [15 : 0] user_ifc_baud_value_D_IN;
  wire user_ifc_baud_value_EN;

  // register user_ifc_uart_fifoRecv_countReg
  reg [4 : 0] user_ifc_uart_fifoRecv_countReg;
  wire [4 : 0] user_ifc_uart_fifoRecv_countReg_D_IN;
  wire user_ifc_uart_fifoRecv_countReg_EN;

  // register user_ifc_uart_fifoXmit_countReg
  reg [4 : 0] user_ifc_uart_fifoXmit_countReg;
  wire [4 : 0] user_ifc_uart_fifoXmit_countReg_D_IN;
  wire user_ifc_uart_fifoXmit_countReg_EN;

  // register user_ifc_uart_rRecvBitCount
  reg [3 : 0] user_ifc_uart_rRecvBitCount;
  wire [3 : 0] user_ifc_uart_rRecvBitCount_D_IN;
  wire user_ifc_uart_rRecvBitCount_EN;

  // register user_ifc_uart_rRecvCellCount
  reg [3 : 0] user_ifc_uart_rRecvCellCount;
  wire [3 : 0] user_ifc_uart_rRecvCellCount_D_IN;
  wire user_ifc_uart_rRecvCellCount_EN;

  // register user_ifc_uart_rRecvData
  reg user_ifc_uart_rRecvData;
  wire user_ifc_uart_rRecvData_D_IN, user_ifc_uart_rRecvData_EN;

  // register user_ifc_uart_rRecvParity
  reg user_ifc_uart_rRecvParity;
  wire user_ifc_uart_rRecvParity_D_IN, user_ifc_uart_rRecvParity_EN;

  // register user_ifc_uart_rRecvState
  reg [2 : 0] user_ifc_uart_rRecvState;
  reg [2 : 0] user_ifc_uart_rRecvState_D_IN;
  wire user_ifc_uart_rRecvState_EN;

  // register user_ifc_uart_rXmitBitCount
  reg [3 : 0] user_ifc_uart_rXmitBitCount;
  wire [3 : 0] user_ifc_uart_rXmitBitCount_D_IN;
  wire user_ifc_uart_rXmitBitCount_EN;

  // register user_ifc_uart_rXmitCellCount
  reg [3 : 0] user_ifc_uart_rXmitCellCount;
  wire [3 : 0] user_ifc_uart_rXmitCellCount_D_IN;
  wire user_ifc_uart_rXmitCellCount_EN;

  // register user_ifc_uart_rXmitDataOut
  reg user_ifc_uart_rXmitDataOut;
  reg user_ifc_uart_rXmitDataOut_D_IN;
  wire user_ifc_uart_rXmitDataOut_EN;

  // register user_ifc_uart_rXmitParity
  reg user_ifc_uart_rXmitParity;
  wire user_ifc_uart_rXmitParity_D_IN, user_ifc_uart_rXmitParity_EN;

  // register user_ifc_uart_rXmitState
  reg [2 : 0] user_ifc_uart_rXmitState;
  reg [2 : 0] user_ifc_uart_rXmitState_D_IN;
  wire user_ifc_uart_rXmitState_EN;

  // register user_ifc_uart_vrRecvBuffer_0
  reg user_ifc_uart_vrRecvBuffer_0;
  wire user_ifc_uart_vrRecvBuffer_0_D_IN, user_ifc_uart_vrRecvBuffer_0_EN;

  // register user_ifc_uart_vrRecvBuffer_1
  reg user_ifc_uart_vrRecvBuffer_1;
  wire user_ifc_uart_vrRecvBuffer_1_D_IN, user_ifc_uart_vrRecvBuffer_1_EN;

  // register user_ifc_uart_vrRecvBuffer_2
  reg user_ifc_uart_vrRecvBuffer_2;
  wire user_ifc_uart_vrRecvBuffer_2_D_IN, user_ifc_uart_vrRecvBuffer_2_EN;

  // register user_ifc_uart_vrRecvBuffer_3
  reg user_ifc_uart_vrRecvBuffer_3;
  wire user_ifc_uart_vrRecvBuffer_3_D_IN, user_ifc_uart_vrRecvBuffer_3_EN;

  // register user_ifc_uart_vrRecvBuffer_4
  reg user_ifc_uart_vrRecvBuffer_4;
  wire user_ifc_uart_vrRecvBuffer_4_D_IN, user_ifc_uart_vrRecvBuffer_4_EN;

  // register user_ifc_uart_vrRecvBuffer_5
  reg user_ifc_uart_vrRecvBuffer_5;
  wire user_ifc_uart_vrRecvBuffer_5_D_IN, user_ifc_uart_vrRecvBuffer_5_EN;

  // register user_ifc_uart_vrRecvBuffer_6
  reg user_ifc_uart_vrRecvBuffer_6;
  wire user_ifc_uart_vrRecvBuffer_6_D_IN, user_ifc_uart_vrRecvBuffer_6_EN;

  // register user_ifc_uart_vrRecvBuffer_7
  reg user_ifc_uart_vrRecvBuffer_7;
  wire user_ifc_uart_vrRecvBuffer_7_D_IN, user_ifc_uart_vrRecvBuffer_7_EN;

  // register user_ifc_uart_vrXmitBuffer_0
  reg user_ifc_uart_vrXmitBuffer_0;
  wire user_ifc_uart_vrXmitBuffer_0_D_IN, user_ifc_uart_vrXmitBuffer_0_EN;

  // register user_ifc_uart_vrXmitBuffer_1
  reg user_ifc_uart_vrXmitBuffer_1;
  wire user_ifc_uart_vrXmitBuffer_1_D_IN, user_ifc_uart_vrXmitBuffer_1_EN;

  // register user_ifc_uart_vrXmitBuffer_2
  reg user_ifc_uart_vrXmitBuffer_2;
  wire user_ifc_uart_vrXmitBuffer_2_D_IN, user_ifc_uart_vrXmitBuffer_2_EN;

  // register user_ifc_uart_vrXmitBuffer_3
  reg user_ifc_uart_vrXmitBuffer_3;
  wire user_ifc_uart_vrXmitBuffer_3_D_IN, user_ifc_uart_vrXmitBuffer_3_EN;

  // register user_ifc_uart_vrXmitBuffer_4
  reg user_ifc_uart_vrXmitBuffer_4;
  wire user_ifc_uart_vrXmitBuffer_4_D_IN, user_ifc_uart_vrXmitBuffer_4_EN;

  // register user_ifc_uart_vrXmitBuffer_5
  reg user_ifc_uart_vrXmitBuffer_5;
  wire user_ifc_uart_vrXmitBuffer_5_D_IN, user_ifc_uart_vrXmitBuffer_5_EN;

  // register user_ifc_uart_vrXmitBuffer_6
  reg user_ifc_uart_vrXmitBuffer_6;
  wire user_ifc_uart_vrXmitBuffer_6_D_IN, user_ifc_uart_vrXmitBuffer_6_EN;

  // register user_ifc_uart_vrXmitBuffer_7
  reg user_ifc_uart_vrXmitBuffer_7;
  wire user_ifc_uart_vrXmitBuffer_7_D_IN, user_ifc_uart_vrXmitBuffer_7_EN;

  // ports of submodule s_xactor_f_rd_addr
  wire [36 : 0] s_xactor_f_rd_addr_D_IN, s_xactor_f_rd_addr_D_OUT;
  wire s_xactor_f_rd_addr_CLR,
       s_xactor_f_rd_addr_DEQ,
       s_xactor_f_rd_addr_EMPTY_N,
       s_xactor_f_rd_addr_ENQ,
       s_xactor_f_rd_addr_FULL_N;

  // ports of submodule s_xactor_f_rd_data
  wire [33 : 0] s_xactor_f_rd_data_D_IN, s_xactor_f_rd_data_D_OUT;
  wire s_xactor_f_rd_data_CLR,
       s_xactor_f_rd_data_DEQ,
       s_xactor_f_rd_data_EMPTY_N,
       s_xactor_f_rd_data_ENQ,
       s_xactor_f_rd_data_FULL_N;

  // ports of submodule s_xactor_f_wr_addr
  wire [36 : 0] s_xactor_f_wr_addr_D_IN, s_xactor_f_wr_addr_D_OUT;
  wire s_xactor_f_wr_addr_CLR,
       s_xactor_f_wr_addr_DEQ,
       s_xactor_f_wr_addr_EMPTY_N,
       s_xactor_f_wr_addr_ENQ,
       s_xactor_f_wr_addr_FULL_N;

  // ports of submodule s_xactor_f_wr_data
  wire [35 : 0] s_xactor_f_wr_data_D_IN, s_xactor_f_wr_data_D_OUT;
  wire s_xactor_f_wr_data_CLR,
       s_xactor_f_wr_data_DEQ,
       s_xactor_f_wr_data_EMPTY_N,
       s_xactor_f_wr_data_ENQ,
       s_xactor_f_wr_data_FULL_N;

  // ports of submodule s_xactor_f_wr_resp
  wire [1 : 0] s_xactor_f_wr_resp_D_IN, s_xactor_f_wr_resp_D_OUT;
  wire s_xactor_f_wr_resp_CLR,
       s_xactor_f_wr_resp_DEQ,
       s_xactor_f_wr_resp_EMPTY_N,
       s_xactor_f_wr_resp_ENQ,
       s_xactor_f_wr_resp_FULL_N;

  // ports of submodule user_ifc_uart_baudGen_rBaudCounter
  wire [15 : 0] user_ifc_uart_baudGen_rBaudCounter_DATA_A,
		user_ifc_uart_baudGen_rBaudCounter_DATA_B,
		user_ifc_uart_baudGen_rBaudCounter_DATA_C,
		user_ifc_uart_baudGen_rBaudCounter_DATA_F,
		user_ifc_uart_baudGen_rBaudCounter_Q_OUT;
  wire user_ifc_uart_baudGen_rBaudCounter_ADDA,
       user_ifc_uart_baudGen_rBaudCounter_ADDB,
       user_ifc_uart_baudGen_rBaudCounter_SETC,
       user_ifc_uart_baudGen_rBaudCounter_SETF;

  // ports of submodule user_ifc_uart_baudGen_rBaudTickCounter
  wire [2 : 0] user_ifc_uart_baudGen_rBaudTickCounter_DATA_A,
	       user_ifc_uart_baudGen_rBaudTickCounter_DATA_B,
	       user_ifc_uart_baudGen_rBaudTickCounter_DATA_C,
	       user_ifc_uart_baudGen_rBaudTickCounter_DATA_F,
	       user_ifc_uart_baudGen_rBaudTickCounter_Q_OUT;
  wire user_ifc_uart_baudGen_rBaudTickCounter_ADDA,
       user_ifc_uart_baudGen_rBaudTickCounter_ADDB,
       user_ifc_uart_baudGen_rBaudTickCounter_SETC,
       user_ifc_uart_baudGen_rBaudTickCounter_SETF;

  // ports of submodule user_ifc_uart_fifoRecv
  wire [7 : 0] user_ifc_uart_fifoRecv_D_IN, user_ifc_uart_fifoRecv_D_OUT;
  wire user_ifc_uart_fifoRecv_CLR,
       user_ifc_uart_fifoRecv_DEQ,
       user_ifc_uart_fifoRecv_EMPTY_N,
       user_ifc_uart_fifoRecv_ENQ,
       user_ifc_uart_fifoRecv_FULL_N;

  // ports of submodule user_ifc_uart_fifoXmit
  wire [7 : 0] user_ifc_uart_fifoXmit_D_IN, user_ifc_uart_fifoXmit_D_OUT;
  wire user_ifc_uart_fifoXmit_CLR,
       user_ifc_uart_fifoXmit_DEQ,
       user_ifc_uart_fifoXmit_EMPTY_N,
       user_ifc_uart_fifoXmit_ENQ,
       user_ifc_uart_fifoXmit_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_capture_read_request,
       CAN_FIRE_RL_capture_write_request,
       CAN_FIRE_RL_user_ifc_capture_status,
       CAN_FIRE_RL_user_ifc_uart_baudGen_assert_2x_baud_tick,
       CAN_FIRE_RL_user_ifc_uart_baudGen_baud_count_wire,
       CAN_FIRE_RL_user_ifc_uart_baudGen_baud_tick_count_wire,
       CAN_FIRE_RL_user_ifc_uart_baudGen_count_baudtick_16x,
       CAN_FIRE_RL_user_ifc_uart_baud_generator_clock_enable,
       CAN_FIRE_RL_user_ifc_uart_fifoRecv__updateLevelCounter,
       CAN_FIRE_RL_user_ifc_uart_fifoXmit__updateLevelCounter,
       CAN_FIRE_RL_user_ifc_uart_receive_bit_cell_time_counter,
       CAN_FIRE_RL_user_ifc_uart_receive_bit_counter,
       CAN_FIRE_RL_user_ifc_uart_receive_buffer_shift,
       CAN_FIRE_RL_user_ifc_uart_receive_find_center_of_bit_cell,
       CAN_FIRE_RL_user_ifc_uart_receive_parity_bit,
       CAN_FIRE_RL_user_ifc_uart_receive_sample_pin,
       CAN_FIRE_RL_user_ifc_uart_receive_stop_first_bit,
       CAN_FIRE_RL_user_ifc_uart_receive_stop_last_bit,
       CAN_FIRE_RL_user_ifc_uart_receive_wait_bit_cell_time_for_sample,
       CAN_FIRE_RL_user_ifc_uart_receive_wait_for_start_bit,
       CAN_FIRE_RL_user_ifc_uart_transmit_bit_cell_time_counter,
       CAN_FIRE_RL_user_ifc_uart_transmit_bit_counter,
       CAN_FIRE_RL_user_ifc_uart_transmit_buffer_load,
       CAN_FIRE_RL_user_ifc_uart_transmit_buffer_shift,
       CAN_FIRE_RL_user_ifc_uart_transmit_send_parity_bit,
       CAN_FIRE_RL_user_ifc_uart_transmit_send_start_bit,
       CAN_FIRE_RL_user_ifc_uart_transmit_send_stop_bit,
       CAN_FIRE_RL_user_ifc_uart_transmit_send_stop_bit1_5,
       CAN_FIRE_RL_user_ifc_uart_transmit_send_stop_bit2,
       CAN_FIRE_RL_user_ifc_uart_transmit_shift_next_bit,
       CAN_FIRE_RL_user_ifc_uart_transmit_wait_1_bit_cell_time,
       CAN_FIRE_RL_user_ifc_uart_transmit_wait_for_start_command,
       CAN_FIRE_io_sin,
       CAN_FIRE_slave_m_arvalid,
       CAN_FIRE_slave_m_awvalid,
       CAN_FIRE_slave_m_bready,
       CAN_FIRE_slave_m_rready,
       CAN_FIRE_slave_m_wvalid,
       WILL_FIRE_RL_capture_read_request,
       WILL_FIRE_RL_capture_write_request,
       WILL_FIRE_RL_user_ifc_capture_status,
       WILL_FIRE_RL_user_ifc_uart_baudGen_assert_2x_baud_tick,
       WILL_FIRE_RL_user_ifc_uart_baudGen_baud_count_wire,
       WILL_FIRE_RL_user_ifc_uart_baudGen_baud_tick_count_wire,
       WILL_FIRE_RL_user_ifc_uart_baudGen_count_baudtick_16x,
       WILL_FIRE_RL_user_ifc_uart_baud_generator_clock_enable,
       WILL_FIRE_RL_user_ifc_uart_fifoRecv__updateLevelCounter,
       WILL_FIRE_RL_user_ifc_uart_fifoXmit__updateLevelCounter,
       WILL_FIRE_RL_user_ifc_uart_receive_bit_cell_time_counter,
       WILL_FIRE_RL_user_ifc_uart_receive_bit_counter,
       WILL_FIRE_RL_user_ifc_uart_receive_buffer_shift,
       WILL_FIRE_RL_user_ifc_uart_receive_find_center_of_bit_cell,
       WILL_FIRE_RL_user_ifc_uart_receive_parity_bit,
       WILL_FIRE_RL_user_ifc_uart_receive_sample_pin,
       WILL_FIRE_RL_user_ifc_uart_receive_stop_first_bit,
       WILL_FIRE_RL_user_ifc_uart_receive_stop_last_bit,
       WILL_FIRE_RL_user_ifc_uart_receive_wait_bit_cell_time_for_sample,
       WILL_FIRE_RL_user_ifc_uart_receive_wait_for_start_bit,
       WILL_FIRE_RL_user_ifc_uart_transmit_bit_cell_time_counter,
       WILL_FIRE_RL_user_ifc_uart_transmit_bit_counter,
       WILL_FIRE_RL_user_ifc_uart_transmit_buffer_load,
       WILL_FIRE_RL_user_ifc_uart_transmit_buffer_shift,
       WILL_FIRE_RL_user_ifc_uart_transmit_send_parity_bit,
       WILL_FIRE_RL_user_ifc_uart_transmit_send_start_bit,
       WILL_FIRE_RL_user_ifc_uart_transmit_send_stop_bit,
       WILL_FIRE_RL_user_ifc_uart_transmit_send_stop_bit1_5,
       WILL_FIRE_RL_user_ifc_uart_transmit_send_stop_bit2,
       WILL_FIRE_RL_user_ifc_uart_transmit_shift_next_bit,
       WILL_FIRE_RL_user_ifc_uart_transmit_wait_1_bit_cell_time,
       WILL_FIRE_RL_user_ifc_uart_transmit_wait_for_start_command,
       WILL_FIRE_io_sin,
       WILL_FIRE_slave_m_arvalid,
       WILL_FIRE_slave_m_awvalid,
       WILL_FIRE_slave_m_bready,
       WILL_FIRE_slave_m_rready,
       WILL_FIRE_slave_m_wvalid;

  // inputs to muxes for submodule ports
  reg [2 : 0] MUX_user_ifc_uart_rRecvState_write_1__VAL_3;
  wire [2 : 0] MUX_user_ifc_uart_rRecvState_write_1__VAL_1,
	       MUX_user_ifc_uart_rRecvState_write_1__VAL_2,
	       MUX_user_ifc_uart_rRecvState_write_1__VAL_4,
	       MUX_user_ifc_uart_rXmitState_write_1__VAL_1,
	       MUX_user_ifc_uart_rXmitState_write_1__VAL_2,
	       MUX_user_ifc_uart_rXmitState_write_1__VAL_3,
	       MUX_user_ifc_uart_rXmitState_write_1__VAL_4,
	       MUX_user_ifc_uart_rXmitState_write_1__VAL_5,
	       MUX_user_ifc_uart_rXmitState_write_1__VAL_6,
	       MUX_user_ifc_uart_rXmitState_write_1__VAL_7;
  wire MUX_user_ifc_uart_rRecvState_write_1__SEL_6,
       MUX_user_ifc_uart_rXmitDataOut_write_1__SEL_1,
       MUX_user_ifc_uart_rXmitDataOut_write_1__SEL_2,
       MUX_user_ifc_uart_rXmitDataOut_write_1__SEL_3;

  // remaining internal signals
  wire [31 : 0] IF_s_xactor_f_rd_addr_first__67_BITS_8_TO_5_68_ETC___d192,
		a__h11641,
		a__h11647,
		a__h11649;
  wire [3 : 0] x__h3462, x__h5166, x__h6922, x__h6948, x_wget__h11307;
  wire _dor2user_ifc_uart_pwXmitCellCountReset_EN_wset,
       user_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d30,
       z__h8405,
       z__h8412,
       z__h8419,
       z__h8426,
       z__h8433,
       z__h8440;

  // action method slave_m_awvalid
  assign CAN_FIRE_slave_m_awvalid = 1'd1 ;
  assign WILL_FIRE_slave_m_awvalid = 1'd1 ;

  // value method slave_m_awready
  assign slave_awready = s_xactor_f_wr_addr_FULL_N ;

  // action method slave_m_wvalid
  assign CAN_FIRE_slave_m_wvalid = 1'd1 ;
  assign WILL_FIRE_slave_m_wvalid = 1'd1 ;

  // value method slave_m_wready
  assign slave_wready = s_xactor_f_wr_data_FULL_N ;

  // value method slave_m_bvalid
  assign slave_bvalid = s_xactor_f_wr_resp_EMPTY_N ;

  // value method slave_m_bresp
  assign slave_bresp = s_xactor_f_wr_resp_D_OUT ;

  // action method slave_m_bready
  assign CAN_FIRE_slave_m_bready = 1'd1 ;
  assign WILL_FIRE_slave_m_bready = 1'd1 ;

  // action method slave_m_arvalid
  assign CAN_FIRE_slave_m_arvalid = 1'd1 ;
  assign WILL_FIRE_slave_m_arvalid = 1'd1 ;

  // value method slave_m_arready
  assign slave_arready = s_xactor_f_rd_addr_FULL_N ;

  // value method slave_m_rvalid
  assign slave_rvalid = s_xactor_f_rd_data_EMPTY_N ;

  // value method slave_m_rresp
  assign slave_rresp = s_xactor_f_rd_data_D_OUT[33:32] ;

  // value method slave_m_rdata
  assign slave_rdata = s_xactor_f_rd_data_D_OUT[31:0] ;

  // action method slave_m_rready
  assign CAN_FIRE_slave_m_rready = 1'd1 ;
  assign WILL_FIRE_slave_m_rready = 1'd1 ;

  // action method io_sin
  assign CAN_FIRE_io_sin = 1'd1 ;
  assign WILL_FIRE_io_sin = 1'd1 ;

  // value method io_sout
  assign io_SOUT = user_ifc_uart_rXmitDataOut ;

  // submodule s_xactor_f_rd_addr
  FIFO2 #(.width(32'd37), .guarded(1'd1)) s_xactor_f_rd_addr(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(s_xactor_f_rd_addr_D_IN),
							     .ENQ(s_xactor_f_rd_addr_ENQ),
							     .DEQ(s_xactor_f_rd_addr_DEQ),
							     .CLR(s_xactor_f_rd_addr_CLR),
							     .D_OUT(s_xactor_f_rd_addr_D_OUT),
							     .FULL_N(s_xactor_f_rd_addr_FULL_N),
							     .EMPTY_N(s_xactor_f_rd_addr_EMPTY_N));

  // submodule s_xactor_f_rd_data
  FIFO2 #(.width(32'd34), .guarded(1'd1)) s_xactor_f_rd_data(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(s_xactor_f_rd_data_D_IN),
							     .ENQ(s_xactor_f_rd_data_ENQ),
							     .DEQ(s_xactor_f_rd_data_DEQ),
							     .CLR(s_xactor_f_rd_data_CLR),
							     .D_OUT(s_xactor_f_rd_data_D_OUT),
							     .FULL_N(s_xactor_f_rd_data_FULL_N),
							     .EMPTY_N(s_xactor_f_rd_data_EMPTY_N));

  // submodule s_xactor_f_wr_addr
  FIFO2 #(.width(32'd37), .guarded(1'd1)) s_xactor_f_wr_addr(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(s_xactor_f_wr_addr_D_IN),
							     .ENQ(s_xactor_f_wr_addr_ENQ),
							     .DEQ(s_xactor_f_wr_addr_DEQ),
							     .CLR(s_xactor_f_wr_addr_CLR),
							     .D_OUT(s_xactor_f_wr_addr_D_OUT),
							     .FULL_N(s_xactor_f_wr_addr_FULL_N),
							     .EMPTY_N(s_xactor_f_wr_addr_EMPTY_N));

  // submodule s_xactor_f_wr_data
  FIFO2 #(.width(32'd36), .guarded(1'd1)) s_xactor_f_wr_data(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(s_xactor_f_wr_data_D_IN),
							     .ENQ(s_xactor_f_wr_data_ENQ),
							     .DEQ(s_xactor_f_wr_data_DEQ),
							     .CLR(s_xactor_f_wr_data_CLR),
							     .D_OUT(s_xactor_f_wr_data_D_OUT),
							     .FULL_N(s_xactor_f_wr_data_FULL_N),
							     .EMPTY_N(s_xactor_f_wr_data_EMPTY_N));

  // submodule s_xactor_f_wr_resp
  FIFO2 #(.width(32'd2), .guarded(1'd1)) s_xactor_f_wr_resp(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(s_xactor_f_wr_resp_D_IN),
							    .ENQ(s_xactor_f_wr_resp_ENQ),
							    .DEQ(s_xactor_f_wr_resp_DEQ),
							    .CLR(s_xactor_f_wr_resp_CLR),
							    .D_OUT(s_xactor_f_wr_resp_D_OUT),
							    .FULL_N(s_xactor_f_wr_resp_FULL_N),
							    .EMPTY_N(s_xactor_f_wr_resp_EMPTY_N));

  // submodule user_ifc_uart_baudGen_rBaudCounter
  Counter #(.width(32'd16),
	    .init(16'd0)) user_ifc_uart_baudGen_rBaudCounter(.CLK(CLK),
							     .RST(RST_N),
							     .DATA_A(user_ifc_uart_baudGen_rBaudCounter_DATA_A),
							     .DATA_B(user_ifc_uart_baudGen_rBaudCounter_DATA_B),
							     .DATA_C(user_ifc_uart_baudGen_rBaudCounter_DATA_C),
							     .DATA_F(user_ifc_uart_baudGen_rBaudCounter_DATA_F),
							     .ADDA(user_ifc_uart_baudGen_rBaudCounter_ADDA),
							     .ADDB(user_ifc_uart_baudGen_rBaudCounter_ADDB),
							     .SETC(user_ifc_uart_baudGen_rBaudCounter_SETC),
							     .SETF(user_ifc_uart_baudGen_rBaudCounter_SETF),
							     .Q_OUT(user_ifc_uart_baudGen_rBaudCounter_Q_OUT));

  // submodule user_ifc_uart_baudGen_rBaudTickCounter
  Counter #(.width(32'd3),
	    .init(3'd0)) user_ifc_uart_baudGen_rBaudTickCounter(.CLK(CLK),
								.RST(RST_N),
								.DATA_A(user_ifc_uart_baudGen_rBaudTickCounter_DATA_A),
								.DATA_B(user_ifc_uart_baudGen_rBaudTickCounter_DATA_B),
								.DATA_C(user_ifc_uart_baudGen_rBaudTickCounter_DATA_C),
								.DATA_F(user_ifc_uart_baudGen_rBaudTickCounter_DATA_F),
								.ADDA(user_ifc_uart_baudGen_rBaudTickCounter_ADDA),
								.ADDB(user_ifc_uart_baudGen_rBaudTickCounter_ADDB),
								.SETC(user_ifc_uart_baudGen_rBaudTickCounter_SETC),
								.SETF(user_ifc_uart_baudGen_rBaudTickCounter_SETF),
								.Q_OUT(user_ifc_uart_baudGen_rBaudTickCounter_Q_OUT));

  // submodule user_ifc_uart_fifoRecv
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(1'd1)) user_ifc_uart_fifoRecv(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(user_ifc_uart_fifoRecv_D_IN),
						     .ENQ(user_ifc_uart_fifoRecv_ENQ),
						     .DEQ(user_ifc_uart_fifoRecv_DEQ),
						     .CLR(user_ifc_uart_fifoRecv_CLR),
						     .D_OUT(user_ifc_uart_fifoRecv_D_OUT),
						     .FULL_N(user_ifc_uart_fifoRecv_FULL_N),
						     .EMPTY_N(user_ifc_uart_fifoRecv_EMPTY_N));

  // submodule user_ifc_uart_fifoXmit
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(1'd1)) user_ifc_uart_fifoXmit(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(user_ifc_uart_fifoXmit_D_IN),
						     .ENQ(user_ifc_uart_fifoXmit_ENQ),
						     .DEQ(user_ifc_uart_fifoXmit_DEQ),
						     .CLR(user_ifc_uart_fifoXmit_CLR),
						     .D_OUT(user_ifc_uart_fifoXmit_D_OUT),
						     .FULL_N(user_ifc_uart_fifoXmit_FULL_N),
						     .EMPTY_N(user_ifc_uart_fifoXmit_EMPTY_N));

  // rule RL_user_ifc_capture_status
  assign CAN_FIRE_RL_user_ifc_capture_status = 1'd1 ;
  assign WILL_FIRE_RL_user_ifc_capture_status = 1'd1 ;

  // rule RL_capture_read_request
  assign CAN_FIRE_RL_capture_read_request =
	     s_xactor_f_rd_addr_EMPTY_N && s_xactor_f_rd_data_FULL_N ;
  assign WILL_FIRE_RL_capture_read_request =
	     CAN_FIRE_RL_capture_read_request ;

  // rule RL_user_ifc_uart_baudGen_baud_count_wire
  assign CAN_FIRE_RL_user_ifc_uart_baudGen_baud_count_wire = 1'd1 ;
  assign WILL_FIRE_RL_user_ifc_uart_baudGen_baud_count_wire = 1'd1 ;

  // rule RL_user_ifc_uart_baud_generator_clock_enable
  assign CAN_FIRE_RL_user_ifc_uart_baud_generator_clock_enable = 1'd1 ;
  assign WILL_FIRE_RL_user_ifc_uart_baud_generator_clock_enable = 1'd1 ;

  // rule RL_user_ifc_uart_receive_wait_for_start_bit
  assign CAN_FIRE_RL_user_ifc_uart_receive_wait_for_start_bit =
	     user_ifc_uart_rRecvState == 3'd0 &&
	     !user_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d30 ;
  assign WILL_FIRE_RL_user_ifc_uart_receive_wait_for_start_bit =
	     CAN_FIRE_RL_user_ifc_uart_receive_wait_for_start_bit ;

  // rule RL_user_ifc_uart_receive_find_center_of_bit_cell
  assign CAN_FIRE_RL_user_ifc_uart_receive_find_center_of_bit_cell =
	     user_ifc_uart_rRecvState == 3'd1 &&
	     !user_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d30 ;
  assign WILL_FIRE_RL_user_ifc_uart_receive_find_center_of_bit_cell =
	     CAN_FIRE_RL_user_ifc_uart_receive_find_center_of_bit_cell ;

  // rule RL_user_ifc_uart_receive_wait_bit_cell_time_for_sample
  assign CAN_FIRE_RL_user_ifc_uart_receive_wait_bit_cell_time_for_sample =
	     user_ifc_uart_rRecvState == 3'd2 &&
	     user_ifc_uart_rRecvCellCount == 4'hF &&
	     !user_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d30 ;
  assign WILL_FIRE_RL_user_ifc_uart_receive_wait_bit_cell_time_for_sample =
	     CAN_FIRE_RL_user_ifc_uart_receive_wait_bit_cell_time_for_sample ;

  // rule RL_user_ifc_uart_receive_sample_pin
  assign CAN_FIRE_RL_user_ifc_uart_receive_sample_pin =
	     CAN_FIRE_RL_user_ifc_uart_receive_buffer_shift ;
  assign WILL_FIRE_RL_user_ifc_uart_receive_sample_pin =
	     CAN_FIRE_RL_user_ifc_uart_receive_buffer_shift ;

  // rule RL_user_ifc_uart_receive_parity_bit
  assign CAN_FIRE_RL_user_ifc_uart_receive_parity_bit =
	     user_ifc_uart_rRecvState == 3'd4 &&
	     !user_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d30 ;
  assign WILL_FIRE_RL_user_ifc_uart_receive_parity_bit =
	     CAN_FIRE_RL_user_ifc_uart_receive_parity_bit ;

  // rule RL_user_ifc_uart_receive_stop_first_bit
  assign CAN_FIRE_RL_user_ifc_uart_receive_stop_first_bit =
	     user_ifc_uart_rRecvState == 3'd5 &&
	     !user_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d30 ;
  assign WILL_FIRE_RL_user_ifc_uart_receive_stop_first_bit =
	     CAN_FIRE_RL_user_ifc_uart_receive_stop_first_bit ;

  // rule RL_user_ifc_uart_receive_bit_counter
  assign CAN_FIRE_RL_user_ifc_uart_receive_bit_counter = 1'd1 ;
  assign WILL_FIRE_RL_user_ifc_uart_receive_bit_counter = 1'd1 ;

  // rule RL_user_ifc_uart_receive_stop_last_bit
  assign CAN_FIRE_RL_user_ifc_uart_receive_stop_last_bit =
	     user_ifc_uart_rRecvState == 3'd6 &&
	     !user_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d30 ;
  assign WILL_FIRE_RL_user_ifc_uart_receive_stop_last_bit =
	     CAN_FIRE_RL_user_ifc_uart_receive_stop_last_bit ;

  // rule RL_user_ifc_uart_receive_bit_cell_time_counter
  assign CAN_FIRE_RL_user_ifc_uart_receive_bit_cell_time_counter =
	     CAN_FIRE_RL_user_ifc_uart_baudGen_count_baudtick_16x ;
  assign WILL_FIRE_RL_user_ifc_uart_receive_bit_cell_time_counter =
	     CAN_FIRE_RL_user_ifc_uart_baudGen_count_baudtick_16x ;

  // rule RL_user_ifc_uart_receive_buffer_shift
  assign CAN_FIRE_RL_user_ifc_uart_receive_buffer_shift =
	     user_ifc_uart_rRecvState == 3'd3 &&
	     !user_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d30 ;
  assign WILL_FIRE_RL_user_ifc_uart_receive_buffer_shift =
	     CAN_FIRE_RL_user_ifc_uart_receive_buffer_shift ;

  // rule RL_user_ifc_uart_transmit_wait_for_start_command
  assign CAN_FIRE_RL_user_ifc_uart_transmit_wait_for_start_command =
	     user_ifc_uart_rXmitState == 3'd0 &&
	     !user_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d30 ;
  assign WILL_FIRE_RL_user_ifc_uart_transmit_wait_for_start_command =
	     CAN_FIRE_RL_user_ifc_uart_transmit_wait_for_start_command ;

  // rule RL_capture_write_request
  assign CAN_FIRE_RL_capture_write_request =
	     s_xactor_f_wr_addr_EMPTY_N && s_xactor_f_wr_data_EMPTY_N &&
	     s_xactor_f_wr_resp_FULL_N ;
  assign WILL_FIRE_RL_capture_write_request =
	     CAN_FIRE_RL_capture_write_request ;

  // rule RL_user_ifc_uart_transmit_send_start_bit
  assign CAN_FIRE_RL_user_ifc_uart_transmit_send_start_bit =
	     user_ifc_uart_rXmitState == 3'd1 &&
	     !user_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d30 ;
  assign WILL_FIRE_RL_user_ifc_uart_transmit_send_start_bit =
	     CAN_FIRE_RL_user_ifc_uart_transmit_send_start_bit ;

  // rule RL_user_ifc_uart_transmit_wait_1_bit_cell_time
  assign CAN_FIRE_RL_user_ifc_uart_transmit_wait_1_bit_cell_time =
	     user_ifc_uart_rXmitState == 3'd2 &&
	     !user_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d30 ;
  assign WILL_FIRE_RL_user_ifc_uart_transmit_wait_1_bit_cell_time =
	     CAN_FIRE_RL_user_ifc_uart_transmit_wait_1_bit_cell_time ;

  // rule RL_user_ifc_uart_transmit_bit_counter
  assign CAN_FIRE_RL_user_ifc_uart_transmit_bit_counter = 1'd1 ;
  assign WILL_FIRE_RL_user_ifc_uart_transmit_bit_counter = 1'd1 ;

  // rule RL_user_ifc_uart_transmit_shift_next_bit
  assign CAN_FIRE_RL_user_ifc_uart_transmit_shift_next_bit =
	     user_ifc_uart_rXmitState == 3'd3 &&
	     !user_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d30 ;
  assign WILL_FIRE_RL_user_ifc_uart_transmit_shift_next_bit =
	     CAN_FIRE_RL_user_ifc_uart_transmit_shift_next_bit ;

  // rule RL_user_ifc_uart_transmit_buffer_load
  assign CAN_FIRE_RL_user_ifc_uart_transmit_buffer_load =
	     user_ifc_uart_fifoXmit_EMPTY_N &&
	     user_ifc_uart_pwXmitLoadBuffer_whas ;
  assign WILL_FIRE_RL_user_ifc_uart_transmit_buffer_load =
	     CAN_FIRE_RL_user_ifc_uart_transmit_buffer_load ;

  // rule RL_user_ifc_uart_transmit_buffer_shift
  assign CAN_FIRE_RL_user_ifc_uart_transmit_buffer_shift =
	     !user_ifc_uart_pwXmitLoadBuffer_whas &&
	     CAN_FIRE_RL_user_ifc_uart_transmit_shift_next_bit ;
  assign WILL_FIRE_RL_user_ifc_uart_transmit_buffer_shift =
	     CAN_FIRE_RL_user_ifc_uart_transmit_buffer_shift ;

  // rule RL_user_ifc_uart_transmit_send_parity_bit
  assign CAN_FIRE_RL_user_ifc_uart_transmit_send_parity_bit =
	     user_ifc_uart_rXmitState == 3'd7 &&
	     !user_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d30 ;
  assign WILL_FIRE_RL_user_ifc_uart_transmit_send_parity_bit =
	     CAN_FIRE_RL_user_ifc_uart_transmit_send_parity_bit ;

  // rule RL_user_ifc_uart_transmit_send_stop_bit
  assign CAN_FIRE_RL_user_ifc_uart_transmit_send_stop_bit =
	     user_ifc_uart_rXmitState == 3'd4 &&
	     !user_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d30 ;
  assign WILL_FIRE_RL_user_ifc_uart_transmit_send_stop_bit =
	     CAN_FIRE_RL_user_ifc_uart_transmit_send_stop_bit ;

  // rule RL_user_ifc_uart_transmit_send_stop_bit1_5
  assign CAN_FIRE_RL_user_ifc_uart_transmit_send_stop_bit1_5 =
	     user_ifc_uart_rXmitState == 3'd5 &&
	     !user_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d30 ;
  assign WILL_FIRE_RL_user_ifc_uart_transmit_send_stop_bit1_5 =
	     CAN_FIRE_RL_user_ifc_uart_transmit_send_stop_bit1_5 ;

  // rule RL_user_ifc_uart_transmit_send_stop_bit2
  assign CAN_FIRE_RL_user_ifc_uart_transmit_send_stop_bit2 =
	     user_ifc_uart_rXmitState == 3'd6 &&
	     !user_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d30 ;
  assign WILL_FIRE_RL_user_ifc_uart_transmit_send_stop_bit2 =
	     CAN_FIRE_RL_user_ifc_uart_transmit_send_stop_bit2 ;

  // rule RL_user_ifc_uart_transmit_bit_cell_time_counter
  assign CAN_FIRE_RL_user_ifc_uart_transmit_bit_cell_time_counter =
	     CAN_FIRE_RL_user_ifc_uart_baudGen_count_baudtick_16x ;
  assign WILL_FIRE_RL_user_ifc_uart_transmit_bit_cell_time_counter =
	     CAN_FIRE_RL_user_ifc_uart_baudGen_count_baudtick_16x ;

  // rule RL_user_ifc_uart_baudGen_baud_tick_count_wire
  assign CAN_FIRE_RL_user_ifc_uart_baudGen_baud_tick_count_wire = 1'd1 ;
  assign WILL_FIRE_RL_user_ifc_uart_baudGen_baud_tick_count_wire = 1'd1 ;

  // rule RL_user_ifc_uart_baudGen_assert_2x_baud_tick
  assign CAN_FIRE_RL_user_ifc_uart_baudGen_assert_2x_baud_tick =
	     user_ifc_uart_baudGen_rBaudTickCounter_Q_OUT == 3'd0 &&
	     !user_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d30 ;
  assign WILL_FIRE_RL_user_ifc_uart_baudGen_assert_2x_baud_tick =
	     CAN_FIRE_RL_user_ifc_uart_baudGen_assert_2x_baud_tick ;

  // rule RL_user_ifc_uart_baudGen_count_baudtick_16x
  assign CAN_FIRE_RL_user_ifc_uart_baudGen_count_baudtick_16x =
	     !user_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d30 ;
  assign WILL_FIRE_RL_user_ifc_uart_baudGen_count_baudtick_16x =
	     CAN_FIRE_RL_user_ifc_uart_baudGen_count_baudtick_16x ;

  // rule RL_user_ifc_uart_fifoRecv__updateLevelCounter
  assign CAN_FIRE_RL_user_ifc_uart_fifoRecv__updateLevelCounter =
	     CAN_FIRE_RL_user_ifc_uart_receive_stop_last_bit !=
	     user_ifc_uart_fifoRecv_r_deq_whas ;
  assign WILL_FIRE_RL_user_ifc_uart_fifoRecv__updateLevelCounter =
	     CAN_FIRE_RL_user_ifc_uart_fifoRecv__updateLevelCounter ;

  // rule RL_user_ifc_uart_fifoXmit__updateLevelCounter
  assign CAN_FIRE_RL_user_ifc_uart_fifoXmit__updateLevelCounter =
	     user_ifc_uart_fifoXmit_r_enq_whas !=
	     CAN_FIRE_RL_user_ifc_uart_transmit_buffer_load ;
  assign WILL_FIRE_RL_user_ifc_uart_fifoXmit__updateLevelCounter =
	     CAN_FIRE_RL_user_ifc_uart_fifoXmit__updateLevelCounter ;

  // inputs to muxes for submodule ports
  assign MUX_user_ifc_uart_rRecvState_write_1__SEL_6 =
	     WILL_FIRE_RL_user_ifc_uart_receive_parity_bit ||
	     WILL_FIRE_RL_user_ifc_uart_receive_sample_pin ;
  assign MUX_user_ifc_uart_rXmitDataOut_write_1__SEL_1 =
	     WILL_FIRE_RL_user_ifc_uart_transmit_shift_next_bit ||
	     WILL_FIRE_RL_user_ifc_uart_transmit_wait_1_bit_cell_time ;
  assign MUX_user_ifc_uart_rXmitDataOut_write_1__SEL_2 =
	     WILL_FIRE_RL_user_ifc_uart_transmit_send_parity_bit ||
	     WILL_FIRE_RL_user_ifc_uart_transmit_send_start_bit ;
  assign MUX_user_ifc_uart_rXmitDataOut_write_1__SEL_3 =
	     WILL_FIRE_RL_user_ifc_uart_transmit_send_stop_bit2 ||
	     WILL_FIRE_RL_user_ifc_uart_transmit_send_stop_bit1_5 ||
	     WILL_FIRE_RL_user_ifc_uart_transmit_send_stop_bit ||
	     WILL_FIRE_RL_user_ifc_uart_transmit_wait_for_start_command ;
  assign MUX_user_ifc_uart_rRecvState_write_1__VAL_1 =
	     user_ifc_uart_rRecvData ? 3'd0 : 3'd1 ;
  assign MUX_user_ifc_uart_rRecvState_write_1__VAL_2 =
	     (user_ifc_uart_rRecvCellCount == 4'h4) ?
	       (user_ifc_uart_rRecvData ? 3'd0 : 3'd2) :
	       3'd1 ;
  always@(user_ifc_uart_rRecvBitCount)
  begin
    case (user_ifc_uart_rRecvBitCount)
      4'd8, 4'd9, 4'd10: MUX_user_ifc_uart_rRecvState_write_1__VAL_3 = 3'd6;
      default: MUX_user_ifc_uart_rRecvState_write_1__VAL_3 = 3'd3;
    endcase
  end
  assign MUX_user_ifc_uart_rRecvState_write_1__VAL_4 =
	     user_ifc_uart_rRecvData ? 3'd2 : 3'd0 ;
  assign MUX_user_ifc_uart_rXmitState_write_1__VAL_1 =
	     user_ifc_uart_fifoXmit_EMPTY_N ? 3'd1 : 3'd0 ;
  assign MUX_user_ifc_uart_rXmitState_write_1__VAL_2 =
	     (user_ifc_uart_rXmitCellCount == 4'hF) ? 3'd2 : 3'd1 ;
  assign MUX_user_ifc_uart_rXmitState_write_1__VAL_3 =
	     (user_ifc_uart_rXmitCellCount == 4'hF) ?
	       ((user_ifc_uart_rXmitBitCount == 4'd7) ? 3'd4 : 3'd3) :
	       3'd2 ;
  assign MUX_user_ifc_uart_rXmitState_write_1__VAL_4 =
	     (user_ifc_uart_rXmitCellCount == 4'hF) ? 3'd4 : 3'd7 ;
  assign MUX_user_ifc_uart_rXmitState_write_1__VAL_5 =
	     (user_ifc_uart_rXmitCellCount == 4'hF) ? 3'd0 : 3'd4 ;
  assign MUX_user_ifc_uart_rXmitState_write_1__VAL_6 =
	     (user_ifc_uart_rXmitCellCount == 4'h7) ? 3'd0 : 3'd5 ;
  assign MUX_user_ifc_uart_rXmitState_write_1__VAL_7 =
	     (user_ifc_uart_rXmitCellCount == 4'hF) ? 3'd0 : 3'd6 ;

  // inlined wires
  assign user_ifc_uart_fifoRecv_r_deq_whas =
	     WILL_FIRE_RL_capture_read_request &&
	     s_xactor_f_rd_addr_D_OUT[8:5] == 4'h8 &&
	     s_xactor_f_rd_addr_D_OUT[1:0] == 2'd0 ;
  assign user_ifc_uart_pwRecvCellCountReset_whas =
	     WILL_FIRE_RL_user_ifc_uart_receive_find_center_of_bit_cell &&
	     user_ifc_uart_rRecvCellCount == 4'h4 ||
	     WILL_FIRE_RL_user_ifc_uart_receive_stop_last_bit ||
	     WILL_FIRE_RL_user_ifc_uart_receive_stop_first_bit ||
	     WILL_FIRE_RL_user_ifc_uart_receive_parity_bit ||
	     WILL_FIRE_RL_user_ifc_uart_receive_sample_pin ||
	     WILL_FIRE_RL_user_ifc_uart_receive_wait_bit_cell_time_for_sample ||
	     WILL_FIRE_RL_user_ifc_uart_receive_wait_for_start_bit ;
  assign user_ifc_uart_pwRecvResetBitCount_whas =
	     WILL_FIRE_RL_user_ifc_uart_receive_wait_for_start_bit &&
	     user_ifc_uart_rRecvData ;
  assign user_ifc_uart_pwRecvEnableBitCount_whas =
	     WILL_FIRE_RL_user_ifc_uart_receive_stop_first_bit ||
	     WILL_FIRE_RL_user_ifc_uart_receive_parity_bit ||
	     WILL_FIRE_RL_user_ifc_uart_receive_sample_pin ;
  assign user_ifc_uart_fifoXmit_r_enq_whas =
	     WILL_FIRE_RL_capture_write_request &&
	     s_xactor_f_wr_addr_D_OUT[8:5] == 4'h4 &&
	     s_xactor_f_wr_addr_D_OUT[1:0] == 2'd0 ;
  assign user_ifc_uart_pwXmitCellCountReset_whas =
	     WILL_FIRE_RL_user_ifc_uart_transmit_wait_for_start_command &&
	     user_ifc_uart_fifoXmit_EMPTY_N ||
	     _dor2user_ifc_uart_pwXmitCellCountReset_EN_wset &&
	     user_ifc_uart_rXmitCellCount == 4'hF ||
	     WILL_FIRE_RL_user_ifc_uart_transmit_send_stop_bit1_5 &&
	     user_ifc_uart_rXmitCellCount == 4'h7 ;
  assign user_ifc_uart_pwXmitEnableBitCount_whas =
	     WILL_FIRE_RL_user_ifc_uart_transmit_wait_1_bit_cell_time &&
	     user_ifc_uart_rXmitCellCount == 4'hF &&
	     user_ifc_uart_rXmitBitCount != 4'd7 ;
  assign user_ifc_uart_pwXmitLoadBuffer_whas =
	     WILL_FIRE_RL_user_ifc_uart_transmit_wait_for_start_command &&
	     user_ifc_uart_fifoXmit_EMPTY_N ;

  // register user_ifc_baud_value
  assign user_ifc_baud_value_D_IN = s_xactor_f_wr_data_D_OUT[19:4] ;
  assign user_ifc_baud_value_EN =
	     WILL_FIRE_RL_capture_write_request &&
	     s_xactor_f_wr_addr_D_OUT[8:5] == 4'h0 &&
	     s_xactor_f_wr_addr_D_OUT[1:0] == 2'd1 ;

  // register user_ifc_uart_fifoRecv_countReg
  assign user_ifc_uart_fifoRecv_countReg_D_IN =
	     CAN_FIRE_RL_user_ifc_uart_receive_stop_last_bit ?
	       user_ifc_uart_fifoRecv_countReg + 5'd1 :
	       user_ifc_uart_fifoRecv_countReg - 5'd1 ;
  assign user_ifc_uart_fifoRecv_countReg_EN =
	     CAN_FIRE_RL_user_ifc_uart_fifoRecv__updateLevelCounter ;

  // register user_ifc_uart_fifoXmit_countReg
  assign user_ifc_uart_fifoXmit_countReg_D_IN =
	     user_ifc_uart_fifoXmit_r_enq_whas ?
	       user_ifc_uart_fifoXmit_countReg + 5'd1 :
	       user_ifc_uart_fifoXmit_countReg - 5'd1 ;
  assign user_ifc_uart_fifoXmit_countReg_EN =
	     CAN_FIRE_RL_user_ifc_uart_fifoXmit__updateLevelCounter ;

  // register user_ifc_uart_rRecvBitCount
  assign user_ifc_uart_rRecvBitCount_D_IN =
	     user_ifc_uart_pwRecvResetBitCount_whas ? 4'd0 : x__h5166 ;
  assign user_ifc_uart_rRecvBitCount_EN =
	     user_ifc_uart_pwRecvResetBitCount_whas ||
	     user_ifc_uart_pwRecvEnableBitCount_whas ;

  // register user_ifc_uart_rRecvCellCount
  assign user_ifc_uart_rRecvCellCount_D_IN =
	     user_ifc_uart_pwRecvCellCountReset_whas ? 4'd0 : x__h3462 ;
  assign user_ifc_uart_rRecvCellCount_EN =
	     CAN_FIRE_RL_user_ifc_uart_baudGen_count_baudtick_16x ;

  // register user_ifc_uart_rRecvData
  assign user_ifc_uart_rRecvData_D_IN = io_SIN ;
  assign user_ifc_uart_rRecvData_EN = 1'd1 ;

  // register user_ifc_uart_rRecvParity
  assign user_ifc_uart_rRecvParity_D_IN = user_ifc_uart_rRecvData ;
  assign user_ifc_uart_rRecvParity_EN =
	     CAN_FIRE_RL_user_ifc_uart_receive_parity_bit ;

  // register user_ifc_uart_rRecvState
  always@(WILL_FIRE_RL_user_ifc_uart_receive_wait_for_start_bit or
	  MUX_user_ifc_uart_rRecvState_write_1__VAL_1 or
	  WILL_FIRE_RL_user_ifc_uart_receive_find_center_of_bit_cell or
	  MUX_user_ifc_uart_rRecvState_write_1__VAL_2 or
	  WILL_FIRE_RL_user_ifc_uart_receive_wait_bit_cell_time_for_sample or
	  MUX_user_ifc_uart_rRecvState_write_1__VAL_3 or
	  WILL_FIRE_RL_user_ifc_uart_receive_stop_first_bit or
	  MUX_user_ifc_uart_rRecvState_write_1__VAL_4 or
	  WILL_FIRE_RL_user_ifc_uart_receive_stop_last_bit or
	  MUX_user_ifc_uart_rRecvState_write_1__SEL_6)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_user_ifc_uart_receive_wait_for_start_bit:
	  user_ifc_uart_rRecvState_D_IN =
	      MUX_user_ifc_uart_rRecvState_write_1__VAL_1;
      WILL_FIRE_RL_user_ifc_uart_receive_find_center_of_bit_cell:
	  user_ifc_uart_rRecvState_D_IN =
	      MUX_user_ifc_uart_rRecvState_write_1__VAL_2;
      WILL_FIRE_RL_user_ifc_uart_receive_wait_bit_cell_time_for_sample:
	  user_ifc_uart_rRecvState_D_IN =
	      MUX_user_ifc_uart_rRecvState_write_1__VAL_3;
      WILL_FIRE_RL_user_ifc_uart_receive_stop_first_bit:
	  user_ifc_uart_rRecvState_D_IN =
	      MUX_user_ifc_uart_rRecvState_write_1__VAL_4;
      WILL_FIRE_RL_user_ifc_uart_receive_stop_last_bit:
	  user_ifc_uart_rRecvState_D_IN = 3'd0;
      MUX_user_ifc_uart_rRecvState_write_1__SEL_6:
	  user_ifc_uart_rRecvState_D_IN = 3'd2;
      default: user_ifc_uart_rRecvState_D_IN =
		   3'bxxx /* unspecified value */ ;
    endcase
  end
  assign user_ifc_uart_rRecvState_EN =
	     WILL_FIRE_RL_user_ifc_uart_receive_wait_for_start_bit ||
	     WILL_FIRE_RL_user_ifc_uart_receive_find_center_of_bit_cell ||
	     WILL_FIRE_RL_user_ifc_uart_receive_wait_bit_cell_time_for_sample ||
	     WILL_FIRE_RL_user_ifc_uart_receive_stop_first_bit ||
	     WILL_FIRE_RL_user_ifc_uart_receive_stop_last_bit ||
	     WILL_FIRE_RL_user_ifc_uart_receive_parity_bit ||
	     WILL_FIRE_RL_user_ifc_uart_receive_sample_pin ;

  // register user_ifc_uart_rXmitBitCount
  assign user_ifc_uart_rXmitBitCount_D_IN =
	     CAN_FIRE_RL_user_ifc_uart_transmit_wait_for_start_command ?
	       4'd0 :
	       x__h6948 ;
  assign user_ifc_uart_rXmitBitCount_EN =
	     CAN_FIRE_RL_user_ifc_uart_transmit_wait_for_start_command ||
	     user_ifc_uart_pwXmitEnableBitCount_whas ;

  // register user_ifc_uart_rXmitCellCount
  assign user_ifc_uart_rXmitCellCount_D_IN =
	     user_ifc_uart_pwXmitCellCountReset_whas ? 4'd0 : x__h6922 ;
  assign user_ifc_uart_rXmitCellCount_EN =
	     CAN_FIRE_RL_user_ifc_uart_baudGen_count_baudtick_16x ;

  // register user_ifc_uart_rXmitDataOut
  always@(MUX_user_ifc_uart_rXmitDataOut_write_1__SEL_1 or
	  user_ifc_uart_vrXmitBuffer_0 or
	  MUX_user_ifc_uart_rXmitDataOut_write_1__SEL_2 or
	  MUX_user_ifc_uart_rXmitDataOut_write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_user_ifc_uart_rXmitDataOut_write_1__SEL_1:
	  user_ifc_uart_rXmitDataOut_D_IN = user_ifc_uart_vrXmitBuffer_0;
      MUX_user_ifc_uart_rXmitDataOut_write_1__SEL_2:
	  user_ifc_uart_rXmitDataOut_D_IN = 1'b0;
      MUX_user_ifc_uart_rXmitDataOut_write_1__SEL_3:
	  user_ifc_uart_rXmitDataOut_D_IN = 1'b1;
      default: user_ifc_uart_rXmitDataOut_D_IN =
		   1'bx /* unspecified value */ ;
    endcase
  end
  assign user_ifc_uart_rXmitDataOut_EN =
	     WILL_FIRE_RL_user_ifc_uart_transmit_shift_next_bit ||
	     WILL_FIRE_RL_user_ifc_uart_transmit_wait_1_bit_cell_time ||
	     WILL_FIRE_RL_user_ifc_uart_transmit_send_parity_bit ||
	     WILL_FIRE_RL_user_ifc_uart_transmit_send_start_bit ||
	     WILL_FIRE_RL_user_ifc_uart_transmit_send_stop_bit2 ||
	     WILL_FIRE_RL_user_ifc_uart_transmit_send_stop_bit1_5 ||
	     WILL_FIRE_RL_user_ifc_uart_transmit_send_stop_bit ||
	     WILL_FIRE_RL_user_ifc_uart_transmit_wait_for_start_command ;

  // register user_ifc_uart_rXmitParity
  assign user_ifc_uart_rXmitParity_D_IN =
	     z__h8440 ^ user_ifc_uart_fifoXmit_D_OUT[7] ;
  assign user_ifc_uart_rXmitParity_EN =
	     CAN_FIRE_RL_user_ifc_uart_transmit_buffer_load ;

  // register user_ifc_uart_rXmitState
  always@(WILL_FIRE_RL_user_ifc_uart_transmit_wait_for_start_command or
	  MUX_user_ifc_uart_rXmitState_write_1__VAL_1 or
	  WILL_FIRE_RL_user_ifc_uart_transmit_send_start_bit or
	  MUX_user_ifc_uart_rXmitState_write_1__VAL_2 or
	  WILL_FIRE_RL_user_ifc_uart_transmit_wait_1_bit_cell_time or
	  MUX_user_ifc_uart_rXmitState_write_1__VAL_3 or
	  WILL_FIRE_RL_user_ifc_uart_transmit_send_parity_bit or
	  MUX_user_ifc_uart_rXmitState_write_1__VAL_4 or
	  WILL_FIRE_RL_user_ifc_uart_transmit_send_stop_bit or
	  MUX_user_ifc_uart_rXmitState_write_1__VAL_5 or
	  WILL_FIRE_RL_user_ifc_uart_transmit_send_stop_bit1_5 or
	  MUX_user_ifc_uart_rXmitState_write_1__VAL_6 or
	  WILL_FIRE_RL_user_ifc_uart_transmit_send_stop_bit2 or
	  MUX_user_ifc_uart_rXmitState_write_1__VAL_7 or
	  WILL_FIRE_RL_user_ifc_uart_transmit_shift_next_bit)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_user_ifc_uart_transmit_wait_for_start_command:
	  user_ifc_uart_rXmitState_D_IN =
	      MUX_user_ifc_uart_rXmitState_write_1__VAL_1;
      WILL_FIRE_RL_user_ifc_uart_transmit_send_start_bit:
	  user_ifc_uart_rXmitState_D_IN =
	      MUX_user_ifc_uart_rXmitState_write_1__VAL_2;
      WILL_FIRE_RL_user_ifc_uart_transmit_wait_1_bit_cell_time:
	  user_ifc_uart_rXmitState_D_IN =
	      MUX_user_ifc_uart_rXmitState_write_1__VAL_3;
      WILL_FIRE_RL_user_ifc_uart_transmit_send_parity_bit:
	  user_ifc_uart_rXmitState_D_IN =
	      MUX_user_ifc_uart_rXmitState_write_1__VAL_4;
      WILL_FIRE_RL_user_ifc_uart_transmit_send_stop_bit:
	  user_ifc_uart_rXmitState_D_IN =
	      MUX_user_ifc_uart_rXmitState_write_1__VAL_5;
      WILL_FIRE_RL_user_ifc_uart_transmit_send_stop_bit1_5:
	  user_ifc_uart_rXmitState_D_IN =
	      MUX_user_ifc_uart_rXmitState_write_1__VAL_6;
      WILL_FIRE_RL_user_ifc_uart_transmit_send_stop_bit2:
	  user_ifc_uart_rXmitState_D_IN =
	      MUX_user_ifc_uart_rXmitState_write_1__VAL_7;
      WILL_FIRE_RL_user_ifc_uart_transmit_shift_next_bit:
	  user_ifc_uart_rXmitState_D_IN = 3'd2;
      default: user_ifc_uart_rXmitState_D_IN =
		   3'bxxx /* unspecified value */ ;
    endcase
  end
  assign user_ifc_uart_rXmitState_EN =
	     WILL_FIRE_RL_user_ifc_uart_transmit_wait_for_start_command ||
	     WILL_FIRE_RL_user_ifc_uart_transmit_send_start_bit ||
	     WILL_FIRE_RL_user_ifc_uart_transmit_wait_1_bit_cell_time ||
	     WILL_FIRE_RL_user_ifc_uart_transmit_send_parity_bit ||
	     WILL_FIRE_RL_user_ifc_uart_transmit_send_stop_bit ||
	     WILL_FIRE_RL_user_ifc_uart_transmit_send_stop_bit1_5 ||
	     WILL_FIRE_RL_user_ifc_uart_transmit_send_stop_bit2 ||
	     WILL_FIRE_RL_user_ifc_uart_transmit_shift_next_bit ;

  // register user_ifc_uart_vrRecvBuffer_0
  assign user_ifc_uart_vrRecvBuffer_0_D_IN = user_ifc_uart_vrRecvBuffer_1 ;
  assign user_ifc_uart_vrRecvBuffer_0_EN =
	     CAN_FIRE_RL_user_ifc_uart_receive_buffer_shift ;

  // register user_ifc_uart_vrRecvBuffer_1
  assign user_ifc_uart_vrRecvBuffer_1_D_IN = user_ifc_uart_vrRecvBuffer_2 ;
  assign user_ifc_uart_vrRecvBuffer_1_EN =
	     CAN_FIRE_RL_user_ifc_uart_receive_buffer_shift ;

  // register user_ifc_uart_vrRecvBuffer_2
  assign user_ifc_uart_vrRecvBuffer_2_D_IN = user_ifc_uart_vrRecvBuffer_3 ;
  assign user_ifc_uart_vrRecvBuffer_2_EN =
	     CAN_FIRE_RL_user_ifc_uart_receive_buffer_shift ;

  // register user_ifc_uart_vrRecvBuffer_3
  assign user_ifc_uart_vrRecvBuffer_3_D_IN = user_ifc_uart_vrRecvBuffer_4 ;
  assign user_ifc_uart_vrRecvBuffer_3_EN =
	     CAN_FIRE_RL_user_ifc_uart_receive_buffer_shift ;

  // register user_ifc_uart_vrRecvBuffer_4
  assign user_ifc_uart_vrRecvBuffer_4_D_IN = user_ifc_uart_vrRecvBuffer_5 ;
  assign user_ifc_uart_vrRecvBuffer_4_EN =
	     CAN_FIRE_RL_user_ifc_uart_receive_buffer_shift ;

  // register user_ifc_uart_vrRecvBuffer_5
  assign user_ifc_uart_vrRecvBuffer_5_D_IN = user_ifc_uart_vrRecvBuffer_6 ;
  assign user_ifc_uart_vrRecvBuffer_5_EN =
	     CAN_FIRE_RL_user_ifc_uart_receive_buffer_shift ;

  // register user_ifc_uart_vrRecvBuffer_6
  assign user_ifc_uart_vrRecvBuffer_6_D_IN = user_ifc_uart_vrRecvBuffer_7 ;
  assign user_ifc_uart_vrRecvBuffer_6_EN =
	     CAN_FIRE_RL_user_ifc_uart_receive_buffer_shift ;

  // register user_ifc_uart_vrRecvBuffer_7
  assign user_ifc_uart_vrRecvBuffer_7_D_IN = user_ifc_uart_rRecvData ;
  assign user_ifc_uart_vrRecvBuffer_7_EN =
	     CAN_FIRE_RL_user_ifc_uart_receive_buffer_shift ;

  // register user_ifc_uart_vrXmitBuffer_0
  assign user_ifc_uart_vrXmitBuffer_0_D_IN =
	     WILL_FIRE_RL_user_ifc_uart_transmit_buffer_load ?
	       user_ifc_uart_fifoXmit_D_OUT[0] :
	       user_ifc_uart_vrXmitBuffer_1 ;
  assign user_ifc_uart_vrXmitBuffer_0_EN =
	     WILL_FIRE_RL_user_ifc_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_user_ifc_uart_transmit_buffer_shift ;

  // register user_ifc_uart_vrXmitBuffer_1
  assign user_ifc_uart_vrXmitBuffer_1_D_IN =
	     WILL_FIRE_RL_user_ifc_uart_transmit_buffer_load ?
	       user_ifc_uart_fifoXmit_D_OUT[1] :
	       user_ifc_uart_vrXmitBuffer_2 ;
  assign user_ifc_uart_vrXmitBuffer_1_EN =
	     WILL_FIRE_RL_user_ifc_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_user_ifc_uart_transmit_buffer_shift ;

  // register user_ifc_uart_vrXmitBuffer_2
  assign user_ifc_uart_vrXmitBuffer_2_D_IN =
	     WILL_FIRE_RL_user_ifc_uart_transmit_buffer_load ?
	       user_ifc_uart_fifoXmit_D_OUT[2] :
	       user_ifc_uart_vrXmitBuffer_3 ;
  assign user_ifc_uart_vrXmitBuffer_2_EN =
	     WILL_FIRE_RL_user_ifc_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_user_ifc_uart_transmit_buffer_shift ;

  // register user_ifc_uart_vrXmitBuffer_3
  assign user_ifc_uart_vrXmitBuffer_3_D_IN =
	     WILL_FIRE_RL_user_ifc_uart_transmit_buffer_load ?
	       user_ifc_uart_fifoXmit_D_OUT[3] :
	       user_ifc_uart_vrXmitBuffer_4 ;
  assign user_ifc_uart_vrXmitBuffer_3_EN =
	     WILL_FIRE_RL_user_ifc_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_user_ifc_uart_transmit_buffer_shift ;

  // register user_ifc_uart_vrXmitBuffer_4
  assign user_ifc_uart_vrXmitBuffer_4_D_IN =
	     WILL_FIRE_RL_user_ifc_uart_transmit_buffer_load ?
	       user_ifc_uart_fifoXmit_D_OUT[4] :
	       user_ifc_uart_vrXmitBuffer_5 ;
  assign user_ifc_uart_vrXmitBuffer_4_EN =
	     WILL_FIRE_RL_user_ifc_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_user_ifc_uart_transmit_buffer_shift ;

  // register user_ifc_uart_vrXmitBuffer_5
  assign user_ifc_uart_vrXmitBuffer_5_D_IN =
	     WILL_FIRE_RL_user_ifc_uart_transmit_buffer_load ?
	       user_ifc_uart_fifoXmit_D_OUT[5] :
	       user_ifc_uart_vrXmitBuffer_6 ;
  assign user_ifc_uart_vrXmitBuffer_5_EN =
	     WILL_FIRE_RL_user_ifc_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_user_ifc_uart_transmit_buffer_shift ;

  // register user_ifc_uart_vrXmitBuffer_6
  assign user_ifc_uart_vrXmitBuffer_6_D_IN =
	     WILL_FIRE_RL_user_ifc_uart_transmit_buffer_load ?
	       user_ifc_uart_fifoXmit_D_OUT[6] :
	       user_ifc_uart_vrXmitBuffer_7 ;
  assign user_ifc_uart_vrXmitBuffer_6_EN =
	     WILL_FIRE_RL_user_ifc_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_user_ifc_uart_transmit_buffer_shift ;

  // register user_ifc_uart_vrXmitBuffer_7
  assign user_ifc_uart_vrXmitBuffer_7_D_IN =
	     !WILL_FIRE_RL_user_ifc_uart_transmit_buffer_load ||
	     user_ifc_uart_fifoXmit_D_OUT[7] ;
  assign user_ifc_uart_vrXmitBuffer_7_EN =
	     WILL_FIRE_RL_user_ifc_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_user_ifc_uart_transmit_buffer_shift ;

  // submodule s_xactor_f_rd_addr
  assign s_xactor_f_rd_addr_D_IN =
	     { slave_m_arvalid_araddr,
	       slave_m_arvalid_arprot,
	       slave_m_arvalid_arsize } ;
  assign s_xactor_f_rd_addr_ENQ =
	     slave_m_arvalid_arvalid && s_xactor_f_rd_addr_FULL_N ;
  assign s_xactor_f_rd_addr_DEQ = CAN_FIRE_RL_capture_read_request ;
  assign s_xactor_f_rd_addr_CLR = 1'b0 ;

  // submodule s_xactor_f_rd_data
  assign s_xactor_f_rd_data_D_IN =
	     { (s_xactor_f_rd_addr_D_OUT[8:5] == 4'hC &&
		s_xactor_f_rd_addr_D_OUT[1:0] == 2'd0 ||
		s_xactor_f_rd_addr_D_OUT[8:5] == 4'h8 &&
		s_xactor_f_rd_addr_D_OUT[1:0] == 2'd0 ||
		s_xactor_f_rd_addr_D_OUT[8:5] == 4'h0 &&
		s_xactor_f_rd_addr_D_OUT[1:0] == 2'd1) ?
		 2'd0 :
		 2'd2,
	       IF_s_xactor_f_rd_addr_first__67_BITS_8_TO_5_68_ETC___d192 } ;
  assign s_xactor_f_rd_data_ENQ = CAN_FIRE_RL_capture_read_request ;
  assign s_xactor_f_rd_data_DEQ =
	     slave_m_rready_rready && s_xactor_f_rd_data_EMPTY_N ;
  assign s_xactor_f_rd_data_CLR = 1'b0 ;

  // submodule s_xactor_f_wr_addr
  assign s_xactor_f_wr_addr_D_IN =
	     { slave_m_awvalid_awaddr,
	       slave_m_awvalid_awprot,
	       slave_m_awvalid_awsize } ;
  assign s_xactor_f_wr_addr_ENQ =
	     slave_m_awvalid_awvalid && s_xactor_f_wr_addr_FULL_N ;
  assign s_xactor_f_wr_addr_DEQ = CAN_FIRE_RL_capture_write_request ;
  assign s_xactor_f_wr_addr_CLR = 1'b0 ;

  // submodule s_xactor_f_wr_data
  assign s_xactor_f_wr_data_D_IN =
	     { slave_m_wvalid_wdata, slave_m_wvalid_wstrb } ;
  assign s_xactor_f_wr_data_ENQ =
	     slave_m_wvalid_wvalid && s_xactor_f_wr_data_FULL_N ;
  assign s_xactor_f_wr_data_DEQ = CAN_FIRE_RL_capture_write_request ;
  assign s_xactor_f_wr_data_CLR = 1'b0 ;

  // submodule s_xactor_f_wr_resp
  assign s_xactor_f_wr_resp_D_IN =
	     (s_xactor_f_wr_addr_D_OUT[8:5] == 4'h4 &&
	      s_xactor_f_wr_addr_D_OUT[1:0] == 2'd0 ||
	      s_xactor_f_wr_addr_D_OUT[8:5] == 4'h0 &&
	      s_xactor_f_wr_addr_D_OUT[1:0] == 2'd1) ?
	       2'd0 :
	       2'd2 ;
  assign s_xactor_f_wr_resp_ENQ = CAN_FIRE_RL_capture_write_request ;
  assign s_xactor_f_wr_resp_DEQ =
	     slave_m_bready_bready && s_xactor_f_wr_resp_EMPTY_N ;
  assign s_xactor_f_wr_resp_CLR = 1'b0 ;

  // submodule user_ifc_uart_baudGen_rBaudCounter
  assign user_ifc_uart_baudGen_rBaudCounter_DATA_A = 16'd1 ;
  assign user_ifc_uart_baudGen_rBaudCounter_DATA_B = 16'h0 ;
  assign user_ifc_uart_baudGen_rBaudCounter_DATA_C = 16'h0 ;
  assign user_ifc_uart_baudGen_rBaudCounter_DATA_F = 16'd0 ;
  assign user_ifc_uart_baudGen_rBaudCounter_ADDA =
	     user_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d30 ;
  assign user_ifc_uart_baudGen_rBaudCounter_ADDB = 1'b0 ;
  assign user_ifc_uart_baudGen_rBaudCounter_SETC = 1'b0 ;
  assign user_ifc_uart_baudGen_rBaudCounter_SETF =
	     CAN_FIRE_RL_user_ifc_uart_baudGen_count_baudtick_16x ;

  // submodule user_ifc_uart_baudGen_rBaudTickCounter
  assign user_ifc_uart_baudGen_rBaudTickCounter_DATA_A = 3'd1 ;
  assign user_ifc_uart_baudGen_rBaudTickCounter_DATA_B = 3'h0 ;
  assign user_ifc_uart_baudGen_rBaudTickCounter_DATA_C = 3'h0 ;
  assign user_ifc_uart_baudGen_rBaudTickCounter_DATA_F = 3'h0 ;
  assign user_ifc_uart_baudGen_rBaudTickCounter_ADDA =
	     CAN_FIRE_RL_user_ifc_uart_baudGen_count_baudtick_16x ;
  assign user_ifc_uart_baudGen_rBaudTickCounter_ADDB = 1'b0 ;
  assign user_ifc_uart_baudGen_rBaudTickCounter_SETC = 1'b0 ;
  assign user_ifc_uart_baudGen_rBaudTickCounter_SETF = 1'b0 ;

  // submodule user_ifc_uart_fifoRecv
  assign user_ifc_uart_fifoRecv_D_IN =
	     { user_ifc_uart_vrRecvBuffer_7,
	       user_ifc_uart_vrRecvBuffer_6,
	       user_ifc_uart_vrRecvBuffer_5,
	       user_ifc_uart_vrRecvBuffer_4,
	       user_ifc_uart_vrRecvBuffer_3,
	       user_ifc_uart_vrRecvBuffer_2,
	       user_ifc_uart_vrRecvBuffer_1,
	       user_ifc_uart_vrRecvBuffer_0 } ;
  assign user_ifc_uart_fifoRecv_ENQ =
	     CAN_FIRE_RL_user_ifc_uart_receive_stop_last_bit ;
  assign user_ifc_uart_fifoRecv_DEQ = user_ifc_uart_fifoRecv_r_deq_whas ;
  assign user_ifc_uart_fifoRecv_CLR = 1'b0 ;

  // submodule user_ifc_uart_fifoXmit
  assign user_ifc_uart_fifoXmit_D_IN = s_xactor_f_wr_data_D_OUT[11:4] ;
  assign user_ifc_uart_fifoXmit_ENQ = user_ifc_uart_fifoXmit_r_enq_whas ;
  assign user_ifc_uart_fifoXmit_DEQ =
	     CAN_FIRE_RL_user_ifc_uart_transmit_buffer_load ;
  assign user_ifc_uart_fifoXmit_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_s_xactor_f_rd_addr_first__67_BITS_8_TO_5_68_ETC___d192 =
	     (s_xactor_f_rd_addr_D_OUT[8:5] == 4'hC &&
	      s_xactor_f_rd_addr_D_OUT[1:0] == 2'd0) ?
	       a__h11641 :
	       ((s_xactor_f_rd_addr_D_OUT[8:5] == 4'h8 &&
		 s_xactor_f_rd_addr_D_OUT[1:0] == 2'd0) ?
		  a__h11647 :
		  a__h11649) ;
  assign _dor2user_ifc_uart_pwXmitCellCountReset_EN_wset =
	     WILL_FIRE_RL_user_ifc_uart_transmit_send_stop_bit2 ||
	     WILL_FIRE_RL_user_ifc_uart_transmit_send_stop_bit ||
	     WILL_FIRE_RL_user_ifc_uart_transmit_send_parity_bit ||
	     WILL_FIRE_RL_user_ifc_uart_transmit_wait_1_bit_cell_time ||
	     WILL_FIRE_RL_user_ifc_uart_transmit_send_start_bit ;
  assign a__h11641 = {8{x_wget__h11307}} ;
  assign a__h11647 = {4{user_ifc_uart_fifoRecv_D_OUT}} ;
  assign a__h11649 = {2{user_ifc_baud_value}} ;
  assign user_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d30 =
	     user_ifc_uart_baudGen_rBaudCounter_Q_OUT + 16'd1 <
	     user_ifc_baud_value ;
  assign x__h3462 = user_ifc_uart_rRecvCellCount + 4'd1 ;
  assign x__h5166 = user_ifc_uart_rRecvBitCount + 4'd1 ;
  assign x__h6922 = user_ifc_uart_rXmitCellCount + 4'd1 ;
  assign x__h6948 = user_ifc_uart_rXmitBitCount + 4'd1 ;
  assign x_wget__h11307 =
	     { user_ifc_uart_fifoRecv_EMPTY_N,
	       user_ifc_uart_fifoRecv_FULL_N,
	       user_ifc_uart_fifoXmit_FULL_N,
	       !user_ifc_uart_fifoXmit_EMPTY_N &&
	       user_ifc_uart_rXmitState == 3'd0 } ;
  assign z__h8405 =
	     user_ifc_uart_fifoXmit_D_OUT[0] ^
	     user_ifc_uart_fifoXmit_D_OUT[1] ;
  assign z__h8412 = z__h8405 ^ user_ifc_uart_fifoXmit_D_OUT[2] ;
  assign z__h8419 = z__h8412 ^ user_ifc_uart_fifoXmit_D_OUT[3] ;
  assign z__h8426 = z__h8419 ^ user_ifc_uart_fifoXmit_D_OUT[4] ;
  assign z__h8433 = z__h8426 ^ user_ifc_uart_fifoXmit_D_OUT[5] ;
  assign z__h8440 = z__h8433 ^ user_ifc_uart_fifoXmit_D_OUT[6] ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        user_ifc_baud_value <= `BSV_ASSIGNMENT_DELAY 16'd163;
	user_ifc_uart_fifoRecv_countReg <= `BSV_ASSIGNMENT_DELAY 5'd0;
	user_ifc_uart_fifoXmit_countReg <= `BSV_ASSIGNMENT_DELAY 5'd0;
	user_ifc_uart_rRecvData <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (user_ifc_baud_value_EN)
	  user_ifc_baud_value <= `BSV_ASSIGNMENT_DELAY
	      user_ifc_baud_value_D_IN;
	if (user_ifc_uart_fifoRecv_countReg_EN)
	  user_ifc_uart_fifoRecv_countReg <= `BSV_ASSIGNMENT_DELAY
	      user_ifc_uart_fifoRecv_countReg_D_IN;
	if (user_ifc_uart_fifoXmit_countReg_EN)
	  user_ifc_uart_fifoXmit_countReg <= `BSV_ASSIGNMENT_DELAY
	      user_ifc_uart_fifoXmit_countReg_D_IN;
	if (user_ifc_uart_rRecvData_EN)
	  user_ifc_uart_rRecvData <= `BSV_ASSIGNMENT_DELAY
	      user_ifc_uart_rRecvData_D_IN;
      end
    if (user_ifc_uart_vrRecvBuffer_0_EN)
      user_ifc_uart_vrRecvBuffer_0 <= `BSV_ASSIGNMENT_DELAY
	  user_ifc_uart_vrRecvBuffer_0_D_IN;
    if (user_ifc_uart_vrRecvBuffer_1_EN)
      user_ifc_uart_vrRecvBuffer_1 <= `BSV_ASSIGNMENT_DELAY
	  user_ifc_uart_vrRecvBuffer_1_D_IN;
    if (user_ifc_uart_vrRecvBuffer_2_EN)
      user_ifc_uart_vrRecvBuffer_2 <= `BSV_ASSIGNMENT_DELAY
	  user_ifc_uart_vrRecvBuffer_2_D_IN;
    if (user_ifc_uart_vrRecvBuffer_3_EN)
      user_ifc_uart_vrRecvBuffer_3 <= `BSV_ASSIGNMENT_DELAY
	  user_ifc_uart_vrRecvBuffer_3_D_IN;
    if (user_ifc_uart_vrRecvBuffer_4_EN)
      user_ifc_uart_vrRecvBuffer_4 <= `BSV_ASSIGNMENT_DELAY
	  user_ifc_uart_vrRecvBuffer_4_D_IN;
    if (user_ifc_uart_vrRecvBuffer_5_EN)
      user_ifc_uart_vrRecvBuffer_5 <= `BSV_ASSIGNMENT_DELAY
	  user_ifc_uart_vrRecvBuffer_5_D_IN;
    if (user_ifc_uart_vrRecvBuffer_6_EN)
      user_ifc_uart_vrRecvBuffer_6 <= `BSV_ASSIGNMENT_DELAY
	  user_ifc_uart_vrRecvBuffer_6_D_IN;
    if (user_ifc_uart_vrRecvBuffer_7_EN)
      user_ifc_uart_vrRecvBuffer_7 <= `BSV_ASSIGNMENT_DELAY
	  user_ifc_uart_vrRecvBuffer_7_D_IN;
    if (user_ifc_uart_vrXmitBuffer_0_EN)
      user_ifc_uart_vrXmitBuffer_0 <= `BSV_ASSIGNMENT_DELAY
	  user_ifc_uart_vrXmitBuffer_0_D_IN;
    if (user_ifc_uart_vrXmitBuffer_1_EN)
      user_ifc_uart_vrXmitBuffer_1 <= `BSV_ASSIGNMENT_DELAY
	  user_ifc_uart_vrXmitBuffer_1_D_IN;
    if (user_ifc_uart_vrXmitBuffer_2_EN)
      user_ifc_uart_vrXmitBuffer_2 <= `BSV_ASSIGNMENT_DELAY
	  user_ifc_uart_vrXmitBuffer_2_D_IN;
    if (user_ifc_uart_vrXmitBuffer_3_EN)
      user_ifc_uart_vrXmitBuffer_3 <= `BSV_ASSIGNMENT_DELAY
	  user_ifc_uart_vrXmitBuffer_3_D_IN;
    if (user_ifc_uart_vrXmitBuffer_4_EN)
      user_ifc_uart_vrXmitBuffer_4 <= `BSV_ASSIGNMENT_DELAY
	  user_ifc_uart_vrXmitBuffer_4_D_IN;
    if (user_ifc_uart_vrXmitBuffer_5_EN)
      user_ifc_uart_vrXmitBuffer_5 <= `BSV_ASSIGNMENT_DELAY
	  user_ifc_uart_vrXmitBuffer_5_D_IN;
    if (user_ifc_uart_vrXmitBuffer_6_EN)
      user_ifc_uart_vrXmitBuffer_6 <= `BSV_ASSIGNMENT_DELAY
	  user_ifc_uart_vrXmitBuffer_6_D_IN;
    if (user_ifc_uart_vrXmitBuffer_7_EN)
      user_ifc_uart_vrXmitBuffer_7 <= `BSV_ASSIGNMENT_DELAY
	  user_ifc_uart_vrXmitBuffer_7_D_IN;
  end

  always@(posedge CLK or `BSV_RESET_EDGE RST_N)
  if (RST_N == `BSV_RESET_VALUE)
    begin
      user_ifc_uart_rRecvBitCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
      user_ifc_uart_rRecvCellCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
      user_ifc_uart_rRecvParity <= `BSV_ASSIGNMENT_DELAY 1'd0;
      user_ifc_uart_rRecvState <= `BSV_ASSIGNMENT_DELAY 3'd0;
      user_ifc_uart_rXmitBitCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
      user_ifc_uart_rXmitCellCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
      user_ifc_uart_rXmitDataOut <= `BSV_ASSIGNMENT_DELAY 1'd1;
      user_ifc_uart_rXmitParity <= `BSV_ASSIGNMENT_DELAY 1'd0;
      user_ifc_uart_rXmitState <= `BSV_ASSIGNMENT_DELAY 3'd0;
    end
  else
    begin
      if (user_ifc_uart_rRecvBitCount_EN)
	user_ifc_uart_rRecvBitCount <= `BSV_ASSIGNMENT_DELAY
	    user_ifc_uart_rRecvBitCount_D_IN;
      if (user_ifc_uart_rRecvCellCount_EN)
	user_ifc_uart_rRecvCellCount <= `BSV_ASSIGNMENT_DELAY
	    user_ifc_uart_rRecvCellCount_D_IN;
      if (user_ifc_uart_rRecvParity_EN)
	user_ifc_uart_rRecvParity <= `BSV_ASSIGNMENT_DELAY
	    user_ifc_uart_rRecvParity_D_IN;
      if (user_ifc_uart_rRecvState_EN)
	user_ifc_uart_rRecvState <= `BSV_ASSIGNMENT_DELAY
	    user_ifc_uart_rRecvState_D_IN;
      if (user_ifc_uart_rXmitBitCount_EN)
	user_ifc_uart_rXmitBitCount <= `BSV_ASSIGNMENT_DELAY
	    user_ifc_uart_rXmitBitCount_D_IN;
      if (user_ifc_uart_rXmitCellCount_EN)
	user_ifc_uart_rXmitCellCount <= `BSV_ASSIGNMENT_DELAY
	    user_ifc_uart_rXmitCellCount_D_IN;
      if (user_ifc_uart_rXmitDataOut_EN)
	user_ifc_uart_rXmitDataOut <= `BSV_ASSIGNMENT_DELAY
	    user_ifc_uart_rXmitDataOut_D_IN;
      if (user_ifc_uart_rXmitParity_EN)
	user_ifc_uart_rXmitParity <= `BSV_ASSIGNMENT_DELAY
	    user_ifc_uart_rXmitParity_D_IN;
      if (user_ifc_uart_rXmitState_EN)
	user_ifc_uart_rXmitState <= `BSV_ASSIGNMENT_DELAY
	    user_ifc_uart_rXmitState_D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    user_ifc_baud_value = 16'hAAAA;
    user_ifc_uart_fifoRecv_countReg = 5'h0A;
    user_ifc_uart_fifoXmit_countReg = 5'h0A;
    user_ifc_uart_rRecvBitCount = 4'hA;
    user_ifc_uart_rRecvCellCount = 4'hA;
    user_ifc_uart_rRecvData = 1'h0;
    user_ifc_uart_rRecvParity = 1'h0;
    user_ifc_uart_rRecvState = 3'h2;
    user_ifc_uart_rXmitBitCount = 4'hA;
    user_ifc_uart_rXmitCellCount = 4'hA;
    user_ifc_uart_rXmitDataOut = 1'h0;
    user_ifc_uart_rXmitParity = 1'h0;
    user_ifc_uart_rXmitState = 3'h2;
    user_ifc_uart_vrRecvBuffer_0 = 1'h0;
    user_ifc_uart_vrRecvBuffer_1 = 1'h0;
    user_ifc_uart_vrRecvBuffer_2 = 1'h0;
    user_ifc_uart_vrRecvBuffer_3 = 1'h0;
    user_ifc_uart_vrRecvBuffer_4 = 1'h0;
    user_ifc_uart_vrRecvBuffer_5 = 1'h0;
    user_ifc_uart_vrRecvBuffer_6 = 1'h0;
    user_ifc_uart_vrRecvBuffer_7 = 1'h0;
    user_ifc_uart_vrXmitBuffer_0 = 1'h0;
    user_ifc_uart_vrXmitBuffer_1 = 1'h0;
    user_ifc_uart_vrXmitBuffer_2 = 1'h0;
    user_ifc_uart_vrXmitBuffer_3 = 1'h0;
    user_ifc_uart_vrXmitBuffer_4 = 1'h0;
    user_ifc_uart_vrXmitBuffer_5 = 1'h0;
    user_ifc_uart_vrXmitBuffer_6 = 1'h0;
    user_ifc_uart_vrXmitBuffer_7 = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkuart

