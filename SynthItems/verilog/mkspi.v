//
// Generated by Bluespec Compiler, version 2022.01-36-ga6304315 (build a6304315)
//
// On Tue Oct  4 10:37:17 CEST 2022
//
//
// Ports:
// Name                         I/O  size props
// io_mosi                        O     1 reg
// io_sclk                        O     1
// io_nss                         O     1 reg
// slave_awready                  O     1 reg
// slave_wready                   O     1 reg
// slave_bvalid                   O     1 reg
// slave_bresp                    O     2 reg
// slave_arready                  O     1 reg
// slave_rvalid                   O     1 reg
// slave_rresp                    O     2 reg
// slave_rdata                    O    32 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// io_miso_dat                    I     1
// slave_m_awvalid_awvalid        I     1
// slave_m_awvalid_awaddr         I    32 reg
// slave_m_awvalid_awsize         I     2 reg
// slave_m_awvalid_awprot         I     3 reg
// slave_m_wvalid_wvalid          I     1
// slave_m_wvalid_wdata           I    32 reg
// slave_m_wvalid_wstrb           I     4 reg
// slave_m_bready_bready          I     1
// slave_m_arvalid_arvalid        I     1
// slave_m_arvalid_araddr         I    32 reg
// slave_m_arvalid_arsize         I     2 reg
// slave_m_arvalid_arprot         I     3 reg
// slave_m_rready_rready          I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkspi(CLK,
	     RST_N,

	     io_mosi,

	     io_sclk,

	     io_nss,

	     io_miso_dat,

	     slave_m_awvalid_awvalid,
	     slave_m_awvalid_awaddr,
	     slave_m_awvalid_awsize,
	     slave_m_awvalid_awprot,

	     slave_awready,

	     slave_m_wvalid_wvalid,
	     slave_m_wvalid_wdata,
	     slave_m_wvalid_wstrb,

	     slave_wready,

	     slave_bvalid,

	     slave_bresp,

	     slave_m_bready_bready,

	     slave_m_arvalid_arvalid,
	     slave_m_arvalid_araddr,
	     slave_m_arvalid_arsize,
	     slave_m_arvalid_arprot,

	     slave_arready,

	     slave_rvalid,

	     slave_rresp,

	     slave_rdata,

	     slave_m_rready_rready);
  input  CLK;
  input  RST_N;

  // value method io_mosi
  output io_mosi;

  // value method io_sclk
  output io_sclk;

  // value method io_nss
  output io_nss;

  // action method io_miso
  input  io_miso_dat;

  // action method slave_m_awvalid
  input  slave_m_awvalid_awvalid;
  input  [31 : 0] slave_m_awvalid_awaddr;
  input  [1 : 0] slave_m_awvalid_awsize;
  input  [2 : 0] slave_m_awvalid_awprot;

  // value method slave_m_awready
  output slave_awready;

  // action method slave_m_wvalid
  input  slave_m_wvalid_wvalid;
  input  [31 : 0] slave_m_wvalid_wdata;
  input  [3 : 0] slave_m_wvalid_wstrb;

  // value method slave_m_wready
  output slave_wready;

  // value method slave_m_bvalid
  output slave_bvalid;

  // value method slave_m_bresp
  output [1 : 0] slave_bresp;

  // value method slave_m_buser

  // action method slave_m_bready
  input  slave_m_bready_bready;

  // action method slave_m_arvalid
  input  slave_m_arvalid_arvalid;
  input  [31 : 0] slave_m_arvalid_araddr;
  input  [1 : 0] slave_m_arvalid_arsize;
  input  [2 : 0] slave_m_arvalid_arprot;

  // value method slave_m_arready
  output slave_arready;

  // value method slave_m_rvalid
  output slave_rvalid;

  // value method slave_m_rresp
  output [1 : 0] slave_rresp;

  // value method slave_m_rdata
  output [31 : 0] slave_rdata;

  // value method slave_m_ruser

  // action method slave_m_rready
  input  slave_m_rready_rready;

  // signals for module outputs
  wire [31 : 0] slave_rdata;
  wire [1 : 0] slave_bresp, slave_rresp;
  wire io_mosi,
       io_nss,
       io_sclk,
       slave_arready,
       slave_awready,
       slave_bvalid,
       slave_rvalid,
       slave_wready;

  // inlined wires
  reg [31 : 0] spi_wr_rd_data_wget;
  wire [31 : 0] spi_wr_rd_addr_wget, spi_wr_write_addr_wget;
  wire _write_RL_spi_rl_data_receive_EN_spi_rg_spi_cfg_cr2_wget,
       _write_RL_spi_rl_data_transmit_EN_spi_rg_nss_wget,
       spi_wr_clk_en_wget,
       spi_wr_transfer_en_whas;

  // register rg_rid
  reg [3 : 0] rg_rid;
  wire [3 : 0] rg_rid_D_IN;
  wire rg_rid_EN;

  // register spi_rg_bit_count
  reg [6 : 0] spi_rg_bit_count;
  reg [6 : 0] spi_rg_bit_count_D_IN;
  wire spi_rg_bit_count_EN;

  // register spi_rg_clk
  reg spi_rg_clk;
  wire spi_rg_clk_D_IN, spi_rg_clk_EN;

  // register spi_rg_clk_counter
  reg [2 : 0] spi_rg_clk_counter;
  wire [2 : 0] spi_rg_clk_counter_D_IN;
  wire spi_rg_clk_counter_EN;

  // register spi_rg_data_counter
  reg [7 : 0] spi_rg_data_counter;
  reg [7 : 0] spi_rg_data_counter_D_IN;
  wire spi_rg_data_counter_EN;

  // register spi_rg_data_rx
  reg [7 : 0] spi_rg_data_rx;
  wire [7 : 0] spi_rg_data_rx_D_IN;
  wire spi_rg_data_rx_EN;

  // register spi_rg_data_tx
  reg [7 : 0] spi_rg_data_tx;
  reg [7 : 0] spi_rg_data_tx_D_IN;
  wire spi_rg_data_tx_EN;

  // register spi_rg_nss
  reg spi_rg_nss;
  reg spi_rg_nss_D_IN;
  wire spi_rg_nss_EN;

  // register spi_rg_receive_state
  reg [1 : 0] spi_rg_receive_state;
  reg [1 : 0] spi_rg_receive_state_D_IN;
  wire spi_rg_receive_state_EN;

  // register spi_rg_spi_cfg_cr1
  reg [31 : 0] spi_rg_spi_cfg_cr1;
  wire [31 : 0] spi_rg_spi_cfg_cr1_D_IN;
  wire spi_rg_spi_cfg_cr1_EN;

  // register spi_rg_spi_cfg_cr2
  reg [31 : 0] spi_rg_spi_cfg_cr2;
  wire [31 : 0] spi_rg_spi_cfg_cr2_D_IN;
  wire spi_rg_spi_cfg_cr2_EN;

  // register spi_rg_spi_cfg_crcpr
  reg [31 : 0] spi_rg_spi_cfg_crcpr;
  wire [31 : 0] spi_rg_spi_cfg_crcpr_D_IN;
  wire spi_rg_spi_cfg_crcpr_EN;

  // register spi_rg_spi_cfg_dr1
  reg [31 : 0] spi_rg_spi_cfg_dr1;
  reg [31 : 0] spi_rg_spi_cfg_dr1_D_IN;
  wire spi_rg_spi_cfg_dr1_EN;

  // register spi_rg_spi_cfg_dr2
  reg [31 : 0] spi_rg_spi_cfg_dr2;
  reg [31 : 0] spi_rg_spi_cfg_dr2_D_IN;
  wire spi_rg_spi_cfg_dr2_EN;

  // register spi_rg_spi_cfg_dr3
  reg [31 : 0] spi_rg_spi_cfg_dr3;
  reg [31 : 0] spi_rg_spi_cfg_dr3_D_IN;
  wire spi_rg_spi_cfg_dr3_EN;

  // register spi_rg_spi_cfg_rxcrcr
  reg [31 : 0] spi_rg_spi_cfg_rxcrcr;
  wire [31 : 0] spi_rg_spi_cfg_rxcrcr_D_IN;
  wire spi_rg_spi_cfg_rxcrcr_EN;

  // register spi_rg_spi_cfg_sr
  reg [31 : 0] spi_rg_spi_cfg_sr;
  reg [31 : 0] spi_rg_spi_cfg_sr_D_IN;
  wire spi_rg_spi_cfg_sr_EN;

  // register spi_rg_spi_cfg_txcrcr
  reg [31 : 0] spi_rg_spi_cfg_txcrcr;
  wire [31 : 0] spi_rg_spi_cfg_txcrcr_D_IN;
  wire spi_rg_spi_cfg_txcrcr_EN;

  // register spi_rg_transfer_done
  reg spi_rg_transfer_done;
  wire spi_rg_transfer_done_D_IN, spi_rg_transfer_done_EN;

  // register spi_rg_transmit_state
  reg [1 : 0] spi_rg_transmit_state;
  reg [1 : 0] spi_rg_transmit_state_D_IN;
  wire spi_rg_transmit_state_EN;

  // register spi_rg_tx_rx_start
  reg spi_rg_tx_rx_start;
  reg spi_rg_tx_rx_start_D_IN;
  wire spi_rg_tx_rx_start_EN;

  // register spi_tx_data_en
  reg spi_tx_data_en;
  wire spi_tx_data_en_D_IN, spi_tx_data_en_EN;

  // register spi_wr_spi_out_io1
  reg spi_wr_spi_out_io1;
  reg spi_wr_spi_out_io1_D_IN;
  wire spi_wr_spi_out_io1_EN;

  // ports of submodule ff_rd_req
  wire [34 : 0] ff_rd_req_dD_OUT, ff_rd_req_sD_IN;
  wire ff_rd_req_dDEQ, ff_rd_req_dEMPTY_N, ff_rd_req_sENQ, ff_rd_req_sFULL_N;

  // ports of submodule ff_sync_rd_resp
  wire [31 : 0] ff_sync_rd_resp_dD_OUT, ff_sync_rd_resp_sD_IN;
  wire ff_sync_rd_resp_dDEQ,
       ff_sync_rd_resp_dEMPTY_N,
       ff_sync_rd_resp_sENQ,
       ff_sync_rd_resp_sFULL_N;

  // ports of submodule ff_wr_req
  wire [66 : 0] ff_wr_req_dD_OUT, ff_wr_req_sD_IN;
  wire ff_wr_req_dDEQ, ff_wr_req_dEMPTY_N, ff_wr_req_sENQ, ff_wr_req_sFULL_N;

  // ports of submodule s_xactor_spi_f_rd_addr
  wire [36 : 0] s_xactor_spi_f_rd_addr_D_IN, s_xactor_spi_f_rd_addr_D_OUT;
  wire s_xactor_spi_f_rd_addr_CLR,
       s_xactor_spi_f_rd_addr_DEQ,
       s_xactor_spi_f_rd_addr_EMPTY_N,
       s_xactor_spi_f_rd_addr_ENQ,
       s_xactor_spi_f_rd_addr_FULL_N;

  // ports of submodule s_xactor_spi_f_rd_data
  wire [33 : 0] s_xactor_spi_f_rd_data_D_IN, s_xactor_spi_f_rd_data_D_OUT;
  wire s_xactor_spi_f_rd_data_CLR,
       s_xactor_spi_f_rd_data_DEQ,
       s_xactor_spi_f_rd_data_EMPTY_N,
       s_xactor_spi_f_rd_data_ENQ,
       s_xactor_spi_f_rd_data_FULL_N;

  // ports of submodule s_xactor_spi_f_wr_addr
  wire [36 : 0] s_xactor_spi_f_wr_addr_D_IN, s_xactor_spi_f_wr_addr_D_OUT;
  wire s_xactor_spi_f_wr_addr_CLR,
       s_xactor_spi_f_wr_addr_DEQ,
       s_xactor_spi_f_wr_addr_EMPTY_N,
       s_xactor_spi_f_wr_addr_ENQ,
       s_xactor_spi_f_wr_addr_FULL_N;

  // ports of submodule s_xactor_spi_f_wr_data
  wire [35 : 0] s_xactor_spi_f_wr_data_D_IN, s_xactor_spi_f_wr_data_D_OUT;
  wire s_xactor_spi_f_wr_data_CLR,
       s_xactor_spi_f_wr_data_DEQ,
       s_xactor_spi_f_wr_data_EMPTY_N,
       s_xactor_spi_f_wr_data_ENQ,
       s_xactor_spi_f_wr_data_FULL_N;

  // ports of submodule s_xactor_spi_f_wr_resp
  wire [1 : 0] s_xactor_spi_f_wr_resp_D_IN, s_xactor_spi_f_wr_resp_D_OUT;
  wire s_xactor_spi_f_wr_resp_CLR,
       s_xactor_spi_f_wr_resp_DEQ,
       s_xactor_spi_f_wr_resp_EMPTY_N,
       s_xactor_spi_f_wr_resp_ENQ,
       s_xactor_spi_f_wr_resp_FULL_N;

  // ports of submodule spi_rx_fifo
  wire [7 : 0] spi_rx_fifo_D_IN, spi_rx_fifo_D_OUT;
  wire spi_rx_fifo_CLR,
       spi_rx_fifo_DEQ,
       spi_rx_fifo_EMPTY_N,
       spi_rx_fifo_ENQ,
       spi_rx_fifo_FULL_N;

  // ports of submodule spi_tx_fifo
  wire [7 : 0] spi_tx_fifo_D_IN, spi_tx_fifo_D_OUT;
  wire spi_tx_fifo_CLR, spi_tx_fifo_DEQ, spi_tx_fifo_EMPTY_N, spi_tx_fifo_ENQ;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_read_request_from_core,
       CAN_FIRE_RL_rl_read_request_to_controller,
       CAN_FIRE_RL_rl_read_response_from_controller,
       CAN_FIRE_RL_rl_read_response_to_core,
       CAN_FIRE_RL_rl_write_request_from_core,
       CAN_FIRE_RL_rl_write_request_to_controller,
       CAN_FIRE_RL_spi_rl_abort_bitcount_finish,
       CAN_FIRE_RL_spi_rl_abort_tx_rx,
       CAN_FIRE_RL_spi_rl_bidimode_bidioe,
       CAN_FIRE_RL_spi_rl_chip_select_control,
       CAN_FIRE_RL_spi_rl_clock_phase_enable,
       CAN_FIRE_RL_spi_rl_data_receive,
       CAN_FIRE_RL_spi_rl_data_transmit,
       CAN_FIRE_RL_spi_rl_generate_clk_baud_rate,
       CAN_FIRE_RL_spi_rl_read_from_cfg,
       CAN_FIRE_RL_spi_rl_receive_done,
       CAN_FIRE_RL_spi_rl_receive_fifo_to_read_datareg,
       CAN_FIRE_RL_spi_rl_receive_idle,
       CAN_FIRE_RL_spi_rl_receive_start_receive,
       CAN_FIRE_RL_spi_rl_transmit_data_to_fifo,
       CAN_FIRE_RL_spi_rl_transmit_idle,
       CAN_FIRE_RL_spi_rl_transmit_start,
       CAN_FIRE_RL_spi_rl_write_to_cfg,
       CAN_FIRE_io_miso,
       CAN_FIRE_slave_m_arvalid,
       CAN_FIRE_slave_m_awvalid,
       CAN_FIRE_slave_m_bready,
       CAN_FIRE_slave_m_rready,
       CAN_FIRE_slave_m_wvalid,
       WILL_FIRE_RL_rl_read_request_from_core,
       WILL_FIRE_RL_rl_read_request_to_controller,
       WILL_FIRE_RL_rl_read_response_from_controller,
       WILL_FIRE_RL_rl_read_response_to_core,
       WILL_FIRE_RL_rl_write_request_from_core,
       WILL_FIRE_RL_rl_write_request_to_controller,
       WILL_FIRE_RL_spi_rl_abort_bitcount_finish,
       WILL_FIRE_RL_spi_rl_abort_tx_rx,
       WILL_FIRE_RL_spi_rl_bidimode_bidioe,
       WILL_FIRE_RL_spi_rl_chip_select_control,
       WILL_FIRE_RL_spi_rl_clock_phase_enable,
       WILL_FIRE_RL_spi_rl_data_receive,
       WILL_FIRE_RL_spi_rl_data_transmit,
       WILL_FIRE_RL_spi_rl_generate_clk_baud_rate,
       WILL_FIRE_RL_spi_rl_read_from_cfg,
       WILL_FIRE_RL_spi_rl_receive_done,
       WILL_FIRE_RL_spi_rl_receive_fifo_to_read_datareg,
       WILL_FIRE_RL_spi_rl_receive_idle,
       WILL_FIRE_RL_spi_rl_receive_start_receive,
       WILL_FIRE_RL_spi_rl_transmit_data_to_fifo,
       WILL_FIRE_RL_spi_rl_transmit_idle,
       WILL_FIRE_RL_spi_rl_transmit_start,
       WILL_FIRE_RL_spi_rl_write_to_cfg,
       WILL_FIRE_io_miso,
       WILL_FIRE_slave_m_arvalid,
       WILL_FIRE_slave_m_awvalid,
       WILL_FIRE_slave_m_bready,
       WILL_FIRE_slave_m_rready,
       WILL_FIRE_slave_m_wvalid;

  // inputs to muxes for submodule ports
  wire [31 : 0] MUX_spi_rg_spi_cfg_cr1_write_1__VAL_2,
		MUX_spi_rg_spi_cfg_dr1_write_1__VAL_2,
		MUX_spi_rg_spi_cfg_dr1_write_1__VAL_3,
		MUX_spi_rg_spi_cfg_dr2_write_1__VAL_2,
		MUX_spi_rg_spi_cfg_dr3_write_1__VAL_2,
		MUX_spi_rg_spi_cfg_sr_write_1__VAL_2,
		MUX_spi_rg_spi_cfg_sr_write_1__VAL_3,
		MUX_spi_rg_spi_cfg_sr_write_1__VAL_4;
  wire [7 : 0] MUX_spi_rg_data_counter_write_1__VAL_10,
	       MUX_spi_rg_data_counter_write_1__VAL_5,
	       MUX_spi_rg_data_counter_write_1__VAL_6,
	       MUX_spi_rg_data_counter_write_1__VAL_8,
	       MUX_spi_rg_data_rx_write_1__VAL_1,
	       MUX_spi_rg_data_tx_write_1__VAL_2,
	       MUX_spi_rg_data_tx_write_1__VAL_3,
	       MUX_spi_rx_fifo_enq_1__VAL_1,
	       MUX_spi_rx_fifo_enq_1__VAL_2;
  wire [6 : 0] MUX_spi_rg_bit_count_write_1__VAL_3;
  wire MUX_spi_rg_bit_count_write_1__SEL_1,
       MUX_spi_rg_bit_count_write_1__SEL_3,
       MUX_spi_rg_bit_count_write_1__SEL_4,
       MUX_spi_rg_bit_count_write_1__SEL_5,
       MUX_spi_rg_data_counter_write_1__SEL_1,
       MUX_spi_rg_data_counter_write_1__SEL_10,
       MUX_spi_rg_data_counter_write_1__SEL_2,
       MUX_spi_rg_data_counter_write_1__SEL_6,
       MUX_spi_rg_data_counter_write_1__SEL_8,
       MUX_spi_rg_data_counter_write_1__SEL_9,
       MUX_spi_rg_nss_write_1__SEL_1,
       MUX_spi_rg_nss_write_1__SEL_2,
       MUX_spi_rg_nss_write_1__SEL_4,
       MUX_spi_rg_nss_write_1__SEL_6,
       MUX_spi_rg_receive_state_write_1__SEL_3,
       MUX_spi_rg_spi_cfg_cr1_write_1__SEL_1,
       MUX_spi_rg_spi_cfg_cr2_write_1__SEL_1,
       MUX_spi_rg_spi_cfg_dr1_write_1__SEL_1,
       MUX_spi_rg_spi_cfg_dr2_write_1__SEL_1,
       MUX_spi_rg_spi_cfg_dr3_write_1__SEL_1,
       MUX_spi_rg_spi_cfg_sr_write_1__SEL_1,
       MUX_spi_rg_spi_cfg_sr_write_1__SEL_5,
       MUX_spi_rg_spi_cfg_sr_write_1__SEL_6,
       MUX_spi_rg_transfer_done_write_1__SEL_2,
       MUX_spi_rg_tx_rx_start_write_1__SEL_1,
       MUX_spi_rg_tx_rx_start_write_1__SEL_3,
       MUX_spi_rg_tx_rx_start_write_1__VAL_1,
       MUX_spi_tx_data_en_write_1__SEL_1,
       MUX_spi_wr_spi_out_io1_write_1__SEL_1,
       MUX_spi_wr_spi_out_io1_write_1__SEL_3,
       MUX_spi_wr_spi_out_io1_write_1__VAL_1,
       MUX_spi_wr_spi_out_io1_write_1__VAL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h6403;
  reg [31 : 0] v__h8831;
  // synopsys translate_on

  // remaining internal signals
  wire [31 : 0] ff_wr_reqdD_OUT_BITS_66_TO_35__q1,
		x__h8923,
		x__h9005,
		x__h9030,
		x__h9143;
  wire [7 : 0] data__h7802,
	       data__h7824,
	       x__h5775,
	       x__h5980,
	       x__h7123,
	       x__h7261,
	       x__h9064;
  wire [6 : 0] y__h8205, y__h8212;
  wire [2 : 0] x1_burst_size__h10011, x1_burst_size__h9836, x__h4087;
  wire NOT_spi_rg_spi_cfg_cr2_6_BIT_15_04_05_AND_NOT__ETC___d260,
       NOT_spi_rg_spi_cfg_cr2_6_BIT_15_04_05_AND_NOT__ETC___d262,
       NOT_spi_tx_fifo_i_notEmpty__08_13_AND_NOT_spi__ETC___d186,
       spi_rg_bit_count_75_EQ_spi_rg_spi_cfg_cr1_BITS_ETC___d243,
       spi_rg_bit_count_75_EQ_spi_rg_spi_cfg_cr1_BITS_ETC___d246,
       spi_rg_data_counter_0_EQ_6_56_AND_NOT_spi_wr_c_ETC___d168,
       spi_rg_data_counter_0_EQ_7_59_AND_NOT_spi_wr_c_ETC___d164,
       spi_rg_data_counter_0_ULT_11___d34,
       spi_rg_data_counter_0_ULT_12___d21,
       spi_rg_data_counter_0_ULT_6_52_AND_NOT_spi_wr__ETC___d166,
       spi_rg_data_counter_0_ULT_6_52_AND_NOT_spi_wr__ETC___d169,
       spi_rg_data_counter_0_ULT_6_52_OR_spi_rg_data__ETC___d172,
       spi_rg_data_counter_0_ULT_6___d152,
       spi_rg_data_counter_0_ULT_7___d219,
       spi_rg_data_counter_0_ULT_8_14_AND_spi_rx_fifo_ETC___d218,
       spi_rg_data_counter_0_ULT_8_14_AND_spi_rx_fifo_ETC___d225,
       spi_rg_data_counter_0_ULT_8___d214,
       spi_rg_spi_cfg_cr1_BITS_5_TO_3_0_EQ_spi_rg_clk_ETC___d92,
       spi_rg_spi_cfg_cr2_6_BIT_15_04_OR_spi_rg_trans_ETC___d259,
       spi_wr_clk_en_wget__34_OR_spi_rg_spi_cfg_cr1_B_ETC___d139,
       x__h4103;

  // value method io_mosi
  assign io_mosi = spi_wr_spi_out_io1 ;

  // value method io_sclk
  assign io_sclk = spi_rg_nss ? spi_rg_spi_cfg_cr1[1] : spi_rg_clk ;

  // value method io_nss
  assign io_nss = spi_rg_nss ;

  // action method io_miso
  assign CAN_FIRE_io_miso = 1'd1 ;
  assign WILL_FIRE_io_miso = 1'd1 ;

  // action method slave_m_awvalid
  assign CAN_FIRE_slave_m_awvalid = 1'd1 ;
  assign WILL_FIRE_slave_m_awvalid = 1'd1 ;

  // value method slave_m_awready
  assign slave_awready = s_xactor_spi_f_wr_addr_FULL_N ;

  // action method slave_m_wvalid
  assign CAN_FIRE_slave_m_wvalid = 1'd1 ;
  assign WILL_FIRE_slave_m_wvalid = 1'd1 ;

  // value method slave_m_wready
  assign slave_wready = s_xactor_spi_f_wr_data_FULL_N ;

  // value method slave_m_bvalid
  assign slave_bvalid = s_xactor_spi_f_wr_resp_EMPTY_N ;

  // value method slave_m_bresp
  assign slave_bresp = s_xactor_spi_f_wr_resp_D_OUT ;

  // action method slave_m_bready
  assign CAN_FIRE_slave_m_bready = 1'd1 ;
  assign WILL_FIRE_slave_m_bready = 1'd1 ;

  // action method slave_m_arvalid
  assign CAN_FIRE_slave_m_arvalid = 1'd1 ;
  assign WILL_FIRE_slave_m_arvalid = 1'd1 ;

  // value method slave_m_arready
  assign slave_arready = s_xactor_spi_f_rd_addr_FULL_N ;

  // value method slave_m_rvalid
  assign slave_rvalid = s_xactor_spi_f_rd_data_EMPTY_N ;

  // value method slave_m_rresp
  assign slave_rresp = s_xactor_spi_f_rd_data_D_OUT[33:32] ;

  // value method slave_m_rdata
  assign slave_rdata = s_xactor_spi_f_rd_data_D_OUT[31:0] ;

  // action method slave_m_rready
  assign CAN_FIRE_slave_m_rready = 1'd1 ;
  assign WILL_FIRE_slave_m_rready = 1'd1 ;

  // submodule ff_rd_req
  SyncFIFO1 #(.dataWidth(32'd35)) ff_rd_req(.sCLK(CLK),
					    .dCLK(CLK),
					    .sRST(RST_N),
					    .sD_IN(ff_rd_req_sD_IN),
					    .sENQ(ff_rd_req_sENQ),
					    .dDEQ(ff_rd_req_dDEQ),
					    .sFULL_N(ff_rd_req_sFULL_N),
					    .dEMPTY_N(ff_rd_req_dEMPTY_N),
					    .dD_OUT(ff_rd_req_dD_OUT));

  // submodule ff_sync_rd_resp
  SyncFIFO1 #(.dataWidth(32'd32)) ff_sync_rd_resp(.sCLK(CLK),
						  .dCLK(CLK),
						  .sRST(RST_N),
						  .sD_IN(ff_sync_rd_resp_sD_IN),
						  .sENQ(ff_sync_rd_resp_sENQ),
						  .dDEQ(ff_sync_rd_resp_dDEQ),
						  .sFULL_N(ff_sync_rd_resp_sFULL_N),
						  .dEMPTY_N(ff_sync_rd_resp_dEMPTY_N),
						  .dD_OUT(ff_sync_rd_resp_dD_OUT));

  // submodule ff_wr_req
  SyncFIFO1 #(.dataWidth(32'd67)) ff_wr_req(.sCLK(CLK),
					    .dCLK(CLK),
					    .sRST(RST_N),
					    .sD_IN(ff_wr_req_sD_IN),
					    .sENQ(ff_wr_req_sENQ),
					    .dDEQ(ff_wr_req_dDEQ),
					    .sFULL_N(ff_wr_req_sFULL_N),
					    .dEMPTY_N(ff_wr_req_dEMPTY_N),
					    .dD_OUT(ff_wr_req_dD_OUT));

  // submodule s_xactor_spi_f_rd_addr
  FIFO2 #(.width(32'd37), .guarded(1'd1)) s_xactor_spi_f_rd_addr(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(s_xactor_spi_f_rd_addr_D_IN),
								 .ENQ(s_xactor_spi_f_rd_addr_ENQ),
								 .DEQ(s_xactor_spi_f_rd_addr_DEQ),
								 .CLR(s_xactor_spi_f_rd_addr_CLR),
								 .D_OUT(s_xactor_spi_f_rd_addr_D_OUT),
								 .FULL_N(s_xactor_spi_f_rd_addr_FULL_N),
								 .EMPTY_N(s_xactor_spi_f_rd_addr_EMPTY_N));

  // submodule s_xactor_spi_f_rd_data
  FIFO2 #(.width(32'd34), .guarded(1'd1)) s_xactor_spi_f_rd_data(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(s_xactor_spi_f_rd_data_D_IN),
								 .ENQ(s_xactor_spi_f_rd_data_ENQ),
								 .DEQ(s_xactor_spi_f_rd_data_DEQ),
								 .CLR(s_xactor_spi_f_rd_data_CLR),
								 .D_OUT(s_xactor_spi_f_rd_data_D_OUT),
								 .FULL_N(s_xactor_spi_f_rd_data_FULL_N),
								 .EMPTY_N(s_xactor_spi_f_rd_data_EMPTY_N));

  // submodule s_xactor_spi_f_wr_addr
  FIFO2 #(.width(32'd37), .guarded(1'd1)) s_xactor_spi_f_wr_addr(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(s_xactor_spi_f_wr_addr_D_IN),
								 .ENQ(s_xactor_spi_f_wr_addr_ENQ),
								 .DEQ(s_xactor_spi_f_wr_addr_DEQ),
								 .CLR(s_xactor_spi_f_wr_addr_CLR),
								 .D_OUT(s_xactor_spi_f_wr_addr_D_OUT),
								 .FULL_N(s_xactor_spi_f_wr_addr_FULL_N),
								 .EMPTY_N(s_xactor_spi_f_wr_addr_EMPTY_N));

  // submodule s_xactor_spi_f_wr_data
  FIFO2 #(.width(32'd36), .guarded(1'd1)) s_xactor_spi_f_wr_data(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(s_xactor_spi_f_wr_data_D_IN),
								 .ENQ(s_xactor_spi_f_wr_data_ENQ),
								 .DEQ(s_xactor_spi_f_wr_data_DEQ),
								 .CLR(s_xactor_spi_f_wr_data_CLR),
								 .D_OUT(s_xactor_spi_f_wr_data_D_OUT),
								 .FULL_N(s_xactor_spi_f_wr_data_FULL_N),
								 .EMPTY_N(s_xactor_spi_f_wr_data_EMPTY_N));

  // submodule s_xactor_spi_f_wr_resp
  FIFO2 #(.width(32'd2), .guarded(1'd1)) s_xactor_spi_f_wr_resp(.RST(RST_N),
								.CLK(CLK),
								.D_IN(s_xactor_spi_f_wr_resp_D_IN),
								.ENQ(s_xactor_spi_f_wr_resp_ENQ),
								.DEQ(s_xactor_spi_f_wr_resp_DEQ),
								.CLR(s_xactor_spi_f_wr_resp_CLR),
								.D_OUT(s_xactor_spi_f_wr_resp_D_OUT),
								.FULL_N(s_xactor_spi_f_wr_resp_FULL_N),
								.EMPTY_N(s_xactor_spi_f_wr_resp_EMPTY_N));

  // submodule spi_rx_fifo
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd12),
	      .p3cntr_width(32'd4),
	      .guarded(1'd0)) spi_rx_fifo(.RST(RST_N),
					  .CLK(CLK),
					  .D_IN(spi_rx_fifo_D_IN),
					  .ENQ(spi_rx_fifo_ENQ),
					  .DEQ(spi_rx_fifo_DEQ),
					  .CLR(spi_rx_fifo_CLR),
					  .D_OUT(spi_rx_fifo_D_OUT),
					  .FULL_N(spi_rx_fifo_FULL_N),
					  .EMPTY_N(spi_rx_fifo_EMPTY_N));

  // submodule spi_tx_fifo
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd12),
	      .p3cntr_width(32'd4),
	      .guarded(1'd0)) spi_tx_fifo(.RST(RST_N),
					  .CLK(CLK),
					  .D_IN(spi_tx_fifo_D_IN),
					  .ENQ(spi_tx_fifo_ENQ),
					  .DEQ(spi_tx_fifo_DEQ),
					  .CLR(spi_tx_fifo_CLR),
					  .D_OUT(spi_tx_fifo_D_OUT),
					  .FULL_N(),
					  .EMPTY_N(spi_tx_fifo_EMPTY_N));

  // rule RL_rl_write_request_from_core
  assign CAN_FIRE_RL_rl_write_request_from_core =
	     ff_wr_req_sFULL_N && s_xactor_spi_f_wr_addr_EMPTY_N &&
	     s_xactor_spi_f_wr_data_EMPTY_N &&
	     s_xactor_spi_f_wr_resp_FULL_N ;
  assign WILL_FIRE_RL_rl_write_request_from_core =
	     CAN_FIRE_RL_rl_write_request_from_core ;

  // rule RL_rl_write_request_to_controller
  assign CAN_FIRE_RL_rl_write_request_to_controller = ff_wr_req_dEMPTY_N ;
  assign WILL_FIRE_RL_rl_write_request_to_controller = ff_wr_req_dEMPTY_N ;

  // rule RL_rl_read_request_from_core
  assign CAN_FIRE_RL_rl_read_request_from_core =
	     ff_rd_req_sFULL_N && s_xactor_spi_f_rd_addr_EMPTY_N ;
  assign WILL_FIRE_RL_rl_read_request_from_core =
	     CAN_FIRE_RL_rl_read_request_from_core ;

  // rule RL_rl_read_request_to_controller
  assign CAN_FIRE_RL_rl_read_request_to_controller = ff_rd_req_dEMPTY_N ;
  assign WILL_FIRE_RL_rl_read_request_to_controller = ff_rd_req_dEMPTY_N ;

  // rule RL_rl_read_response_to_core
  assign CAN_FIRE_RL_rl_read_response_to_core =
	     ff_sync_rd_resp_dEMPTY_N && s_xactor_spi_f_rd_data_FULL_N ;
  assign WILL_FIRE_RL_rl_read_response_to_core =
	     CAN_FIRE_RL_rl_read_response_to_core ;

  // rule RL_spi_rl_clock_phase_enable
  assign CAN_FIRE_RL_spi_rl_clock_phase_enable = 1'd1 ;
  assign WILL_FIRE_RL_spi_rl_clock_phase_enable = 1'd1 ;

  // rule RL_spi_rl_bidimode_bidioe
  assign CAN_FIRE_RL_spi_rl_bidimode_bidioe = 1'd1 ;
  assign WILL_FIRE_RL_spi_rl_bidimode_bidioe = 1'd1 ;

  // rule RL_spi_rl_read_from_cfg
  assign CAN_FIRE_RL_spi_rl_read_from_cfg = ff_rd_req_dEMPTY_N ;
  assign WILL_FIRE_RL_spi_rl_read_from_cfg = ff_rd_req_dEMPTY_N ;

  // rule RL_rl_read_response_from_controller
  assign CAN_FIRE_RL_rl_read_response_from_controller =
	     ff_sync_rd_resp_sFULL_N && ff_rd_req_dEMPTY_N ;
  assign WILL_FIRE_RL_rl_read_response_from_controller =
	     CAN_FIRE_RL_rl_read_response_from_controller ;

  // rule RL_spi_rl_transmit_data_to_fifo
  assign CAN_FIRE_RL_spi_rl_transmit_data_to_fifo = spi_tx_data_en ;
  assign WILL_FIRE_RL_spi_rl_transmit_data_to_fifo = spi_tx_data_en ;

  // rule RL_spi_rl_generate_clk_baud_rate
  assign CAN_FIRE_RL_spi_rl_generate_clk_baud_rate = 1'd1 ;
  assign WILL_FIRE_RL_spi_rl_generate_clk_baud_rate = 1'd1 ;

  // rule RL_spi_rl_transmit_start
  assign CAN_FIRE_RL_spi_rl_transmit_start =
	     spi_rg_transmit_state == 2'd1 && !spi_rg_nss ;
  assign WILL_FIRE_RL_spi_rl_transmit_start =
	     CAN_FIRE_RL_spi_rl_transmit_start &&
	     !WILL_FIRE_RL_spi_rl_abort_tx_rx ;

  // rule RL_spi_rl_data_transmit
  assign CAN_FIRE_RL_spi_rl_data_transmit =
	     spi_rg_transmit_state == 2'd2 && !spi_rg_nss ;
  assign WILL_FIRE_RL_spi_rl_data_transmit =
	     CAN_FIRE_RL_spi_rl_data_transmit &&
	     !WILL_FIRE_RL_spi_rl_abort_tx_rx ;

  // rule RL_spi_rl_receive_start_receive
  assign CAN_FIRE_RL_spi_rl_receive_start_receive =
	     spi_rg_receive_state == 2'd1 && !spi_rg_nss ;
  assign WILL_FIRE_RL_spi_rl_receive_start_receive =
	     CAN_FIRE_RL_spi_rl_receive_start_receive &&
	     !WILL_FIRE_RL_spi_rl_abort_tx_rx ;

  // rule RL_spi_rl_chip_select_control
  assign CAN_FIRE_RL_spi_rl_chip_select_control = spi_rg_spi_cfg_cr1[9] ;
  assign WILL_FIRE_RL_spi_rl_chip_select_control =
	     spi_rg_spi_cfg_cr1[9] && !WILL_FIRE_RL_spi_rl_data_receive &&
	     !WILL_FIRE_RL_spi_rl_receive_idle &&
	     !WILL_FIRE_RL_spi_rl_transmit_idle ;

  // rule RL_spi_rl_data_receive
  assign CAN_FIRE_RL_spi_rl_data_receive =
	     spi_rg_receive_state == 2'd2 && !spi_rg_nss ;
  assign WILL_FIRE_RL_spi_rl_data_receive =
	     CAN_FIRE_RL_spi_rl_data_receive &&
	     !WILL_FIRE_RL_spi_rl_abort_tx_rx ;

  // rule RL_spi_rl_receive_done
  assign CAN_FIRE_RL_spi_rl_receive_done = spi_rg_receive_state == 2'd3 ;
  assign WILL_FIRE_RL_spi_rl_receive_done =
	     CAN_FIRE_RL_spi_rl_receive_done &&
	     !WILL_FIRE_RL_spi_rl_abort_tx_rx ;

  // rule RL_spi_rl_receive_fifo_to_read_datareg
  assign CAN_FIRE_RL_spi_rl_receive_fifo_to_read_datareg =
	     spi_rx_fifo_EMPTY_N && spi_rg_receive_state == 2'd0 ;
  assign WILL_FIRE_RL_spi_rl_receive_fifo_to_read_datareg =
	     CAN_FIRE_RL_spi_rl_receive_fifo_to_read_datareg ;

  // rule RL_spi_rl_abort_bitcount_finish
  assign CAN_FIRE_RL_spi_rl_abort_bitcount_finish =
	     !spi_rx_fifo_EMPTY_N && spi_rg_receive_state == 2'd0 &&
	     spi_rg_bit_count_75_EQ_spi_rg_spi_cfg_cr1_BITS_ETC___d246 ;
  assign WILL_FIRE_RL_spi_rl_abort_bitcount_finish =
	     CAN_FIRE_RL_spi_rl_abort_bitcount_finish &&
	     !WILL_FIRE_RL_spi_rl_data_transmit ;

  // rule RL_spi_rl_receive_idle
  assign CAN_FIRE_RL_spi_rl_receive_idle =
	     spi_rg_receive_state == 2'd0 &&
	     (spi_rg_spi_cfg_cr2[15] ||
	      spi_rg_spi_cfg_cr2[16] && spi_rg_tx_rx_start) &&
	     spi_rg_transmit_state == 2'd0 ;
  assign WILL_FIRE_RL_spi_rl_receive_idle =
	     CAN_FIRE_RL_spi_rl_receive_idle &&
	     !WILL_FIRE_RL_spi_rl_abort_tx_rx ;

  // rule RL_spi_rl_transmit_idle
  assign CAN_FIRE_RL_spi_rl_transmit_idle =
	     spi_rg_transmit_state == 2'd0 && !spi_tx_data_en &&
	     !spi_rg_spi_cfg_cr2[15] ;
  assign WILL_FIRE_RL_spi_rl_transmit_idle =
	     CAN_FIRE_RL_spi_rl_transmit_idle &&
	     !WILL_FIRE_RL_spi_rl_abort_tx_rx ;

  // rule RL_spi_rl_abort_tx_rx
  assign CAN_FIRE_RL_spi_rl_abort_tx_rx =
	     spi_wr_transfer_en_whas && !spi_wr_clk_en_wget &&
	     (spi_rg_spi_cfg_cr1[6] || spi_rg_spi_cfg_cr2[15]) &&
	     (spi_rg_bit_count_75_EQ_spi_rg_spi_cfg_cr1_BITS_ETC___d243 ||
	      spi_rg_bit_count_75_EQ_spi_rg_spi_cfg_cr1_BITS_ETC___d246) ;
  assign WILL_FIRE_RL_spi_rl_abort_tx_rx = CAN_FIRE_RL_spi_rl_abort_tx_rx ;

  // rule RL_spi_rl_write_to_cfg
  assign CAN_FIRE_RL_spi_rl_write_to_cfg = ff_wr_req_dEMPTY_N ;
  assign WILL_FIRE_RL_spi_rl_write_to_cfg =
	     ff_wr_req_dEMPTY_N &&
	     !WILL_FIRE_RL_spi_rl_receive_fifo_to_read_datareg &&
	     !spi_tx_data_en ;

  // inputs to muxes for submodule ports
  assign MUX_spi_rg_bit_count_write_1__SEL_1 =
	     WILL_FIRE_RL_spi_rl_abort_tx_rx && !spi_rg_spi_cfg_cr2[15] &&
	     spi_rg_transmit_state != 2'd0 &&
	     spi_rg_bit_count_75_EQ_spi_rg_spi_cfg_cr1_BITS_ETC___d243 ;
  assign MUX_spi_rg_bit_count_write_1__SEL_3 =
	     WILL_FIRE_RL_spi_rl_data_receive &&
	     spi_rg_data_counter_0_ULT_8_14_AND_spi_rx_fifo_ETC___d218 &&
	     spi_rg_data_counter_0_ULT_7___d219 ;
  assign MUX_spi_rg_bit_count_write_1__SEL_4 =
	     WILL_FIRE_RL_spi_rl_receive_start_receive &&
	     !spi_rg_spi_cfg_cr1[0] &&
	     spi_wr_clk_en_wget &&
	     spi_wr_transfer_en_whas ;
  assign MUX_spi_rg_bit_count_write_1__SEL_5 =
	     WILL_FIRE_RL_spi_rl_data_transmit &&
	     spi_rg_data_counter_0_ULT_6_52_OR_spi_rg_data__ETC___d172 ;
  assign MUX_spi_rg_data_counter_write_1__SEL_1 =
	     WILL_FIRE_RL_spi_rl_abort_tx_rx &&
	     spi_rg_spi_cfg_cr2_6_BIT_15_04_OR_spi_rg_trans_ETC___d259 ;
  assign MUX_spi_rg_data_counter_write_1__SEL_2 =
	     WILL_FIRE_RL_spi_rl_transmit_idle && spi_rg_spi_cfg_cr1[6] &&
	     spi_tx_fifo_EMPTY_N ;
  assign MUX_spi_rg_data_counter_write_1__SEL_6 =
	     WILL_FIRE_RL_spi_rl_data_receive &&
	     spi_rg_data_counter_0_ULT_8_14_AND_spi_rx_fifo_ETC___d225 ;
  assign MUX_spi_rg_data_counter_write_1__SEL_8 =
	     WILL_FIRE_RL_spi_rl_data_transmit &&
	     spi_rg_data_counter_0_ULT_6_52_AND_NOT_spi_wr__ETC___d169 ;
  assign MUX_spi_rg_data_counter_write_1__SEL_9 =
	     WILL_FIRE_RL_spi_rl_transmit_start &&
	     spi_wr_clk_en_wget__34_OR_spi_rg_spi_cfg_cr1_B_ETC___d139 ;
  assign MUX_spi_rg_data_counter_write_1__SEL_10 =
	     spi_tx_data_en && spi_rg_data_counter_0_ULT_12___d21 ;
  assign MUX_spi_rg_nss_write_1__SEL_1 =
	     WILL_FIRE_RL_spi_rl_abort_tx_rx &&
	     NOT_spi_rg_spi_cfg_cr2_6_BIT_15_04_05_AND_NOT__ETC___d262 ;
  assign MUX_spi_rg_nss_write_1__SEL_2 =
	     WILL_FIRE_RL_spi_rl_transmit_idle && spi_rg_spi_cfg_cr1[6] &&
	     (spi_tx_fifo_EMPTY_N || !spi_rg_spi_cfg_cr2[16]) ;
  assign MUX_spi_rg_nss_write_1__SEL_4 =
	     WILL_FIRE_RL_spi_rl_data_receive && !spi_rx_fifo_FULL_N &&
	     !spi_wr_clk_en_wget &&
	     spi_wr_transfer_en_whas ;
  assign MUX_spi_rg_nss_write_1__SEL_6 =
	     WILL_FIRE_RL_spi_rl_data_transmit &&
	     NOT_spi_tx_fifo_i_notEmpty__08_13_AND_NOT_spi__ETC___d186 &&
	     !spi_rg_spi_cfg_cr2[16] ;
  assign MUX_spi_rg_receive_state_write_1__SEL_3 =
	     WILL_FIRE_RL_spi_rl_receive_start_receive &&
	     spi_wr_clk_en_wget &&
	     spi_wr_transfer_en_whas ;
  assign MUX_spi_rg_spi_cfg_cr1_write_1__SEL_1 =
	     WILL_FIRE_RL_spi_rl_write_to_cfg &&
	     ff_wr_reqdD_OUT_BITS_66_TO_35__q1[7:0] == 8'h0 ;
  assign MUX_spi_rg_spi_cfg_cr2_write_1__SEL_1 =
	     WILL_FIRE_RL_spi_rl_write_to_cfg &&
	     ff_wr_reqdD_OUT_BITS_66_TO_35__q1[7:0] == 8'h04 ;
  assign MUX_spi_rg_spi_cfg_dr1_write_1__SEL_1 =
	     WILL_FIRE_RL_spi_rl_write_to_cfg &&
	     ff_wr_reqdD_OUT_BITS_66_TO_35__q1[7:0] == 8'h0C ;
  assign MUX_spi_rg_spi_cfg_dr2_write_1__SEL_1 =
	     WILL_FIRE_RL_spi_rl_write_to_cfg &&
	     ff_wr_reqdD_OUT_BITS_66_TO_35__q1[7:0] == 8'h10 ;
  assign MUX_spi_rg_spi_cfg_dr3_write_1__SEL_1 =
	     WILL_FIRE_RL_spi_rl_write_to_cfg &&
	     ff_wr_reqdD_OUT_BITS_66_TO_35__q1[7:0] == 8'h14 ;
  assign MUX_spi_rg_spi_cfg_sr_write_1__SEL_1 =
	     WILL_FIRE_RL_spi_rl_write_to_cfg &&
	     ff_wr_reqdD_OUT_BITS_66_TO_35__q1[7:0] == 8'h08 ;
  assign MUX_spi_rg_spi_cfg_sr_write_1__SEL_5 =
	     WILL_FIRE_RL_spi_rl_receive_fifo_to_read_datareg &&
	     !spi_rg_data_counter_0_ULT_12___d21 ;
  assign MUX_spi_rg_spi_cfg_sr_write_1__SEL_6 =
	     WILL_FIRE_RL_spi_rl_data_transmit &&
	     NOT_spi_tx_fifo_i_notEmpty__08_13_AND_NOT_spi__ETC___d186 ;
  assign MUX_spi_rg_transfer_done_write_1__SEL_2 =
	     WILL_FIRE_RL_spi_rl_data_transmit &&
	     (!spi_rg_data_counter_0_ULT_6___d152 || spi_wr_clk_en_wget) &&
	     spi_rg_data_counter_0_EQ_7_59_AND_NOT_spi_wr_c_ETC___d164 &&
	     !spi_tx_fifo_EMPTY_N ;
  assign MUX_spi_rg_tx_rx_start_write_1__SEL_1 =
	     WILL_FIRE_RL_spi_rl_abort_tx_rx &&
	     NOT_spi_rg_spi_cfg_cr2_6_BIT_15_04_05_AND_NOT__ETC___d260 ;
  assign MUX_spi_rg_tx_rx_start_write_1__SEL_3 =
	     WILL_FIRE_RL_spi_rl_data_transmit &&
	     NOT_spi_tx_fifo_i_notEmpty__08_13_AND_NOT_spi__ETC___d186 &&
	     spi_rg_spi_cfg_cr2[16] ;
  assign MUX_spi_tx_data_en_write_1__SEL_1 =
	     spi_tx_data_en && spi_rg_data_counter_0_ULT_12___d21 &&
	     !spi_rg_data_counter_0_ULT_11___d34 ;
  assign MUX_spi_wr_spi_out_io1_write_1__SEL_1 =
	     WILL_FIRE_RL_spi_rl_transmit_idle && spi_rg_spi_cfg_cr1[6] &&
	     spi_tx_fifo_EMPTY_N &&
	     !spi_rg_spi_cfg_cr1[0] ;
  assign MUX_spi_wr_spi_out_io1_write_1__SEL_3 =
	     WILL_FIRE_RL_spi_rl_data_transmit &&
	     spi_rg_data_counter_0_ULT_6_52_AND_NOT_spi_wr__ETC___d166 ;
  assign MUX_spi_rg_bit_count_write_1__VAL_3 = spi_rg_bit_count + 7'd1 ;
  assign MUX_spi_rg_data_counter_write_1__VAL_5 =
	     spi_rg_data_counter_0_ULT_12___d21 ? x__h9064 : 8'd0 ;
  assign MUX_spi_rg_data_counter_write_1__VAL_6 =
	     spi_rg_data_counter_0_ULT_8_14_AND_spi_rx_fifo_ETC___d218 ?
	       (spi_rg_data_counter_0_ULT_7___d219 ? x__h9064 : 8'd0) :
	       8'd0 ;
  assign MUX_spi_rg_data_counter_write_1__VAL_8 =
	     spi_rg_data_counter_0_ULT_6_52_OR_spi_rg_data__ETC___d172 ?
	       x__h9064 :
	       8'd0 ;
  assign MUX_spi_rg_data_counter_write_1__VAL_10 =
	     spi_rg_data_counter_0_ULT_11___d34 ? x__h9064 : 8'd0 ;
  assign MUX_spi_rg_data_rx_write_1__VAL_1 =
	     spi_rg_spi_cfg_cr1[7] ? x__h7123 : x__h7261 ;
  assign MUX_spi_rg_data_tx_write_1__VAL_2 =
	     spi_rg_spi_cfg_cr1[7] ? x__h5775 : x__h5980 ;
  assign MUX_spi_rg_data_tx_write_1__VAL_3 =
	     spi_rg_data_counter_0_ULT_6_52_OR_spi_rg_data__ETC___d172 ?
	       (spi_rg_spi_cfg_cr1[7] ? x__h5775 : x__h5980) :
	       spi_tx_fifo_D_OUT ;
  assign MUX_spi_rg_spi_cfg_cr1_write_1__VAL_2 =
	     { spi_rg_spi_cfg_cr1[31:7], 1'd0, spi_rg_spi_cfg_cr1[5:0] } ;
  assign MUX_spi_rg_spi_cfg_dr1_write_1__VAL_2 =
	     spi_rg_data_counter_0_ULT_12___d21 ? x__h8923 : x__h9143 ;
  assign MUX_spi_rg_spi_cfg_dr1_write_1__VAL_3 =
	     { 8'd0, spi_rg_spi_cfg_dr1[31:8] } ;
  assign MUX_spi_rg_spi_cfg_dr2_write_1__VAL_2 =
	     spi_rg_data_counter_0_ULT_12___d21 ?
	       x__h9005 :
	       spi_rg_spi_cfg_dr2 ;
  assign MUX_spi_rg_spi_cfg_dr3_write_1__VAL_2 =
	     spi_rg_data_counter_0_ULT_12___d21 ?
	       x__h9030 :
	       spi_rg_spi_cfg_dr3 ;
  assign MUX_spi_rg_spi_cfg_sr_write_1__VAL_2 =
	     { spi_rg_spi_cfg_sr[31:8], 1'd0, spi_rg_spi_cfg_sr[6:0] } ;
  assign MUX_spi_rg_spi_cfg_sr_write_1__VAL_3 =
	     { spi_rg_spi_cfg_sr[31:8], 1'd1, spi_rg_spi_cfg_sr[6:0] } ;
  assign MUX_spi_rg_spi_cfg_sr_write_1__VAL_4 =
	     { spi_rg_spi_cfg_sr[31:1], 1'd1 } ;
  assign MUX_spi_rg_tx_rx_start_write_1__VAL_1 =
	     !spi_rg_spi_cfg_cr2[15] && spi_rg_transmit_state != 2'd0 &&
	     spi_rg_bit_count_75_EQ_spi_rg_spi_cfg_cr1_BITS_ETC___d243 ;
  assign MUX_spi_rx_fifo_enq_1__VAL_1 = { spi_rg_data_rx[6:0], 1'd0 } ;
  assign MUX_spi_rx_fifo_enq_1__VAL_2 =
	     spi_rg_spi_cfg_cr1[7] ? data__h7802 : data__h7824 ;
  assign MUX_spi_wr_spi_out_io1_write_1__VAL_1 =
	     spi_rg_spi_cfg_cr1[7] ?
	       spi_tx_fifo_D_OUT[0] :
	       spi_tx_fifo_D_OUT[7] ;
  assign MUX_spi_wr_spi_out_io1_write_1__VAL_2 =
	     spi_rg_spi_cfg_cr1[7] ? spi_rg_data_tx[0] : spi_rg_data_tx[7] ;

  // inlined wires
  assign spi_wr_write_addr_wget = ff_wr_req_dD_OUT[66:35] ;
  assign spi_wr_rd_addr_wget = ff_rd_req_dD_OUT[34:3] ;
  always@(spi_wr_rd_addr_wget or
	  spi_rg_spi_cfg_txcrcr or
	  spi_rg_spi_cfg_cr1 or
	  spi_rg_spi_cfg_cr2 or
	  spi_rg_spi_cfg_sr or
	  spi_rg_spi_cfg_dr1 or
	  spi_rg_spi_cfg_dr2 or
	  spi_rg_spi_cfg_dr3 or spi_rg_spi_cfg_crcpr or spi_rg_spi_cfg_rxcrcr)
  begin
    case (spi_wr_rd_addr_wget[7:0])
      8'h0: spi_wr_rd_data_wget = spi_rg_spi_cfg_cr1;
      8'h04: spi_wr_rd_data_wget = spi_rg_spi_cfg_cr2;
      8'h08: spi_wr_rd_data_wget = spi_rg_spi_cfg_sr;
      8'h0C: spi_wr_rd_data_wget = spi_rg_spi_cfg_dr1;
      8'h10: spi_wr_rd_data_wget = spi_rg_spi_cfg_dr2;
      8'h14: spi_wr_rd_data_wget = spi_rg_spi_cfg_dr3;
      8'h18: spi_wr_rd_data_wget = spi_rg_spi_cfg_crcpr;
      8'h1C: spi_wr_rd_data_wget = spi_rg_spi_cfg_rxcrcr;
      default: spi_wr_rd_data_wget = spi_rg_spi_cfg_txcrcr;
    endcase
  end
  assign spi_wr_clk_en_wget =
	     spi_rg_spi_cfg_cr1[0] && spi_rg_spi_cfg_cr1[1] && !spi_rg_clk ||
	     spi_rg_spi_cfg_cr1[0] && !spi_rg_spi_cfg_cr1[1] && spi_rg_clk ||
	     !spi_rg_spi_cfg_cr1[0] &&
	     (spi_rg_spi_cfg_cr1[1] && spi_rg_clk ||
	      !spi_rg_spi_cfg_cr1[1] && !spi_rg_clk) ;
  assign spi_wr_transfer_en_whas =
	     !spi_rg_nss &&
	     spi_rg_spi_cfg_cr1_BITS_5_TO_3_0_EQ_spi_rg_clk_ETC___d92 ;
  assign _write_RL_spi_rl_data_transmit_EN_spi_rg_nss_wget =
	     NOT_spi_tx_fifo_i_notEmpty__08_13_AND_NOT_spi__ETC___d186 &&
	     !spi_rg_spi_cfg_cr2[16] ;
  assign _write_RL_spi_rl_data_receive_EN_spi_rg_spi_cfg_cr2_wget =
	     !spi_rx_fifo_FULL_N && !spi_wr_clk_en_wget &&
	     spi_wr_transfer_en_whas ;

  // register rg_rid
  assign rg_rid_D_IN = 4'h0 ;
  assign rg_rid_EN = 1'b0 ;

  // register spi_rg_bit_count
  always@(MUX_spi_rg_bit_count_write_1__SEL_1 or
	  WILL_FIRE_RL_spi_rl_receive_idle or
	  MUX_spi_rg_bit_count_write_1__SEL_3 or
	  MUX_spi_rg_bit_count_write_1__VAL_3 or
	  MUX_spi_rg_bit_count_write_1__SEL_4 or
	  MUX_spi_rg_bit_count_write_1__SEL_5)
  case (1'b1)
    MUX_spi_rg_bit_count_write_1__SEL_1 || WILL_FIRE_RL_spi_rl_receive_idle:
	spi_rg_bit_count_D_IN = 7'd0;
    MUX_spi_rg_bit_count_write_1__SEL_3:
	spi_rg_bit_count_D_IN = MUX_spi_rg_bit_count_write_1__VAL_3;
    MUX_spi_rg_bit_count_write_1__SEL_4:
	spi_rg_bit_count_D_IN = MUX_spi_rg_bit_count_write_1__VAL_3;
    MUX_spi_rg_bit_count_write_1__SEL_5:
	spi_rg_bit_count_D_IN = MUX_spi_rg_bit_count_write_1__VAL_3;
    default: spi_rg_bit_count_D_IN = 7'bxxxxxxx /* unspecified value */ ;
  endcase
  assign spi_rg_bit_count_EN =
	     WILL_FIRE_RL_spi_rl_data_transmit &&
	     spi_rg_data_counter_0_ULT_6_52_OR_spi_rg_data__ETC___d172 ||
	     WILL_FIRE_RL_spi_rl_abort_tx_rx && !spi_rg_spi_cfg_cr2[15] &&
	     spi_rg_transmit_state != 2'd0 &&
	     spi_rg_bit_count_75_EQ_spi_rg_spi_cfg_cr1_BITS_ETC___d243 ||
	     WILL_FIRE_RL_spi_rl_receive_start_receive &&
	     !spi_rg_spi_cfg_cr1[0] &&
	     spi_wr_clk_en_wget &&
	     spi_wr_transfer_en_whas ||
	     WILL_FIRE_RL_spi_rl_data_receive &&
	     spi_rg_data_counter_0_ULT_8_14_AND_spi_rx_fifo_ETC___d218 &&
	     spi_rg_data_counter_0_ULT_7___d219 ||
	     WILL_FIRE_RL_spi_rl_receive_idle ;

  // register spi_rg_clk
  assign spi_rg_clk_D_IN = spi_rg_nss ? spi_rg_spi_cfg_cr1[1] : x__h4103 ;
  assign spi_rg_clk_EN =
	     spi_rg_nss ||
	     spi_rg_spi_cfg_cr1_BITS_5_TO_3_0_EQ_spi_rg_clk_ETC___d92 ;

  // register spi_rg_clk_counter
  assign spi_rg_clk_counter_D_IN =
	     spi_rg_spi_cfg_cr1_BITS_5_TO_3_0_EQ_spi_rg_clk_ETC___d92 ?
	       3'd0 :
	       x__h4087 ;
  assign spi_rg_clk_counter_EN = !spi_rg_nss ;

  // register spi_rg_data_counter
  always@(MUX_spi_rg_data_counter_write_1__SEL_1 or
	  MUX_spi_rg_data_counter_write_1__SEL_2 or
	  WILL_FIRE_RL_spi_rl_receive_idle or
	  WILL_FIRE_RL_spi_rl_abort_bitcount_finish or
	  WILL_FIRE_RL_spi_rl_receive_fifo_to_read_datareg or
	  MUX_spi_rg_data_counter_write_1__VAL_5 or
	  MUX_spi_rg_data_counter_write_1__SEL_6 or
	  MUX_spi_rg_data_counter_write_1__VAL_6 or
	  MUX_spi_rg_bit_count_write_1__SEL_4 or
	  x__h9064 or
	  MUX_spi_rg_data_counter_write_1__SEL_8 or
	  MUX_spi_rg_data_counter_write_1__VAL_8 or
	  MUX_spi_rg_data_counter_write_1__SEL_9 or
	  MUX_spi_rg_data_counter_write_1__SEL_10 or
	  MUX_spi_rg_data_counter_write_1__VAL_10)
  case (1'b1)
    MUX_spi_rg_data_counter_write_1__SEL_1 ||
    MUX_spi_rg_data_counter_write_1__SEL_2 ||
    WILL_FIRE_RL_spi_rl_receive_idle ||
    WILL_FIRE_RL_spi_rl_abort_bitcount_finish:
	spi_rg_data_counter_D_IN = 8'd0;
    WILL_FIRE_RL_spi_rl_receive_fifo_to_read_datareg:
	spi_rg_data_counter_D_IN = MUX_spi_rg_data_counter_write_1__VAL_5;
    MUX_spi_rg_data_counter_write_1__SEL_6:
	spi_rg_data_counter_D_IN = MUX_spi_rg_data_counter_write_1__VAL_6;
    MUX_spi_rg_bit_count_write_1__SEL_4: spi_rg_data_counter_D_IN = x__h9064;
    MUX_spi_rg_data_counter_write_1__SEL_8:
	spi_rg_data_counter_D_IN = MUX_spi_rg_data_counter_write_1__VAL_8;
    MUX_spi_rg_data_counter_write_1__SEL_9:
	spi_rg_data_counter_D_IN = x__h9064;
    MUX_spi_rg_data_counter_write_1__SEL_10:
	spi_rg_data_counter_D_IN = MUX_spi_rg_data_counter_write_1__VAL_10;
    default: spi_rg_data_counter_D_IN = 8'bxxxxxxxx /* unspecified value */ ;
  endcase
  assign spi_rg_data_counter_EN =
	     spi_tx_data_en && spi_rg_data_counter_0_ULT_12___d21 ||
	     WILL_FIRE_RL_spi_rl_transmit_idle && spi_rg_spi_cfg_cr1[6] &&
	     spi_tx_fifo_EMPTY_N ||
	     WILL_FIRE_RL_spi_rl_abort_tx_rx &&
	     spi_rg_spi_cfg_cr2_6_BIT_15_04_OR_spi_rg_trans_ETC___d259 ||
	     WILL_FIRE_RL_spi_rl_transmit_start &&
	     spi_wr_clk_en_wget__34_OR_spi_rg_spi_cfg_cr1_B_ETC___d139 ||
	     WILL_FIRE_RL_spi_rl_data_transmit &&
	     spi_rg_data_counter_0_ULT_6_52_AND_NOT_spi_wr__ETC___d169 ||
	     WILL_FIRE_RL_spi_rl_receive_start_receive &&
	     !spi_rg_spi_cfg_cr1[0] &&
	     spi_wr_clk_en_wget &&
	     spi_wr_transfer_en_whas ||
	     WILL_FIRE_RL_spi_rl_data_receive &&
	     spi_rg_data_counter_0_ULT_8_14_AND_spi_rx_fifo_ETC___d225 ||
	     WILL_FIRE_RL_spi_rl_receive_fifo_to_read_datareg ||
	     WILL_FIRE_RL_spi_rl_abort_bitcount_finish ||
	     WILL_FIRE_RL_spi_rl_receive_idle ;

  // register spi_rg_data_rx
  assign spi_rg_data_rx_D_IN =
	     MUX_spi_rg_bit_count_write_1__SEL_4 ?
	       MUX_spi_rg_data_rx_write_1__VAL_1 :
	       MUX_spi_rg_data_rx_write_1__VAL_1 ;
  assign spi_rg_data_rx_EN =
	     WILL_FIRE_RL_spi_rl_receive_start_receive &&
	     !spi_rg_spi_cfg_cr1[0] &&
	     spi_wr_clk_en_wget &&
	     spi_wr_transfer_en_whas ||
	     WILL_FIRE_RL_spi_rl_data_receive &&
	     spi_rg_data_counter_0_ULT_8_14_AND_spi_rx_fifo_ETC___d218 &&
	     spi_rg_data_counter_0_ULT_7___d219 ;

  // register spi_rg_data_tx
  always@(MUX_spi_rg_data_counter_write_1__SEL_2 or
	  spi_tx_fifo_D_OUT or
	  MUX_spi_rg_data_counter_write_1__SEL_9 or
	  MUX_spi_rg_data_tx_write_1__VAL_2 or
	  MUX_spi_rg_data_counter_write_1__SEL_8 or
	  MUX_spi_rg_data_tx_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_spi_rg_data_counter_write_1__SEL_2:
	  spi_rg_data_tx_D_IN = spi_tx_fifo_D_OUT;
      MUX_spi_rg_data_counter_write_1__SEL_9:
	  spi_rg_data_tx_D_IN = MUX_spi_rg_data_tx_write_1__VAL_2;
      MUX_spi_rg_data_counter_write_1__SEL_8:
	  spi_rg_data_tx_D_IN = MUX_spi_rg_data_tx_write_1__VAL_3;
      default: spi_rg_data_tx_D_IN = 8'bxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign spi_rg_data_tx_EN =
	     WILL_FIRE_RL_spi_rl_transmit_idle && spi_rg_spi_cfg_cr1[6] &&
	     spi_tx_fifo_EMPTY_N ||
	     WILL_FIRE_RL_spi_rl_transmit_start &&
	     spi_wr_clk_en_wget__34_OR_spi_rg_spi_cfg_cr1_B_ETC___d139 ||
	     WILL_FIRE_RL_spi_rl_data_transmit &&
	     spi_rg_data_counter_0_ULT_6_52_AND_NOT_spi_wr__ETC___d169 ;

  // register spi_rg_nss
  always@(MUX_spi_rg_nss_write_1__SEL_1 or
	  MUX_spi_rg_nss_write_1__SEL_2 or
	  spi_tx_fifo_EMPTY_N or
	  WILL_FIRE_RL_spi_rl_receive_idle or
	  MUX_spi_rg_nss_write_1__SEL_4 or
	  WILL_FIRE_RL_spi_rl_chip_select_control or
	  spi_rg_spi_cfg_cr1 or MUX_spi_rg_nss_write_1__SEL_6)
  case (1'b1)
    MUX_spi_rg_nss_write_1__SEL_1: spi_rg_nss_D_IN = 1'd1;
    MUX_spi_rg_nss_write_1__SEL_2: spi_rg_nss_D_IN = !spi_tx_fifo_EMPTY_N;
    WILL_FIRE_RL_spi_rl_receive_idle: spi_rg_nss_D_IN = 1'd0;
    MUX_spi_rg_nss_write_1__SEL_4: spi_rg_nss_D_IN = 1'd1;
    WILL_FIRE_RL_spi_rl_chip_select_control:
	spi_rg_nss_D_IN = spi_rg_spi_cfg_cr1[8];
    MUX_spi_rg_nss_write_1__SEL_6: spi_rg_nss_D_IN = 1'd1;
    default: spi_rg_nss_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign spi_rg_nss_EN =
	     WILL_FIRE_RL_spi_rl_data_receive && !spi_rx_fifo_FULL_N &&
	     !spi_wr_clk_en_wget &&
	     spi_wr_transfer_en_whas ||
	     WILL_FIRE_RL_spi_rl_transmit_idle && spi_rg_spi_cfg_cr1[6] &&
	     (spi_tx_fifo_EMPTY_N || !spi_rg_spi_cfg_cr2[16]) ||
	     WILL_FIRE_RL_spi_rl_data_transmit &&
	     NOT_spi_tx_fifo_i_notEmpty__08_13_AND_NOT_spi__ETC___d186 &&
	     !spi_rg_spi_cfg_cr2[16] ||
	     WILL_FIRE_RL_spi_rl_abort_tx_rx &&
	     NOT_spi_rg_spi_cfg_cr2_6_BIT_15_04_05_AND_NOT__ETC___d262 ||
	     WILL_FIRE_RL_spi_rl_chip_select_control ||
	     WILL_FIRE_RL_spi_rl_receive_idle ;

  // register spi_rg_receive_state
  always@(MUX_spi_rg_data_counter_write_1__SEL_1 or
	  WILL_FIRE_RL_spi_rl_receive_done or
	  WILL_FIRE_RL_spi_rl_receive_idle or
	  MUX_spi_rg_receive_state_write_1__SEL_3 or
	  MUX_spi_rg_nss_write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_spi_rg_data_counter_write_1__SEL_1 ||
      WILL_FIRE_RL_spi_rl_receive_done:
	  spi_rg_receive_state_D_IN = 2'd0;
      WILL_FIRE_RL_spi_rl_receive_idle: spi_rg_receive_state_D_IN = 2'd1;
      MUX_spi_rg_receive_state_write_1__SEL_3:
	  spi_rg_receive_state_D_IN = 2'd2;
      MUX_spi_rg_nss_write_1__SEL_4: spi_rg_receive_state_D_IN = 2'd3;
      default: spi_rg_receive_state_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign spi_rg_receive_state_EN =
	     WILL_FIRE_RL_spi_rl_data_receive && !spi_rx_fifo_FULL_N &&
	     !spi_wr_clk_en_wget &&
	     spi_wr_transfer_en_whas ||
	     WILL_FIRE_RL_spi_rl_abort_tx_rx &&
	     spi_rg_spi_cfg_cr2_6_BIT_15_04_OR_spi_rg_trans_ETC___d259 ||
	     WILL_FIRE_RL_spi_rl_receive_start_receive &&
	     spi_wr_clk_en_wget &&
	     spi_wr_transfer_en_whas ||
	     WILL_FIRE_RL_spi_rl_receive_done ||
	     WILL_FIRE_RL_spi_rl_receive_idle ;

  // register spi_rg_spi_cfg_cr1
  assign spi_rg_spi_cfg_cr1_D_IN =
	     MUX_spi_rg_spi_cfg_cr1_write_1__SEL_1 ?
	       ff_wr_req_dD_OUT[31:0] :
	       MUX_spi_rg_spi_cfg_cr1_write_1__VAL_2 ;
  assign spi_rg_spi_cfg_cr1_EN =
	     WILL_FIRE_RL_spi_rl_write_to_cfg &&
	     spi_wr_write_addr_wget[7:0] == 8'h0 ||
	     WILL_FIRE_RL_spi_rl_transmit_idle && !spi_tx_fifo_EMPTY_N &&
	     spi_rg_spi_cfg_cr1[6] &&
	     !spi_rg_spi_cfg_cr2[16] ;

  // register spi_rg_spi_cfg_cr2
  assign spi_rg_spi_cfg_cr2_D_IN =
	     MUX_spi_rg_spi_cfg_cr2_write_1__SEL_1 ?
	       ff_wr_req_dD_OUT[31:0] :
	       32'd0 ;
  assign spi_rg_spi_cfg_cr2_EN =
	     WILL_FIRE_RL_spi_rl_data_receive && !spi_rx_fifo_FULL_N &&
	     !spi_wr_clk_en_wget &&
	     spi_wr_transfer_en_whas ||
	     WILL_FIRE_RL_spi_rl_abort_tx_rx &&
	     spi_rg_spi_cfg_cr2_6_BIT_15_04_OR_spi_rg_trans_ETC___d259 ||
	     WILL_FIRE_RL_spi_rl_write_to_cfg &&
	     spi_wr_write_addr_wget[7:0] == 8'h04 ;

  // register spi_rg_spi_cfg_crcpr
  assign spi_rg_spi_cfg_crcpr_D_IN = ff_wr_req_dD_OUT[31:0] ;
  assign spi_rg_spi_cfg_crcpr_EN =
	     WILL_FIRE_RL_spi_rl_write_to_cfg &&
	     spi_wr_write_addr_wget[7:0] == 8'h18 ;

  // register spi_rg_spi_cfg_dr1
  always@(MUX_spi_rg_spi_cfg_dr1_write_1__SEL_1 or
	  ff_wr_req_dD_OUT or
	  WILL_FIRE_RL_spi_rl_receive_fifo_to_read_datareg or
	  MUX_spi_rg_spi_cfg_dr1_write_1__VAL_2 or
	  MUX_spi_rg_data_counter_write_1__SEL_10 or
	  MUX_spi_rg_spi_cfg_dr1_write_1__VAL_3)
  case (1'b1)
    MUX_spi_rg_spi_cfg_dr1_write_1__SEL_1:
	spi_rg_spi_cfg_dr1_D_IN = ff_wr_req_dD_OUT[31:0];
    WILL_FIRE_RL_spi_rl_receive_fifo_to_read_datareg:
	spi_rg_spi_cfg_dr1_D_IN = MUX_spi_rg_spi_cfg_dr1_write_1__VAL_2;
    MUX_spi_rg_data_counter_write_1__SEL_10:
	spi_rg_spi_cfg_dr1_D_IN = MUX_spi_rg_spi_cfg_dr1_write_1__VAL_3;
    default: spi_rg_spi_cfg_dr1_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign spi_rg_spi_cfg_dr1_EN =
	     spi_tx_data_en && spi_rg_data_counter_0_ULT_12___d21 ||
	     WILL_FIRE_RL_spi_rl_write_to_cfg &&
	     spi_wr_write_addr_wget[7:0] == 8'h0C ||
	     WILL_FIRE_RL_spi_rl_receive_fifo_to_read_datareg ;

  // register spi_rg_spi_cfg_dr2
  always@(MUX_spi_rg_spi_cfg_dr2_write_1__SEL_1 or
	  ff_wr_req_dD_OUT or
	  WILL_FIRE_RL_spi_rl_receive_fifo_to_read_datareg or
	  MUX_spi_rg_spi_cfg_dr2_write_1__VAL_2 or
	  MUX_spi_rg_data_counter_write_1__SEL_10 or x__h9005)
  case (1'b1)
    MUX_spi_rg_spi_cfg_dr2_write_1__SEL_1:
	spi_rg_spi_cfg_dr2_D_IN = ff_wr_req_dD_OUT[31:0];
    WILL_FIRE_RL_spi_rl_receive_fifo_to_read_datareg:
	spi_rg_spi_cfg_dr2_D_IN = MUX_spi_rg_spi_cfg_dr2_write_1__VAL_2;
    MUX_spi_rg_data_counter_write_1__SEL_10:
	spi_rg_spi_cfg_dr2_D_IN = x__h9005;
    default: spi_rg_spi_cfg_dr2_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign spi_rg_spi_cfg_dr2_EN =
	     spi_tx_data_en && spi_rg_data_counter_0_ULT_12___d21 ||
	     WILL_FIRE_RL_spi_rl_write_to_cfg &&
	     spi_wr_write_addr_wget[7:0] == 8'h10 ||
	     WILL_FIRE_RL_spi_rl_receive_fifo_to_read_datareg ;

  // register spi_rg_spi_cfg_dr3
  always@(MUX_spi_rg_spi_cfg_dr3_write_1__SEL_1 or
	  ff_wr_req_dD_OUT or
	  WILL_FIRE_RL_spi_rl_receive_fifo_to_read_datareg or
	  MUX_spi_rg_spi_cfg_dr3_write_1__VAL_2 or
	  MUX_spi_rg_data_counter_write_1__SEL_10 or x__h9030)
  case (1'b1)
    MUX_spi_rg_spi_cfg_dr3_write_1__SEL_1:
	spi_rg_spi_cfg_dr3_D_IN = ff_wr_req_dD_OUT[31:0];
    WILL_FIRE_RL_spi_rl_receive_fifo_to_read_datareg:
	spi_rg_spi_cfg_dr3_D_IN = MUX_spi_rg_spi_cfg_dr3_write_1__VAL_2;
    MUX_spi_rg_data_counter_write_1__SEL_10:
	spi_rg_spi_cfg_dr3_D_IN = x__h9030;
    default: spi_rg_spi_cfg_dr3_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign spi_rg_spi_cfg_dr3_EN =
	     spi_tx_data_en && spi_rg_data_counter_0_ULT_12___d21 ||
	     WILL_FIRE_RL_spi_rl_write_to_cfg &&
	     spi_wr_write_addr_wget[7:0] == 8'h14 ||
	     WILL_FIRE_RL_spi_rl_receive_fifo_to_read_datareg ;

  // register spi_rg_spi_cfg_rxcrcr
  assign spi_rg_spi_cfg_rxcrcr_D_IN = ff_wr_req_dD_OUT[31:0] ;
  assign spi_rg_spi_cfg_rxcrcr_EN =
	     WILL_FIRE_RL_spi_rl_write_to_cfg &&
	     spi_wr_write_addr_wget[7:0] == 8'h1C ;

  // register spi_rg_spi_cfg_sr
  always@(MUX_spi_rg_spi_cfg_sr_write_1__SEL_1 or
	  ff_wr_req_dD_OUT or
	  MUX_spi_rg_bit_count_write_1__SEL_1 or
	  MUX_spi_rg_spi_cfg_sr_write_1__VAL_2 or
	  MUX_spi_rg_data_counter_write_1__SEL_2 or
	  MUX_spi_rg_spi_cfg_sr_write_1__VAL_3 or
	  WILL_FIRE_RL_spi_rl_abort_bitcount_finish or
	  MUX_spi_rg_spi_cfg_sr_write_1__VAL_4 or
	  MUX_spi_rg_spi_cfg_sr_write_1__SEL_5 or
	  MUX_spi_rg_spi_cfg_sr_write_1__SEL_6)
  case (1'b1)
    MUX_spi_rg_spi_cfg_sr_write_1__SEL_1:
	spi_rg_spi_cfg_sr_D_IN = ff_wr_req_dD_OUT[31:0];
    MUX_spi_rg_bit_count_write_1__SEL_1:
	spi_rg_spi_cfg_sr_D_IN = MUX_spi_rg_spi_cfg_sr_write_1__VAL_2;
    MUX_spi_rg_data_counter_write_1__SEL_2:
	spi_rg_spi_cfg_sr_D_IN = MUX_spi_rg_spi_cfg_sr_write_1__VAL_3;
    WILL_FIRE_RL_spi_rl_abort_bitcount_finish:
	spi_rg_spi_cfg_sr_D_IN = MUX_spi_rg_spi_cfg_sr_write_1__VAL_4;
    MUX_spi_rg_spi_cfg_sr_write_1__SEL_5:
	spi_rg_spi_cfg_sr_D_IN = MUX_spi_rg_spi_cfg_sr_write_1__VAL_4;
    MUX_spi_rg_spi_cfg_sr_write_1__SEL_6:
	spi_rg_spi_cfg_sr_D_IN = MUX_spi_rg_spi_cfg_sr_write_1__VAL_2;
    default: spi_rg_spi_cfg_sr_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign spi_rg_spi_cfg_sr_EN =
	     WILL_FIRE_RL_spi_rl_transmit_idle && spi_rg_spi_cfg_cr1[6] &&
	     spi_tx_fifo_EMPTY_N ||
	     WILL_FIRE_RL_spi_rl_data_transmit &&
	     NOT_spi_tx_fifo_i_notEmpty__08_13_AND_NOT_spi__ETC___d186 ||
	     WILL_FIRE_RL_spi_rl_abort_tx_rx && !spi_rg_spi_cfg_cr2[15] &&
	     spi_rg_transmit_state != 2'd0 &&
	     spi_rg_bit_count_75_EQ_spi_rg_spi_cfg_cr1_BITS_ETC___d243 ||
	     WILL_FIRE_RL_spi_rl_write_to_cfg &&
	     spi_wr_write_addr_wget[7:0] == 8'h08 ||
	     WILL_FIRE_RL_spi_rl_receive_fifo_to_read_datareg &&
	     !spi_rg_data_counter_0_ULT_12___d21 ||
	     WILL_FIRE_RL_spi_rl_abort_bitcount_finish ;

  // register spi_rg_spi_cfg_txcrcr
  assign spi_rg_spi_cfg_txcrcr_D_IN = ff_wr_req_dD_OUT[31:0] ;
  assign spi_rg_spi_cfg_txcrcr_EN =
	     WILL_FIRE_RL_spi_rl_write_to_cfg &&
	     spi_wr_write_addr_wget[7:0] == 8'h20 ;

  // register spi_rg_transfer_done
  assign spi_rg_transfer_done_D_IN = !MUX_spi_rg_data_counter_write_1__SEL_2 ;
  assign spi_rg_transfer_done_EN =
	     WILL_FIRE_RL_spi_rl_transmit_idle && spi_rg_spi_cfg_cr1[6] &&
	     spi_tx_fifo_EMPTY_N ||
	     MUX_spi_rg_transfer_done_write_1__SEL_2 ;

  // register spi_rg_transmit_state
  always@(MUX_spi_rg_spi_cfg_sr_write_1__SEL_6 or
	  MUX_spi_rg_bit_count_write_1__SEL_1 or
	  MUX_spi_rg_data_counter_write_1__SEL_2 or
	  MUX_spi_rg_data_counter_write_1__SEL_9)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_spi_rg_spi_cfg_sr_write_1__SEL_6 ||
      MUX_spi_rg_bit_count_write_1__SEL_1:
	  spi_rg_transmit_state_D_IN = 2'd0;
      MUX_spi_rg_data_counter_write_1__SEL_2:
	  spi_rg_transmit_state_D_IN = 2'd1;
      MUX_spi_rg_data_counter_write_1__SEL_9:
	  spi_rg_transmit_state_D_IN = 2'd2;
      default: spi_rg_transmit_state_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign spi_rg_transmit_state_EN =
	     WILL_FIRE_RL_spi_rl_transmit_idle && spi_rg_spi_cfg_cr1[6] &&
	     spi_tx_fifo_EMPTY_N ||
	     WILL_FIRE_RL_spi_rl_data_transmit &&
	     NOT_spi_tx_fifo_i_notEmpty__08_13_AND_NOT_spi__ETC___d186 ||
	     WILL_FIRE_RL_spi_rl_abort_tx_rx && !spi_rg_spi_cfg_cr2[15] &&
	     spi_rg_transmit_state != 2'd0 &&
	     spi_rg_bit_count_75_EQ_spi_rg_spi_cfg_cr1_BITS_ETC___d243 ||
	     WILL_FIRE_RL_spi_rl_transmit_start &&
	     spi_wr_clk_en_wget__34_OR_spi_rg_spi_cfg_cr1_B_ETC___d139 ;

  // register spi_rg_tx_rx_start
  always@(MUX_spi_rg_tx_rx_start_write_1__SEL_1 or
	  MUX_spi_rg_tx_rx_start_write_1__VAL_1 or
	  MUX_spi_rg_nss_write_1__SEL_4 or
	  MUX_spi_rg_tx_rx_start_write_1__SEL_3)
  case (1'b1)
    MUX_spi_rg_tx_rx_start_write_1__SEL_1:
	spi_rg_tx_rx_start_D_IN = MUX_spi_rg_tx_rx_start_write_1__VAL_1;
    MUX_spi_rg_nss_write_1__SEL_4: spi_rg_tx_rx_start_D_IN = 1'd0;
    MUX_spi_rg_tx_rx_start_write_1__SEL_3: spi_rg_tx_rx_start_D_IN = 1'd1;
    default: spi_rg_tx_rx_start_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign spi_rg_tx_rx_start_EN =
	     WILL_FIRE_RL_spi_rl_data_receive && !spi_rx_fifo_FULL_N &&
	     !spi_wr_clk_en_wget &&
	     spi_wr_transfer_en_whas ||
	     WILL_FIRE_RL_spi_rl_data_transmit &&
	     NOT_spi_tx_fifo_i_notEmpty__08_13_AND_NOT_spi__ETC___d186 &&
	     spi_rg_spi_cfg_cr2[16] ||
	     WILL_FIRE_RL_spi_rl_abort_tx_rx &&
	     NOT_spi_rg_spi_cfg_cr2_6_BIT_15_04_05_AND_NOT__ETC___d260 ;

  // register spi_tx_data_en
  assign spi_tx_data_en_D_IN = !MUX_spi_tx_data_en_write_1__SEL_1 ;
  assign spi_tx_data_en_EN =
	     spi_tx_data_en && spi_rg_data_counter_0_ULT_12___d21 &&
	     !spi_rg_data_counter_0_ULT_11___d34 ||
	     WILL_FIRE_RL_spi_rl_write_to_cfg &&
	     spi_wr_write_addr_wget[7:0] == 8'h14 ;

  // register spi_wr_spi_out_io1
  always@(MUX_spi_wr_spi_out_io1_write_1__SEL_1 or
	  MUX_spi_wr_spi_out_io1_write_1__VAL_1 or
	  MUX_spi_rg_data_counter_write_1__SEL_9 or
	  MUX_spi_wr_spi_out_io1_write_1__VAL_2 or
	  MUX_spi_wr_spi_out_io1_write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_spi_wr_spi_out_io1_write_1__SEL_1:
	  spi_wr_spi_out_io1_D_IN = MUX_spi_wr_spi_out_io1_write_1__VAL_1;
      MUX_spi_rg_data_counter_write_1__SEL_9:
	  spi_wr_spi_out_io1_D_IN = MUX_spi_wr_spi_out_io1_write_1__VAL_2;
      MUX_spi_wr_spi_out_io1_write_1__SEL_3:
	  spi_wr_spi_out_io1_D_IN = MUX_spi_wr_spi_out_io1_write_1__VAL_2;
      default: spi_wr_spi_out_io1_D_IN = 1'bx /* unspecified value */ ;
    endcase
  end
  assign spi_wr_spi_out_io1_EN =
	     WILL_FIRE_RL_spi_rl_transmit_idle && spi_rg_spi_cfg_cr1[6] &&
	     spi_tx_fifo_EMPTY_N &&
	     !spi_rg_spi_cfg_cr1[0] ||
	     WILL_FIRE_RL_spi_rl_transmit_start &&
	     spi_wr_clk_en_wget__34_OR_spi_rg_spi_cfg_cr1_B_ETC___d139 ||
	     WILL_FIRE_RL_spi_rl_data_transmit &&
	     spi_rg_data_counter_0_ULT_6_52_AND_NOT_spi_wr__ETC___d166 ;

  // submodule ff_rd_req
  assign ff_rd_req_sD_IN =
	     { s_xactor_spi_f_rd_addr_D_OUT[36:5], x1_burst_size__h10011 } ;
  assign ff_rd_req_sENQ = CAN_FIRE_RL_rl_read_request_from_core ;
  assign ff_rd_req_dDEQ = ff_rd_req_dEMPTY_N ;

  // submodule ff_sync_rd_resp
  assign ff_sync_rd_resp_sD_IN = spi_wr_rd_data_wget ;
  assign ff_sync_rd_resp_sENQ = CAN_FIRE_RL_rl_read_response_from_controller ;
  assign ff_sync_rd_resp_dDEQ = CAN_FIRE_RL_rl_read_response_to_core ;

  // submodule ff_wr_req
  assign ff_wr_req_sD_IN =
	     { s_xactor_spi_f_wr_addr_D_OUT[36:5],
	       x1_burst_size__h9836,
	       s_xactor_spi_f_wr_data_D_OUT[35:4] } ;
  assign ff_wr_req_sENQ = CAN_FIRE_RL_rl_write_request_from_core ;
  assign ff_wr_req_dDEQ = ff_wr_req_dEMPTY_N ;

  // submodule s_xactor_spi_f_rd_addr
  assign s_xactor_spi_f_rd_addr_D_IN =
	     { slave_m_arvalid_araddr,
	       slave_m_arvalid_arprot,
	       slave_m_arvalid_arsize } ;
  assign s_xactor_spi_f_rd_addr_ENQ =
	     slave_m_arvalid_arvalid && s_xactor_spi_f_rd_addr_FULL_N ;
  assign s_xactor_spi_f_rd_addr_DEQ = CAN_FIRE_RL_rl_read_request_from_core ;
  assign s_xactor_spi_f_rd_addr_CLR = 1'b0 ;

  // submodule s_xactor_spi_f_rd_data
  assign s_xactor_spi_f_rd_data_D_IN = { 2'd0, ff_sync_rd_resp_dD_OUT } ;
  assign s_xactor_spi_f_rd_data_ENQ = CAN_FIRE_RL_rl_read_response_to_core ;
  assign s_xactor_spi_f_rd_data_DEQ =
	     slave_m_rready_rready && s_xactor_spi_f_rd_data_EMPTY_N ;
  assign s_xactor_spi_f_rd_data_CLR = 1'b0 ;

  // submodule s_xactor_spi_f_wr_addr
  assign s_xactor_spi_f_wr_addr_D_IN =
	     { slave_m_awvalid_awaddr,
	       slave_m_awvalid_awprot,
	       slave_m_awvalid_awsize } ;
  assign s_xactor_spi_f_wr_addr_ENQ =
	     slave_m_awvalid_awvalid && s_xactor_spi_f_wr_addr_FULL_N ;
  assign s_xactor_spi_f_wr_addr_DEQ = CAN_FIRE_RL_rl_write_request_from_core ;
  assign s_xactor_spi_f_wr_addr_CLR = 1'b0 ;

  // submodule s_xactor_spi_f_wr_data
  assign s_xactor_spi_f_wr_data_D_IN =
	     { slave_m_wvalid_wdata, slave_m_wvalid_wstrb } ;
  assign s_xactor_spi_f_wr_data_ENQ =
	     slave_m_wvalid_wvalid && s_xactor_spi_f_wr_data_FULL_N ;
  assign s_xactor_spi_f_wr_data_DEQ = CAN_FIRE_RL_rl_write_request_from_core ;
  assign s_xactor_spi_f_wr_data_CLR = 1'b0 ;

  // submodule s_xactor_spi_f_wr_resp
  assign s_xactor_spi_f_wr_resp_D_IN = 2'd0 ;
  assign s_xactor_spi_f_wr_resp_ENQ = CAN_FIRE_RL_rl_write_request_from_core ;
  assign s_xactor_spi_f_wr_resp_DEQ =
	     slave_m_bready_bready && s_xactor_spi_f_wr_resp_EMPTY_N ;
  assign s_xactor_spi_f_wr_resp_CLR = 1'b0 ;

  // submodule spi_rx_fifo
  assign spi_rx_fifo_D_IN =
	     MUX_spi_rg_data_counter_write_1__SEL_1 ?
	       MUX_spi_rx_fifo_enq_1__VAL_1 :
	       MUX_spi_rx_fifo_enq_1__VAL_2 ;
  assign spi_rx_fifo_ENQ =
	     WILL_FIRE_RL_spi_rl_abort_tx_rx &&
	     spi_rg_spi_cfg_cr2_6_BIT_15_04_OR_spi_rg_trans_ETC___d259 ||
	     WILL_FIRE_RL_spi_rl_data_receive &&
	     spi_rg_data_counter_0_ULT_8_14_AND_spi_rx_fifo_ETC___d218 &&
	     !spi_rg_data_counter_0_ULT_7___d219 &&
	     spi_rg_data_counter == 8'd7 ;
  assign spi_rx_fifo_DEQ = CAN_FIRE_RL_spi_rl_receive_fifo_to_read_datareg ;
  assign spi_rx_fifo_CLR = 1'b0 ;

  // submodule spi_tx_fifo
  assign spi_tx_fifo_D_IN = spi_rg_spi_cfg_dr3[7:0] ;
  assign spi_tx_fifo_ENQ = MUX_spi_rg_data_counter_write_1__SEL_10 ;
  assign spi_tx_fifo_DEQ =
	     WILL_FIRE_RL_spi_rl_data_transmit &&
	     !spi_rg_data_counter_0_ULT_6___d152 &&
	     spi_rg_data_counter == 8'd6 &&
	     !spi_wr_clk_en_wget &&
	     spi_wr_transfer_en_whas ;
  assign spi_tx_fifo_CLR = MUX_spi_rg_bit_count_write_1__SEL_1 ;

  // remaining internal signals
  assign NOT_spi_rg_spi_cfg_cr2_6_BIT_15_04_05_AND_NOT__ETC___d260 =
	     !spi_rg_spi_cfg_cr2[15] && spi_rg_transmit_state != 2'd0 &&
	     spi_rg_bit_count_75_EQ_spi_rg_spi_cfg_cr1_BITS_ETC___d243 &&
	     spi_rg_spi_cfg_cr2[16] ||
	     spi_rg_spi_cfg_cr2_6_BIT_15_04_OR_spi_rg_trans_ETC___d259 ;
  assign NOT_spi_rg_spi_cfg_cr2_6_BIT_15_04_05_AND_NOT__ETC___d262 =
	     !spi_rg_spi_cfg_cr2[15] && spi_rg_transmit_state != 2'd0 &&
	     spi_rg_bit_count_75_EQ_spi_rg_spi_cfg_cr1_BITS_ETC___d243 &&
	     !spi_rg_spi_cfg_cr2[16] ||
	     spi_rg_spi_cfg_cr2_6_BIT_15_04_OR_spi_rg_trans_ETC___d259 ;
  assign NOT_spi_tx_fifo_i_notEmpty__08_13_AND_NOT_spi__ETC___d186 =
	     !spi_tx_fifo_EMPTY_N && !spi_wr_clk_en_wget &&
	     spi_wr_transfer_en_whas &&
	     spi_rg_transfer_done ;
  assign data__h7802 = { io_miso_dat, spi_rg_data_rx[6:0] } ;
  assign data__h7824 = { spi_rg_data_rx[7:1], io_miso_dat } ;
  assign ff_wr_reqdD_OUT_BITS_66_TO_35__q1 = ff_wr_req_dD_OUT[66:35] ;
  assign spi_rg_bit_count_75_EQ_spi_rg_spi_cfg_cr1_BITS_ETC___d243 =
	     spi_rg_bit_count == y__h8205 ;
  assign spi_rg_bit_count_75_EQ_spi_rg_spi_cfg_cr1_BITS_ETC___d246 =
	     spi_rg_bit_count == y__h8212 ;
  assign spi_rg_data_counter_0_EQ_6_56_AND_NOT_spi_wr_c_ETC___d168 =
	     spi_rg_data_counter == 8'd6 && !spi_wr_clk_en_wget &&
	     spi_wr_transfer_en_whas ||
	     spi_rg_data_counter_0_EQ_7_59_AND_NOT_spi_wr_c_ETC___d164 &&
	     spi_tx_fifo_EMPTY_N ;
  assign spi_rg_data_counter_0_EQ_7_59_AND_NOT_spi_wr_c_ETC___d164 =
	     spi_rg_data_counter == 8'd7 && !spi_wr_clk_en_wget &&
	     spi_wr_transfer_en_whas &&
	     !spi_rg_transfer_done ;
  assign spi_rg_data_counter_0_ULT_11___d34 = spi_rg_data_counter < 8'd11 ;
  assign spi_rg_data_counter_0_ULT_12___d21 = spi_rg_data_counter < 8'd12 ;
  assign spi_rg_data_counter_0_ULT_6_52_AND_NOT_spi_wr__ETC___d166 =
	     spi_rg_data_counter_0_ULT_6___d152 && !spi_wr_clk_en_wget &&
	     spi_wr_transfer_en_whas ||
	     spi_rg_data_counter == 8'd6 && !spi_wr_clk_en_wget &&
	     spi_wr_transfer_en_whas ||
	     spi_rg_data_counter_0_EQ_7_59_AND_NOT_spi_wr_c_ETC___d164 ;
  assign spi_rg_data_counter_0_ULT_6_52_AND_NOT_spi_wr__ETC___d169 =
	     spi_rg_data_counter_0_ULT_6___d152 && !spi_wr_clk_en_wget &&
	     spi_wr_transfer_en_whas ||
	     spi_rg_data_counter_0_EQ_6_56_AND_NOT_spi_wr_c_ETC___d168 ;
  assign spi_rg_data_counter_0_ULT_6_52_OR_spi_rg_data__ETC___d172 =
	     (spi_rg_data_counter_0_ULT_6___d152 ||
	      spi_rg_data_counter == 8'd6) &&
	     !spi_wr_clk_en_wget &&
	     spi_wr_transfer_en_whas ;
  assign spi_rg_data_counter_0_ULT_6___d152 = spi_rg_data_counter < 8'd6 ;
  assign spi_rg_data_counter_0_ULT_7___d219 = spi_rg_data_counter < 8'd7 ;
  assign spi_rg_data_counter_0_ULT_8_14_AND_spi_rx_fifo_ETC___d218 =
	     spi_rg_data_counter_0_ULT_8___d214 && spi_rx_fifo_FULL_N &&
	     spi_wr_clk_en_wget &&
	     spi_wr_transfer_en_whas ;
  assign spi_rg_data_counter_0_ULT_8_14_AND_spi_rx_fifo_ETC___d225 =
	     spi_rg_data_counter_0_ULT_8_14_AND_spi_rx_fifo_ETC___d218 &&
	     (spi_rg_data_counter_0_ULT_7___d219 ||
	      spi_rg_data_counter == 8'd7) ||
	     !spi_rx_fifo_FULL_N && !spi_wr_clk_en_wget &&
	     spi_wr_transfer_en_whas ;
  assign spi_rg_data_counter_0_ULT_8___d214 = spi_rg_data_counter < 8'd8 ;
  assign spi_rg_spi_cfg_cr1_BITS_5_TO_3_0_EQ_spi_rg_clk_ETC___d92 =
	     spi_rg_spi_cfg_cr1[5:3] == spi_rg_clk_counter ;
  assign spi_rg_spi_cfg_cr2_6_BIT_15_04_OR_spi_rg_trans_ETC___d259 =
	     (spi_rg_spi_cfg_cr2[15] || spi_rg_transmit_state == 2'd0 ||
	      !spi_rg_bit_count_75_EQ_spi_rg_spi_cfg_cr1_BITS_ETC___d243) &&
	     spi_rg_receive_state != 2'd0 &&
	     spi_rg_bit_count_75_EQ_spi_rg_spi_cfg_cr1_BITS_ETC___d246 ;
  assign spi_wr_clk_en_wget__34_OR_spi_rg_spi_cfg_cr1_B_ETC___d139 =
	     spi_wr_clk_en_wget ||
	     spi_rg_spi_cfg_cr1[0] && spi_wr_transfer_en_whas ;
  assign x1_burst_size__h10011 = { 1'd0, s_xactor_spi_f_rd_addr_D_OUT[1:0] } ;
  assign x1_burst_size__h9836 = { 1'd0, s_xactor_spi_f_wr_addr_D_OUT[1:0] } ;
  assign x__h4087 = spi_rg_clk_counter + 3'd1 ;
  assign x__h4103 = ~spi_rg_clk ;
  assign x__h5775 = { 1'd0, spi_rg_data_tx[7:1] } ;
  assign x__h5980 = { spi_rg_data_tx[6:0], 1'd0 } ;
  assign x__h7123 = { 1'd0, io_miso_dat, spi_rg_data_rx[6:1] } ;
  assign x__h7261 = { spi_rg_data_rx[6:1], io_miso_dat, 1'd0 } ;
  assign x__h8923 = { 8'd0, spi_rx_fifo_D_OUT, spi_rg_spi_cfg_dr1[23:8] } ;
  assign x__h9005 = { spi_rg_spi_cfg_dr1[7:0], spi_rg_spi_cfg_dr2[31:8] } ;
  assign x__h9030 = { spi_rg_spi_cfg_dr2[7:0], spi_rg_spi_cfg_dr3[31:8] } ;
  assign x__h9064 = spi_rg_data_counter + 8'd1 ;
  assign x__h9143 = { spi_rx_fifo_D_OUT, spi_rg_spi_cfg_dr1[23:0] } ;
  assign y__h8205 = spi_rg_spi_cfg_cr1[22:16] - 7'd1 ;
  assign y__h8212 = spi_rg_spi_cfg_cr1[29:23] - 7'd1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_rid <= `BSV_ASSIGNMENT_DELAY 4'd0;
	spi_rg_bit_count <= `BSV_ASSIGNMENT_DELAY 7'd0;
	spi_rg_clk <= `BSV_ASSIGNMENT_DELAY 1'd0;
	spi_rg_clk_counter <= `BSV_ASSIGNMENT_DELAY 3'd0;
	spi_rg_data_counter <= `BSV_ASSIGNMENT_DELAY 8'd0;
	spi_rg_data_rx <= `BSV_ASSIGNMENT_DELAY 8'd0;
	spi_rg_data_tx <= `BSV_ASSIGNMENT_DELAY 8'd0;
	spi_rg_nss <= `BSV_ASSIGNMENT_DELAY 1'd1;
	spi_rg_receive_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	spi_rg_spi_cfg_cr1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	spi_rg_spi_cfg_cr2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	spi_rg_spi_cfg_crcpr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	spi_rg_spi_cfg_dr1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	spi_rg_spi_cfg_dr2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	spi_rg_spi_cfg_dr3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	spi_rg_spi_cfg_rxcrcr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	spi_rg_spi_cfg_sr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	spi_rg_spi_cfg_txcrcr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	spi_rg_transfer_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	spi_rg_transmit_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	spi_rg_tx_rx_start <= `BSV_ASSIGNMENT_DELAY 1'd0;
	spi_tx_data_en <= `BSV_ASSIGNMENT_DELAY 1'd0;
	spi_wr_spi_out_io1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (rg_rid_EN) rg_rid <= `BSV_ASSIGNMENT_DELAY rg_rid_D_IN;
	if (spi_rg_bit_count_EN)
	  spi_rg_bit_count <= `BSV_ASSIGNMENT_DELAY spi_rg_bit_count_D_IN;
	if (spi_rg_clk_EN)
	  spi_rg_clk <= `BSV_ASSIGNMENT_DELAY spi_rg_clk_D_IN;
	if (spi_rg_clk_counter_EN)
	  spi_rg_clk_counter <= `BSV_ASSIGNMENT_DELAY spi_rg_clk_counter_D_IN;
	if (spi_rg_data_counter_EN)
	  spi_rg_data_counter <= `BSV_ASSIGNMENT_DELAY
	      spi_rg_data_counter_D_IN;
	if (spi_rg_data_rx_EN)
	  spi_rg_data_rx <= `BSV_ASSIGNMENT_DELAY spi_rg_data_rx_D_IN;
	if (spi_rg_data_tx_EN)
	  spi_rg_data_tx <= `BSV_ASSIGNMENT_DELAY spi_rg_data_tx_D_IN;
	if (spi_rg_nss_EN)
	  spi_rg_nss <= `BSV_ASSIGNMENT_DELAY spi_rg_nss_D_IN;
	if (spi_rg_receive_state_EN)
	  spi_rg_receive_state <= `BSV_ASSIGNMENT_DELAY
	      spi_rg_receive_state_D_IN;
	if (spi_rg_spi_cfg_cr1_EN)
	  spi_rg_spi_cfg_cr1 <= `BSV_ASSIGNMENT_DELAY spi_rg_spi_cfg_cr1_D_IN;
	if (spi_rg_spi_cfg_cr2_EN)
	  spi_rg_spi_cfg_cr2 <= `BSV_ASSIGNMENT_DELAY spi_rg_spi_cfg_cr2_D_IN;
	if (spi_rg_spi_cfg_crcpr_EN)
	  spi_rg_spi_cfg_crcpr <= `BSV_ASSIGNMENT_DELAY
	      spi_rg_spi_cfg_crcpr_D_IN;
	if (spi_rg_spi_cfg_dr1_EN)
	  spi_rg_spi_cfg_dr1 <= `BSV_ASSIGNMENT_DELAY spi_rg_spi_cfg_dr1_D_IN;
	if (spi_rg_spi_cfg_dr2_EN)
	  spi_rg_spi_cfg_dr2 <= `BSV_ASSIGNMENT_DELAY spi_rg_spi_cfg_dr2_D_IN;
	if (spi_rg_spi_cfg_dr3_EN)
	  spi_rg_spi_cfg_dr3 <= `BSV_ASSIGNMENT_DELAY spi_rg_spi_cfg_dr3_D_IN;
	if (spi_rg_spi_cfg_rxcrcr_EN)
	  spi_rg_spi_cfg_rxcrcr <= `BSV_ASSIGNMENT_DELAY
	      spi_rg_spi_cfg_rxcrcr_D_IN;
	if (spi_rg_spi_cfg_sr_EN)
	  spi_rg_spi_cfg_sr <= `BSV_ASSIGNMENT_DELAY spi_rg_spi_cfg_sr_D_IN;
	if (spi_rg_spi_cfg_txcrcr_EN)
	  spi_rg_spi_cfg_txcrcr <= `BSV_ASSIGNMENT_DELAY
	      spi_rg_spi_cfg_txcrcr_D_IN;
	if (spi_rg_transfer_done_EN)
	  spi_rg_transfer_done <= `BSV_ASSIGNMENT_DELAY
	      spi_rg_transfer_done_D_IN;
	if (spi_rg_transmit_state_EN)
	  spi_rg_transmit_state <= `BSV_ASSIGNMENT_DELAY
	      spi_rg_transmit_state_D_IN;
	if (spi_rg_tx_rx_start_EN)
	  spi_rg_tx_rx_start <= `BSV_ASSIGNMENT_DELAY spi_rg_tx_rx_start_D_IN;
	if (spi_tx_data_en_EN)
	  spi_tx_data_en <= `BSV_ASSIGNMENT_DELAY spi_tx_data_en_D_IN;
	if (spi_wr_spi_out_io1_EN)
	  spi_wr_spi_out_io1 <= `BSV_ASSIGNMENT_DELAY spi_wr_spi_out_io1_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_rid = 4'hA;
    spi_rg_bit_count = 7'h2A;
    spi_rg_clk = 1'h0;
    spi_rg_clk_counter = 3'h2;
    spi_rg_data_counter = 8'hAA;
    spi_rg_data_rx = 8'hAA;
    spi_rg_data_tx = 8'hAA;
    spi_rg_nss = 1'h0;
    spi_rg_receive_state = 2'h2;
    spi_rg_spi_cfg_cr1 = 32'hAAAAAAAA;
    spi_rg_spi_cfg_cr2 = 32'hAAAAAAAA;
    spi_rg_spi_cfg_crcpr = 32'hAAAAAAAA;
    spi_rg_spi_cfg_dr1 = 32'hAAAAAAAA;
    spi_rg_spi_cfg_dr2 = 32'hAAAAAAAA;
    spi_rg_spi_cfg_dr3 = 32'hAAAAAAAA;
    spi_rg_spi_cfg_rxcrcr = 32'hAAAAAAAA;
    spi_rg_spi_cfg_sr = 32'hAAAAAAAA;
    spi_rg_spi_cfg_txcrcr = 32'hAAAAAAAA;
    spi_rg_transfer_done = 1'h0;
    spi_rg_transmit_state = 2'h2;
    spi_rg_tx_rx_start = 1'h0;
    spi_tx_data_en = 1'h0;
    spi_wr_spi_out_io1 = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spi_rl_transmit_start && spi_tx_data_en &&
	  spi_wr_clk_en_wget__34_OR_spi_rg_spi_cfg_cr1_B_ETC___d139 &&
	  spi_rg_data_counter_0_ULT_12___d21)
	$display("Error: \"devices/spi//spi.bsv\", line 391, column 6: (R0002)\n  Conflict-free rules RL_spi_rl_transmit_start and\n  RL_spi_rl_transmit_data_to_fifo called conflicting methods read and write of\n  module instance spi_rg_data_counter.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spi_rl_data_transmit &&
	  (!spi_rg_data_counter_0_ULT_6___d152 || spi_wr_clk_en_wget) &&
	  spi_rg_data_counter_0_EQ_7_59_AND_NOT_spi_wr_c_ETC___d164 &&
	  spi_tx_fifo_EMPTY_N)
	begin
	  v__h6403 = $stime;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spi_rl_data_transmit &&
	  (!spi_rg_data_counter_0_ULT_6___d152 || spi_wr_clk_en_wget) &&
	  spi_rg_data_counter_0_EQ_7_59_AND_NOT_spi_wr_c_ETC___d164 &&
	  spi_tx_fifo_EMPTY_N)
	$display(v__h6403, " SPI : tx_fifo data %x", spi_tx_fifo_D_OUT);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spi_rl_data_transmit && spi_tx_data_en &&
	  !spi_wr_clk_en_wget &&
	  spi_rg_data_counter_0_ULT_12___d21)
	$display("Error: \"devices/spi//spi.bsv\", line 423, column 8: (R0002)\n  Conflict-free rules RL_spi_rl_data_transmit and\n  RL_spi_rl_transmit_data_to_fifo called conflicting methods read and write of\n  module instance spi_rg_data_counter.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spi_rl_receive_start_receive &&
	  WILL_FIRE_RL_spi_rl_data_transmit &&
	  !spi_rg_spi_cfg_cr1[0] &&
	  spi_wr_clk_en_wget &&
	  spi_wr_transfer_en_whas &&
	  spi_rg_data_counter_0_ULT_6_52_AND_NOT_spi_wr__ETC___d169)
	$display("Error: \"devices/spi//spi.bsv\", line 509, column 8: (R0002)\n  Conflict-free rules RL_spi_rl_receive_start_receive and\n  RL_spi_rl_data_transmit called conflicting methods read and write of module\n  instance spi_rg_data_counter.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spi_rl_receive_start_receive &&
	  WILL_FIRE_RL_spi_rl_data_transmit &&
	  !spi_rg_spi_cfg_cr1[0] &&
	  spi_wr_clk_en_wget &&
	  spi_wr_transfer_en_whas &&
	  spi_rg_data_counter_0_ULT_6_52_OR_spi_rg_data__ETC___d172)
	$display("Error: \"devices/spi//spi.bsv\", line 509, column 8: (R0002)\n  Conflict-free rules RL_spi_rl_receive_start_receive and\n  RL_spi_rl_data_transmit called conflicting methods read and write of module\n  instance spi_rg_bit_count.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spi_rl_receive_start_receive &&
	  WILL_FIRE_RL_spi_rl_data_transmit &&
	  spi_rg_receive_state == 2'd1 &&
	  _write_RL_spi_rl_data_transmit_EN_spi_rg_nss_wget)
	$display("Error: \"devices/spi//spi.bsv\", line 509, column 8: (R0002)\n  Conflict-free rules RL_spi_rl_receive_start_receive and\n  RL_spi_rl_data_transmit called conflicting methods read and write of module\n  instance spi_rg_nss.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spi_rl_receive_start_receive &&
	  WILL_FIRE_RL_spi_rl_transmit_start &&
	  !spi_rg_spi_cfg_cr1[0] &&
	  spi_wr_clk_en_wget &&
	  spi_wr_transfer_en_whas &&
	  spi_wr_clk_en_wget__34_OR_spi_rg_spi_cfg_cr1_B_ETC___d139)
	$display("Error: \"devices/spi//spi.bsv\", line 509, column 8: (R0002)\n  Conflict-free rules RL_spi_rl_receive_start_receive and\n  RL_spi_rl_transmit_start called conflicting methods read and write of module\n  instance spi_rg_data_counter.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spi_rl_receive_start_receive && spi_tx_data_en &&
	  !spi_rg_spi_cfg_cr1[0] &&
	  spi_wr_clk_en_wget &&
	  spi_wr_transfer_en_whas &&
	  spi_rg_data_counter_0_ULT_12___d21)
	$display("Error: \"devices/spi//spi.bsv\", line 509, column 8: (R0002)\n  Conflict-free rules RL_spi_rl_receive_start_receive and\n  RL_spi_rl_transmit_data_to_fifo called conflicting methods read and write of\n  module instance spi_rg_data_counter.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spi_rl_data_receive &&
	  WILL_FIRE_RL_spi_rl_data_transmit &&
	  spi_rx_fifo_FULL_N &&
	  spi_wr_clk_en_wget &&
	  spi_wr_transfer_en_whas &&
	  spi_rg_data_counter_0_ULT_6_52_AND_NOT_spi_wr__ETC___d169)
	$display("Error: \"devices/spi//spi.bsv\", line 535, column 8: (R0002)\n  Conflict-free rules RL_spi_rl_data_receive and RL_spi_rl_data_transmit\n  called conflicting methods read and write of module instance\n  spi_rg_data_counter.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spi_rl_data_receive &&
	  WILL_FIRE_RL_spi_rl_data_transmit &&
	  spi_rg_data_counter_0_ULT_7___d219 &&
	  spi_rx_fifo_FULL_N &&
	  spi_rg_data_counter_0_ULT_8___d214 &&
	  spi_wr_clk_en_wget &&
	  spi_wr_transfer_en_whas &&
	  spi_rg_data_counter_0_ULT_6_52_OR_spi_rg_data__ETC___d172)
	$display("Error: \"devices/spi//spi.bsv\", line 535, column 8: (R0002)\n  Conflict-free rules RL_spi_rl_data_receive and RL_spi_rl_data_transmit\n  called conflicting methods read and write of module instance\n  spi_rg_bit_count.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spi_rl_data_receive &&
	  WILL_FIRE_RL_spi_rl_data_transmit &&
	  spi_rg_receive_state == 2'd2 &&
	  _write_RL_spi_rl_data_transmit_EN_spi_rg_nss_wget)
	$display("Error: \"devices/spi//spi.bsv\", line 535, column 8: (R0002)\n  Conflict-free rules RL_spi_rl_data_receive and RL_spi_rl_data_transmit\n  called conflicting methods read and write of module instance spi_rg_nss.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spi_rl_data_receive &&
	  WILL_FIRE_RL_spi_rl_transmit_start &&
	  spi_rx_fifo_FULL_N &&
	  spi_wr_clk_en_wget &&
	  spi_wr_transfer_en_whas &&
	  spi_wr_clk_en_wget__34_OR_spi_rg_spi_cfg_cr1_B_ETC___d139)
	$display("Error: \"devices/spi//spi.bsv\", line 535, column 8: (R0002)\n  Conflict-free rules RL_spi_rl_data_receive and RL_spi_rl_transmit_start\n  called conflicting methods read and write of module instance\n  spi_rg_data_counter.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spi_rl_data_receive && spi_tx_data_en &&
	  spi_rx_fifo_FULL_N &&
	  spi_wr_clk_en_wget &&
	  spi_wr_transfer_en_whas &&
	  spi_rg_data_counter_0_ULT_12___d21)
	$display("Error: \"devices/spi//spi.bsv\", line 535, column 8: (R0002)\n  Conflict-free rules RL_spi_rl_data_receive and\n  RL_spi_rl_transmit_data_to_fifo called conflicting methods read and write of\n  module instance spi_rg_data_counter.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spi_rl_receive_fifo_to_read_datareg &&
	  WILL_FIRE_RL_spi_rl_data_transmit &&
	  spi_rg_data_counter_0_ULT_6_52_AND_NOT_spi_wr__ETC___d169)
	$display("Error: \"devices/spi//spi.bsv\", line 609, column 8: (R0002)\n  Conflict-free rules RL_spi_rl_receive_fifo_to_read_datareg and\n  RL_spi_rl_data_transmit called conflicting methods read and write of module\n  instance spi_rg_data_counter.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spi_rl_receive_fifo_to_read_datareg &&
	  WILL_FIRE_RL_spi_rl_transmit_start &&
	  spi_wr_clk_en_wget__34_OR_spi_rg_spi_cfg_cr1_B_ETC___d139)
	$display("Error: \"devices/spi//spi.bsv\", line 609, column 8: (R0002)\n  Conflict-free rules RL_spi_rl_receive_fifo_to_read_datareg and\n  RL_spi_rl_transmit_start called conflicting methods read and write of module\n  instance spi_rg_data_counter.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spi_rl_receive_fifo_to_read_datareg &&
	  spi_tx_data_en &&
	  spi_rg_data_counter_0_ULT_12___d21)
	$display("Error: \"devices/spi//spi.bsv\", line 609, column 8: (R0002)\n  Conflict-free rules RL_spi_rl_receive_fifo_to_read_datareg and\n  RL_spi_rl_transmit_data_to_fifo called conflicting methods read and write of\n  module instance spi_rg_spi_cfg_dr1.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spi_rl_receive_fifo_to_read_datareg &&
	  spi_tx_data_en &&
	  spi_rg_data_counter_0_ULT_12___d21)
	$display("Error: \"devices/spi//spi.bsv\", line 609, column 8: (R0002)\n  Conflict-free rules RL_spi_rl_receive_fifo_to_read_datareg and\n  RL_spi_rl_transmit_data_to_fifo called conflicting methods read and write of\n  module instance spi_rg_spi_cfg_dr2.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spi_rl_receive_fifo_to_read_datareg &&
	  spi_tx_data_en &&
	  spi_rg_data_counter_0_ULT_12___d21)
	$display("Error: \"devices/spi//spi.bsv\", line 609, column 8: (R0002)\n  Conflict-free rules RL_spi_rl_receive_fifo_to_read_datareg and\n  RL_spi_rl_transmit_data_to_fifo called conflicting methods read and write of\n  module instance spi_rg_spi_cfg_dr3.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spi_rl_receive_fifo_to_read_datareg &&
	  spi_tx_data_en &&
	  spi_rg_data_counter_0_ULT_12___d21)
	$display("Error: \"devices/spi//spi.bsv\", line 609, column 8: (R0002)\n  Conflict-free rules RL_spi_rl_receive_fifo_to_read_datareg and\n  RL_spi_rl_transmit_data_to_fifo called conflicting methods read and write of\n  module instance spi_rg_data_counter.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spi_rl_transmit_idle &&
	  WILL_FIRE_RL_spi_rl_data_receive &&
	  (spi_rg_spi_cfg_cr1[6] && !spi_tx_fifo_EMPTY_N ||
	   !spi_tx_data_en && spi_rg_transmit_state == 2'd0) &&
	  _write_RL_spi_rl_data_receive_EN_spi_rg_spi_cfg_cr2_wget)
	$display("Error: \"devices/spi//spi.bsv\", line 364, column 8: (R0002)\n  Conflict-free rules RL_spi_rl_transmit_idle and RL_spi_rl_data_receive\n  called conflicting methods read and write of module instance\n  spi_rg_spi_cfg_cr2.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spi_rl_abort_tx_rx)
	begin
	  v__h8831 = $stime;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spi_rl_abort_tx_rx)
	$display(v__h8831, " SPI: ABORT rg_data_rx %x", spi_rg_data_rx);
  end
  // synopsys translate_on
endmodule  // mkspi

