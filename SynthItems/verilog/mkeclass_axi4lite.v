//
// Generated by Bluespec Compiler, version 2022.01-36-ga6304315 (build a6304315)
//
// On Tue Oct  4 10:37:14 CEST 2022
//
//
// Ports:
// Name                         I/O  size props
// master_d_awvalid               O     1 reg
// master_d_awaddr                O    32 reg
// master_d_awprot                O     3 reg
// master_d_awsize                O     2 reg
// master_d_wvalid                O     1 reg
// master_d_wdata                 O    32 reg
// master_d_wstrb                 O     4 reg
// master_d_bready                O     1 reg
// master_d_arvalid               O     1 reg
// master_d_araddr                O    32 reg
// master_d_arprot                O     3 reg
// master_d_arsize                O     2 reg
// master_d_rready                O     1 reg
// master_i_awvalid               O     1 reg
// master_i_awaddr                O    32 reg
// master_i_awprot                O     3 reg
// master_i_awsize                O     2 reg
// master_i_wvalid                O     1 reg
// master_i_wdata                 O    32 reg
// master_i_wstrb                 O     4 reg
// master_i_bready                O     1 reg
// master_i_arvalid               O     1 reg
// master_i_araddr                O    32 reg
// master_i_arprot                O     3 reg
// master_i_arsize                O     2 reg
// master_i_rready                O     1 reg
// RDY_sb_clint_msip_put          O     1 const
// RDY_sb_clint_mtip_put          O     1 const
// RDY_sb_clint_mtime_put         O     1 const
// RDY_sb_ext_interrupt_put       O     1 const
// RDY_debug_server_abstractOperation  O     1
// debug_server_abstractReadResponse  O    32 reg
// RDY_debug_server_abstractReadResponse  O     1 reg
// debug_server_has_reset         O     1 const
// debug_server_is_halted         O     1 reg
// debug_server_is_unavailable    O     1
// resetpc                        I    32
// CLK                            I     1 clock
// RST_N                          I     1 reset
// master_d_m_awready_awready     I     1
// master_d_m_wready_wready       I     1
// master_d_m_bvalid_bvalid       I     1
// master_d_m_bvalid_bresp        I     2 reg
// master_d_m_arready_arready     I     1
// master_d_m_rvalid_rvalid       I     1
// master_d_m_rvalid_rresp        I     2 reg
// master_d_m_rvalid_rdata        I    32 reg
// master_i_m_awready_awready     I     1
// master_i_m_wready_wready       I     1
// master_i_m_bvalid_bvalid       I     1
// master_i_m_bvalid_bresp        I     2 reg
// master_i_m_arready_arready     I     1
// master_i_m_rvalid_rvalid       I     1
// master_i_m_rvalid_rresp        I     2 reg
// master_i_m_rvalid_rdata        I    32 reg
// sb_clint_msip_put              I     1 reg
// sb_clint_mtip_put              I     1 reg
// sb_clint_mtime_put             I    64 reg
// sb_ext_interrupt_put           I     1 reg
// debug_server_abstractOperation_cmd  I    47
// debug_server_haltRequest_halt_request  I     1 reg
// debug_server_resumeRequest_resume_request  I     1 reg
// debug_server_hartReset_hart_reset_v  I     1 unused
// debug_server_dm_active_dm_active  I     1
// EN_sb_clint_msip_put           I     1
// EN_sb_clint_mtip_put           I     1
// EN_sb_clint_mtime_put          I     1
// EN_sb_ext_interrupt_put        I     1
// EN_debug_server_abstractOperation  I     1
// EN_debug_server_abstractReadResponse  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkeclass_axi4lite(resetpc,
			 CLK,
			 RST_N,

			 master_d_awvalid,

			 master_d_awaddr,

			 master_d_awprot,

			 master_d_awsize,

			 master_d_m_awready_awready,

			 master_d_wvalid,

			 master_d_wdata,

			 master_d_wstrb,

			 master_d_m_wready_wready,

			 master_d_m_bvalid_bvalid,
			 master_d_m_bvalid_bresp,

			 master_d_bready,

			 master_d_arvalid,

			 master_d_araddr,

			 master_d_arprot,

			 master_d_arsize,

			 master_d_m_arready_arready,

			 master_d_m_rvalid_rvalid,
			 master_d_m_rvalid_rresp,
			 master_d_m_rvalid_rdata,

			 master_d_rready,

			 master_i_awvalid,

			 master_i_awaddr,

			 master_i_awprot,

			 master_i_awsize,

			 master_i_m_awready_awready,

			 master_i_wvalid,

			 master_i_wdata,

			 master_i_wstrb,

			 master_i_m_wready_wready,

			 master_i_m_bvalid_bvalid,
			 master_i_m_bvalid_bresp,

			 master_i_bready,

			 master_i_arvalid,

			 master_i_araddr,

			 master_i_arprot,

			 master_i_arsize,

			 master_i_m_arready_arready,

			 master_i_m_rvalid_rvalid,
			 master_i_m_rvalid_rresp,
			 master_i_m_rvalid_rdata,

			 master_i_rready,

			 sb_clint_msip_put,
			 EN_sb_clint_msip_put,
			 RDY_sb_clint_msip_put,

			 sb_clint_mtip_put,
			 EN_sb_clint_mtip_put,
			 RDY_sb_clint_mtip_put,

			 sb_clint_mtime_put,
			 EN_sb_clint_mtime_put,
			 RDY_sb_clint_mtime_put,

			 sb_ext_interrupt_put,
			 EN_sb_ext_interrupt_put,
			 RDY_sb_ext_interrupt_put,

			 debug_server_abstractOperation_cmd,
			 EN_debug_server_abstractOperation,
			 RDY_debug_server_abstractOperation,

			 EN_debug_server_abstractReadResponse,
			 debug_server_abstractReadResponse,
			 RDY_debug_server_abstractReadResponse,

			 debug_server_haltRequest_halt_request,

			 debug_server_resumeRequest_resume_request,

			 debug_server_hartReset_hart_reset_v,

			 debug_server_dm_active_dm_active,

			 debug_server_has_reset,

			 debug_server_is_halted,

			 debug_server_is_unavailable);
  input  [31 : 0] resetpc;
  input  CLK;
  input  RST_N;

  // value method master_d_m_awvalid
  output master_d_awvalid;

  // value method master_d_m_awaddr
  output [31 : 0] master_d_awaddr;

  // value method master_d_m_awuser

  // value method master_d_m_awprot
  output [2 : 0] master_d_awprot;

  // value method master_d_m_awsize
  output [1 : 0] master_d_awsize;

  // action method master_d_m_awready
  input  master_d_m_awready_awready;

  // value method master_d_m_wvalid
  output master_d_wvalid;

  // value method master_d_m_wdata
  output [31 : 0] master_d_wdata;

  // value method master_d_m_wstrb
  output [3 : 0] master_d_wstrb;

  // action method master_d_m_wready
  input  master_d_m_wready_wready;

  // action method master_d_m_bvalid
  input  master_d_m_bvalid_bvalid;
  input  [1 : 0] master_d_m_bvalid_bresp;

  // value method master_d_m_bready
  output master_d_bready;

  // value method master_d_m_arvalid
  output master_d_arvalid;

  // value method master_d_m_araddr
  output [31 : 0] master_d_araddr;

  // value method master_d_m_aruser

  // value method master_d_m_arprot
  output [2 : 0] master_d_arprot;

  // value method master_d_m_arsize
  output [1 : 0] master_d_arsize;

  // action method master_d_m_arready
  input  master_d_m_arready_arready;

  // action method master_d_m_rvalid
  input  master_d_m_rvalid_rvalid;
  input  [1 : 0] master_d_m_rvalid_rresp;
  input  [31 : 0] master_d_m_rvalid_rdata;

  // value method master_d_m_rready
  output master_d_rready;

  // value method master_i_m_awvalid
  output master_i_awvalid;

  // value method master_i_m_awaddr
  output [31 : 0] master_i_awaddr;

  // value method master_i_m_awuser

  // value method master_i_m_awprot
  output [2 : 0] master_i_awprot;

  // value method master_i_m_awsize
  output [1 : 0] master_i_awsize;

  // action method master_i_m_awready
  input  master_i_m_awready_awready;

  // value method master_i_m_wvalid
  output master_i_wvalid;

  // value method master_i_m_wdata
  output [31 : 0] master_i_wdata;

  // value method master_i_m_wstrb
  output [3 : 0] master_i_wstrb;

  // action method master_i_m_wready
  input  master_i_m_wready_wready;

  // action method master_i_m_bvalid
  input  master_i_m_bvalid_bvalid;
  input  [1 : 0] master_i_m_bvalid_bresp;

  // value method master_i_m_bready
  output master_i_bready;

  // value method master_i_m_arvalid
  output master_i_arvalid;

  // value method master_i_m_araddr
  output [31 : 0] master_i_araddr;

  // value method master_i_m_aruser

  // value method master_i_m_arprot
  output [2 : 0] master_i_arprot;

  // value method master_i_m_arsize
  output [1 : 0] master_i_arsize;

  // action method master_i_m_arready
  input  master_i_m_arready_arready;

  // action method master_i_m_rvalid
  input  master_i_m_rvalid_rvalid;
  input  [1 : 0] master_i_m_rvalid_rresp;
  input  [31 : 0] master_i_m_rvalid_rdata;

  // value method master_i_m_rready
  output master_i_rready;

  // action method sb_clint_msip_put
  input  sb_clint_msip_put;
  input  EN_sb_clint_msip_put;
  output RDY_sb_clint_msip_put;

  // action method sb_clint_mtip_put
  input  sb_clint_mtip_put;
  input  EN_sb_clint_mtip_put;
  output RDY_sb_clint_mtip_put;

  // action method sb_clint_mtime_put
  input  [63 : 0] sb_clint_mtime_put;
  input  EN_sb_clint_mtime_put;
  output RDY_sb_clint_mtime_put;

  // action method sb_ext_interrupt_put
  input  sb_ext_interrupt_put;
  input  EN_sb_ext_interrupt_put;
  output RDY_sb_ext_interrupt_put;

  // action method debug_server_abstractOperation
  input  [46 : 0] debug_server_abstractOperation_cmd;
  input  EN_debug_server_abstractOperation;
  output RDY_debug_server_abstractOperation;

  // actionvalue method debug_server_abstractReadResponse
  input  EN_debug_server_abstractReadResponse;
  output [31 : 0] debug_server_abstractReadResponse;
  output RDY_debug_server_abstractReadResponse;

  // action method debug_server_haltRequest
  input  debug_server_haltRequest_halt_request;

  // action method debug_server_resumeRequest
  input  debug_server_resumeRequest_resume_request;

  // action method debug_server_hartReset
  input  debug_server_hartReset_hart_reset_v;

  // action method debug_server_dm_active
  input  debug_server_dm_active_dm_active;

  // value method debug_server_has_reset
  output debug_server_has_reset;

  // value method debug_server_is_halted
  output debug_server_is_halted;

  // value method debug_server_is_unavailable
  output debug_server_is_unavailable;

  // signals for module outputs
  wire [31 : 0] debug_server_abstractReadResponse,
		master_d_araddr,
		master_d_awaddr,
		master_d_wdata,
		master_i_araddr,
		master_i_awaddr,
		master_i_wdata;
  wire [3 : 0] master_d_wstrb, master_i_wstrb;
  wire [2 : 0] master_d_arprot,
	       master_d_awprot,
	       master_i_arprot,
	       master_i_awprot;
  wire [1 : 0] master_d_arsize,
	       master_d_awsize,
	       master_i_arsize,
	       master_i_awsize;
  wire RDY_debug_server_abstractOperation,
       RDY_debug_server_abstractReadResponse,
       RDY_sb_clint_msip_put,
       RDY_sb_clint_mtime_put,
       RDY_sb_clint_mtip_put,
       RDY_sb_ext_interrupt_put,
       debug_server_has_reset,
       debug_server_is_halted,
       debug_server_is_unavailable,
       master_d_arvalid,
       master_d_awvalid,
       master_d_bready,
       master_d_rready,
       master_d_wvalid,
       master_i_arvalid,
       master_i_awvalid,
       master_i_bready,
       master_i_rready,
       master_i_wvalid;

  // register rg_abst_response
  reg [32 : 0] rg_abst_response;
  wire [32 : 0] rg_abst_response_D_IN;
  wire rg_abst_response_EN;

  // register rg_wEpoch
  reg rg_wEpoch;
  wire rg_wEpoch_D_IN, rg_wEpoch_EN;

  // ports of submodule fetch_xactor_f_rd_addr
  wire [36 : 0] fetch_xactor_f_rd_addr_D_IN, fetch_xactor_f_rd_addr_D_OUT;
  wire fetch_xactor_f_rd_addr_CLR,
       fetch_xactor_f_rd_addr_DEQ,
       fetch_xactor_f_rd_addr_EMPTY_N,
       fetch_xactor_f_rd_addr_ENQ,
       fetch_xactor_f_rd_addr_FULL_N;

  // ports of submodule fetch_xactor_f_rd_data
  wire [33 : 0] fetch_xactor_f_rd_data_D_IN, fetch_xactor_f_rd_data_D_OUT;
  wire fetch_xactor_f_rd_data_CLR,
       fetch_xactor_f_rd_data_DEQ,
       fetch_xactor_f_rd_data_EMPTY_N,
       fetch_xactor_f_rd_data_ENQ,
       fetch_xactor_f_rd_data_FULL_N;

  // ports of submodule fetch_xactor_f_wr_addr
  wire [36 : 0] fetch_xactor_f_wr_addr_D_IN, fetch_xactor_f_wr_addr_D_OUT;
  wire fetch_xactor_f_wr_addr_CLR,
       fetch_xactor_f_wr_addr_DEQ,
       fetch_xactor_f_wr_addr_EMPTY_N,
       fetch_xactor_f_wr_addr_ENQ;

  // ports of submodule fetch_xactor_f_wr_data
  wire [35 : 0] fetch_xactor_f_wr_data_D_IN, fetch_xactor_f_wr_data_D_OUT;
  wire fetch_xactor_f_wr_data_CLR,
       fetch_xactor_f_wr_data_DEQ,
       fetch_xactor_f_wr_data_EMPTY_N,
       fetch_xactor_f_wr_data_ENQ;

  // ports of submodule fetch_xactor_f_wr_resp
  wire [1 : 0] fetch_xactor_f_wr_resp_D_IN;
  wire fetch_xactor_f_wr_resp_CLR,
       fetch_xactor_f_wr_resp_DEQ,
       fetch_xactor_f_wr_resp_ENQ,
       fetch_xactor_f_wr_resp_FULL_N;

  // ports of submodule ff_inst_access_fault
  wire ff_inst_access_fault_CLR,
       ff_inst_access_fault_DEQ,
       ff_inst_access_fault_D_IN,
       ff_inst_access_fault_D_OUT,
       ff_inst_access_fault_EMPTY_N,
       ff_inst_access_fault_ENQ,
       ff_inst_access_fault_FULL_N;

  // ports of submodule ff_inst_request
  wire [33 : 0] ff_inst_request_D_IN, ff_inst_request_D_OUT;
  wire ff_inst_request_CLR,
       ff_inst_request_DEQ,
       ff_inst_request_EMPTY_N,
       ff_inst_request_ENQ,
       ff_inst_request_FULL_N;

  // ports of submodule ff_mem_access_fault
  wire ff_mem_access_fault_CLR,
       ff_mem_access_fault_DEQ,
       ff_mem_access_fault_D_IN,
       ff_mem_access_fault_ENQ;

  // ports of submodule ff_mem_request
  wire [69 : 0] ff_mem_request_D_IN, ff_mem_request_D_OUT;
  wire ff_mem_request_CLR,
       ff_mem_request_DEQ,
       ff_mem_request_EMPTY_N,
       ff_mem_request_ENQ,
       ff_mem_request_FULL_N;

  // ports of submodule memory_xactor_f_rd_addr
  wire [36 : 0] memory_xactor_f_rd_addr_D_IN, memory_xactor_f_rd_addr_D_OUT;
  wire memory_xactor_f_rd_addr_CLR,
       memory_xactor_f_rd_addr_DEQ,
       memory_xactor_f_rd_addr_EMPTY_N,
       memory_xactor_f_rd_addr_ENQ,
       memory_xactor_f_rd_addr_FULL_N;

  // ports of submodule memory_xactor_f_rd_data
  wire [33 : 0] memory_xactor_f_rd_data_D_IN, memory_xactor_f_rd_data_D_OUT;
  wire memory_xactor_f_rd_data_CLR,
       memory_xactor_f_rd_data_DEQ,
       memory_xactor_f_rd_data_EMPTY_N,
       memory_xactor_f_rd_data_ENQ,
       memory_xactor_f_rd_data_FULL_N;

  // ports of submodule memory_xactor_f_wr_addr
  wire [36 : 0] memory_xactor_f_wr_addr_D_IN, memory_xactor_f_wr_addr_D_OUT;
  wire memory_xactor_f_wr_addr_CLR,
       memory_xactor_f_wr_addr_DEQ,
       memory_xactor_f_wr_addr_EMPTY_N,
       memory_xactor_f_wr_addr_ENQ,
       memory_xactor_f_wr_addr_FULL_N;

  // ports of submodule memory_xactor_f_wr_data
  wire [35 : 0] memory_xactor_f_wr_data_D_IN, memory_xactor_f_wr_data_D_OUT;
  wire memory_xactor_f_wr_data_CLR,
       memory_xactor_f_wr_data_DEQ,
       memory_xactor_f_wr_data_EMPTY_N,
       memory_xactor_f_wr_data_ENQ,
       memory_xactor_f_wr_data_FULL_N;

  // ports of submodule memory_xactor_f_wr_resp
  wire [1 : 0] memory_xactor_f_wr_resp_D_IN, memory_xactor_f_wr_resp_D_OUT;
  wire memory_xactor_f_wr_resp_CLR,
       memory_xactor_f_wr_resp_DEQ,
       memory_xactor_f_wr_resp_EMPTY_N,
       memory_xactor_f_wr_resp_ENQ,
       memory_xactor_f_wr_resp_FULL_N;

  // ports of submodule riscv
  wire [69 : 0] riscv_memory_request_get;
  wire [63 : 0] riscv_clint_mtime_c_mtime;
  wire [46 : 0] riscv_mav_debug_access_csrs_cmd,
		riscv_mav_debug_access_gprs_cmd;
  wire [34 : 0] riscv_inst_response_put;
  wire [33 : 0] riscv_inst_request_get, riscv_memory_response_put;
  wire [31 : 0] riscv_mav_debug_access_csrs, riscv_mav_debug_access_gprs;
  wire [1 : 0] riscv_mv_curr_priv;
  wire riscv_EN_clint_msip,
       riscv_EN_clint_mtime,
       riscv_EN_clint_mtip,
       riscv_EN_ext_interrupt,
       riscv_EN_inst_request_get,
       riscv_EN_inst_response_put,
       riscv_EN_ma_debug_halt_request,
       riscv_EN_ma_debug_resume_request,
       riscv_EN_mav_debug_access_csrs,
       riscv_EN_mav_debug_access_gprs,
       riscv_EN_memory_request_get,
       riscv_EN_memory_response_put,
       riscv_RDY_inst_request_get,
       riscv_RDY_inst_response_put,
       riscv_RDY_mav_debug_access_gprs,
       riscv_RDY_memory_request_get,
       riscv_clint_msip_intrpt,
       riscv_clint_mtip_intrpt,
       riscv_ext_interrupt_intrpt,
       riscv_ma_debug_halt_request_ip,
       riscv_ma_debug_resume_request_ip,
       riscv_ma_debugger_available_avail,
       riscv_mv_core_debugenable,
       riscv_mv_core_is_halted,
       riscv_mv_trap;

  // rule scheduling signals
  wire CAN_FIRE_RL_handle_fetch_request,
       CAN_FIRE_RL_handle_fetch_response,
       CAN_FIRE_RL_handle_inst_access_fault,
       CAN_FIRE_RL_handle_memoryRead_response,
       CAN_FIRE_RL_handle_memoryWrite_response,
       CAN_FIRE_RL_handle_memory_request,
       CAN_FIRE_RL_update_epochs,
       CAN_FIRE_debug_server_abstractOperation,
       CAN_FIRE_debug_server_abstractReadResponse,
       CAN_FIRE_debug_server_dm_active,
       CAN_FIRE_debug_server_haltRequest,
       CAN_FIRE_debug_server_hartReset,
       CAN_FIRE_debug_server_resumeRequest,
       CAN_FIRE_master_d_m_arready,
       CAN_FIRE_master_d_m_awready,
       CAN_FIRE_master_d_m_bvalid,
       CAN_FIRE_master_d_m_rvalid,
       CAN_FIRE_master_d_m_wready,
       CAN_FIRE_master_i_m_arready,
       CAN_FIRE_master_i_m_awready,
       CAN_FIRE_master_i_m_bvalid,
       CAN_FIRE_master_i_m_rvalid,
       CAN_FIRE_master_i_m_wready,
       CAN_FIRE_sb_clint_msip_put,
       CAN_FIRE_sb_clint_mtime_put,
       CAN_FIRE_sb_clint_mtip_put,
       CAN_FIRE_sb_ext_interrupt_put,
       WILL_FIRE_RL_handle_fetch_request,
       WILL_FIRE_RL_handle_fetch_response,
       WILL_FIRE_RL_handle_inst_access_fault,
       WILL_FIRE_RL_handle_memoryRead_response,
       WILL_FIRE_RL_handle_memoryWrite_response,
       WILL_FIRE_RL_handle_memory_request,
       WILL_FIRE_RL_update_epochs,
       WILL_FIRE_debug_server_abstractOperation,
       WILL_FIRE_debug_server_abstractReadResponse,
       WILL_FIRE_debug_server_dm_active,
       WILL_FIRE_debug_server_haltRequest,
       WILL_FIRE_debug_server_hartReset,
       WILL_FIRE_debug_server_resumeRequest,
       WILL_FIRE_master_d_m_arready,
       WILL_FIRE_master_d_m_awready,
       WILL_FIRE_master_d_m_bvalid,
       WILL_FIRE_master_d_m_rvalid,
       WILL_FIRE_master_d_m_wready,
       WILL_FIRE_master_i_m_arready,
       WILL_FIRE_master_i_m_awready,
       WILL_FIRE_master_i_m_bvalid,
       WILL_FIRE_master_i_m_rvalid,
       WILL_FIRE_master_i_m_wready,
       WILL_FIRE_sb_clint_msip_put,
       WILL_FIRE_sb_clint_mtime_put,
       WILL_FIRE_sb_clint_mtip_put,
       WILL_FIRE_sb_ext_interrupt_put;

  // inputs to muxes for submodule ports
  wire [34 : 0] MUX_riscv_inst_response_put_1__VAL_1,
		MUX_riscv_inst_response_put_1__VAL_2;
  wire [33 : 0] MUX_riscv_memory_response_put_1__VAL_1,
		MUX_riscv_memory_response_put_1__VAL_2;
  wire [32 : 0] MUX_rg_abst_response_write_1__VAL_1,
		MUX_rg_abst_response_write_1__VAL_2;

  // remaining internal signals
  reg [31 : 0] CASE_ff_mem_requestD_OUT_BITS_2_TO_1_0_IF_ff__ETC__q3,
	       w_wdata__h2642;
  reg [3 : 0] write_strobe__h2334;
  wire [31 : 0] lv_data__h2101,
		memory_xactor_f_rd_data_first__4_BITS_31_TO_0__ETC___d103,
		put_data__h3904,
		put_data__h4321,
		put_inst__h2124;
  wire [15 : 0] memory_xactor_f_rd_data_first__4_BITS_31_TO_0__ETC__q2;
  wire [7 : 0] memory_xactor_f_rd_data_first__4_BITS_31_TO_0__ETC__q1;
  wire [4 : 0] lv_shift__h2100, lv_shift__h3883;
  wire [3 : 0] w_wstrb__h2643, write_strobe___1__h3706;
  wire [2 : 0] read_request_arprot__h1953;
  wire debug_server_abstractOperation_cmd_BITS_45_TO__ETC___d158,
       debug_server_abstractOperation_cmd_BITS_45_TO__ETC___d161,
       rg_wEpoch_port1__read__3_EQ_riscv_memory_reque_ETC___d56,
       x_port1__read__h2344;

  // value method master_d_m_awvalid
  assign master_d_awvalid = memory_xactor_f_wr_addr_EMPTY_N ;

  // value method master_d_m_awaddr
  assign master_d_awaddr = memory_xactor_f_wr_addr_D_OUT[36:5] ;

  // value method master_d_m_awprot
  assign master_d_awprot = memory_xactor_f_wr_addr_D_OUT[4:2] ;

  // value method master_d_m_awsize
  assign master_d_awsize = memory_xactor_f_wr_addr_D_OUT[1:0] ;

  // action method master_d_m_awready
  assign CAN_FIRE_master_d_m_awready = 1'd1 ;
  assign WILL_FIRE_master_d_m_awready = 1'd1 ;

  // value method master_d_m_wvalid
  assign master_d_wvalid = memory_xactor_f_wr_data_EMPTY_N ;

  // value method master_d_m_wdata
  assign master_d_wdata = memory_xactor_f_wr_data_D_OUT[35:4] ;

  // value method master_d_m_wstrb
  assign master_d_wstrb = memory_xactor_f_wr_data_D_OUT[3:0] ;

  // action method master_d_m_wready
  assign CAN_FIRE_master_d_m_wready = 1'd1 ;
  assign WILL_FIRE_master_d_m_wready = 1'd1 ;

  // action method master_d_m_bvalid
  assign CAN_FIRE_master_d_m_bvalid = 1'd1 ;
  assign WILL_FIRE_master_d_m_bvalid = 1'd1 ;

  // value method master_d_m_bready
  assign master_d_bready = memory_xactor_f_wr_resp_FULL_N ;

  // value method master_d_m_arvalid
  assign master_d_arvalid = memory_xactor_f_rd_addr_EMPTY_N ;

  // value method master_d_m_araddr
  assign master_d_araddr = memory_xactor_f_rd_addr_D_OUT[36:5] ;

  // value method master_d_m_arprot
  assign master_d_arprot = memory_xactor_f_rd_addr_D_OUT[4:2] ;

  // value method master_d_m_arsize
  assign master_d_arsize = memory_xactor_f_rd_addr_D_OUT[1:0] ;

  // action method master_d_m_arready
  assign CAN_FIRE_master_d_m_arready = 1'd1 ;
  assign WILL_FIRE_master_d_m_arready = 1'd1 ;

  // action method master_d_m_rvalid
  assign CAN_FIRE_master_d_m_rvalid = 1'd1 ;
  assign WILL_FIRE_master_d_m_rvalid = 1'd1 ;

  // value method master_d_m_rready
  assign master_d_rready = memory_xactor_f_rd_data_FULL_N ;

  // value method master_i_m_awvalid
  assign master_i_awvalid = fetch_xactor_f_wr_addr_EMPTY_N ;

  // value method master_i_m_awaddr
  assign master_i_awaddr = fetch_xactor_f_wr_addr_D_OUT[36:5] ;

  // value method master_i_m_awprot
  assign master_i_awprot = fetch_xactor_f_wr_addr_D_OUT[4:2] ;

  // value method master_i_m_awsize
  assign master_i_awsize = fetch_xactor_f_wr_addr_D_OUT[1:0] ;

  // action method master_i_m_awready
  assign CAN_FIRE_master_i_m_awready = 1'd1 ;
  assign WILL_FIRE_master_i_m_awready = 1'd1 ;

  // value method master_i_m_wvalid
  assign master_i_wvalid = fetch_xactor_f_wr_data_EMPTY_N ;

  // value method master_i_m_wdata
  assign master_i_wdata = fetch_xactor_f_wr_data_D_OUT[35:4] ;

  // value method master_i_m_wstrb
  assign master_i_wstrb = fetch_xactor_f_wr_data_D_OUT[3:0] ;

  // action method master_i_m_wready
  assign CAN_FIRE_master_i_m_wready = 1'd1 ;
  assign WILL_FIRE_master_i_m_wready = 1'd1 ;

  // action method master_i_m_bvalid
  assign CAN_FIRE_master_i_m_bvalid = 1'd1 ;
  assign WILL_FIRE_master_i_m_bvalid = 1'd1 ;

  // value method master_i_m_bready
  assign master_i_bready = fetch_xactor_f_wr_resp_FULL_N ;

  // value method master_i_m_arvalid
  assign master_i_arvalid = fetch_xactor_f_rd_addr_EMPTY_N ;

  // value method master_i_m_araddr
  assign master_i_araddr = fetch_xactor_f_rd_addr_D_OUT[36:5] ;

  // value method master_i_m_arprot
  assign master_i_arprot = fetch_xactor_f_rd_addr_D_OUT[4:2] ;

  // value method master_i_m_arsize
  assign master_i_arsize = fetch_xactor_f_rd_addr_D_OUT[1:0] ;

  // action method master_i_m_arready
  assign CAN_FIRE_master_i_m_arready = 1'd1 ;
  assign WILL_FIRE_master_i_m_arready = 1'd1 ;

  // action method master_i_m_rvalid
  assign CAN_FIRE_master_i_m_rvalid = 1'd1 ;
  assign WILL_FIRE_master_i_m_rvalid = 1'd1 ;

  // value method master_i_m_rready
  assign master_i_rready = fetch_xactor_f_rd_data_FULL_N ;

  // action method sb_clint_msip_put
  assign RDY_sb_clint_msip_put = 1'd1 ;
  assign CAN_FIRE_sb_clint_msip_put = 1'd1 ;
  assign WILL_FIRE_sb_clint_msip_put = EN_sb_clint_msip_put ;

  // action method sb_clint_mtip_put
  assign RDY_sb_clint_mtip_put = 1'd1 ;
  assign CAN_FIRE_sb_clint_mtip_put = 1'd1 ;
  assign WILL_FIRE_sb_clint_mtip_put = EN_sb_clint_mtip_put ;

  // action method sb_clint_mtime_put
  assign RDY_sb_clint_mtime_put = 1'd1 ;
  assign CAN_FIRE_sb_clint_mtime_put = 1'd1 ;
  assign WILL_FIRE_sb_clint_mtime_put = EN_sb_clint_mtime_put ;

  // action method sb_ext_interrupt_put
  assign RDY_sb_ext_interrupt_put = 1'd1 ;
  assign CAN_FIRE_sb_ext_interrupt_put = 1'd1 ;
  assign WILL_FIRE_sb_ext_interrupt_put = EN_sb_ext_interrupt_put ;

  // action method debug_server_abstractOperation
  assign RDY_debug_server_abstractOperation =
	     !rg_abst_response[32] && riscv_RDY_mav_debug_access_gprs ;
  assign CAN_FIRE_debug_server_abstractOperation =
	     !rg_abst_response[32] && riscv_RDY_mav_debug_access_gprs ;
  assign WILL_FIRE_debug_server_abstractOperation =
	     EN_debug_server_abstractOperation ;

  // actionvalue method debug_server_abstractReadResponse
  assign debug_server_abstractReadResponse = rg_abst_response[31:0] ;
  assign RDY_debug_server_abstractReadResponse = rg_abst_response[32] ;
  assign CAN_FIRE_debug_server_abstractReadResponse = rg_abst_response[32] ;
  assign WILL_FIRE_debug_server_abstractReadResponse =
	     EN_debug_server_abstractReadResponse ;

  // action method debug_server_haltRequest
  assign CAN_FIRE_debug_server_haltRequest = 1'd1 ;
  assign WILL_FIRE_debug_server_haltRequest = 1'd1 ;

  // action method debug_server_resumeRequest
  assign CAN_FIRE_debug_server_resumeRequest = 1'd1 ;
  assign WILL_FIRE_debug_server_resumeRequest = 1'd1 ;

  // action method debug_server_hartReset
  assign CAN_FIRE_debug_server_hartReset = 1'd1 ;
  assign WILL_FIRE_debug_server_hartReset = 1'd1 ;

  // action method debug_server_dm_active
  assign CAN_FIRE_debug_server_dm_active = 1'd1 ;
  assign WILL_FIRE_debug_server_dm_active = 1'd1 ;

  // value method debug_server_has_reset
  assign debug_server_has_reset = 1'd1 ;

  // value method debug_server_is_halted
  assign debug_server_is_halted = riscv_mv_core_is_halted ;

  // value method debug_server_is_unavailable
  assign debug_server_is_unavailable = ~riscv_mv_core_debugenable ;

  // submodule fetch_xactor_f_rd_addr
  FIFO2 #(.width(32'd37), .guarded(1'd1)) fetch_xactor_f_rd_addr(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(fetch_xactor_f_rd_addr_D_IN),
								 .ENQ(fetch_xactor_f_rd_addr_ENQ),
								 .DEQ(fetch_xactor_f_rd_addr_DEQ),
								 .CLR(fetch_xactor_f_rd_addr_CLR),
								 .D_OUT(fetch_xactor_f_rd_addr_D_OUT),
								 .FULL_N(fetch_xactor_f_rd_addr_FULL_N),
								 .EMPTY_N(fetch_xactor_f_rd_addr_EMPTY_N));

  // submodule fetch_xactor_f_rd_data
  FIFO2 #(.width(32'd34), .guarded(1'd1)) fetch_xactor_f_rd_data(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(fetch_xactor_f_rd_data_D_IN),
								 .ENQ(fetch_xactor_f_rd_data_ENQ),
								 .DEQ(fetch_xactor_f_rd_data_DEQ),
								 .CLR(fetch_xactor_f_rd_data_CLR),
								 .D_OUT(fetch_xactor_f_rd_data_D_OUT),
								 .FULL_N(fetch_xactor_f_rd_data_FULL_N),
								 .EMPTY_N(fetch_xactor_f_rd_data_EMPTY_N));

  // submodule fetch_xactor_f_wr_addr
  FIFO2 #(.width(32'd37), .guarded(1'd1)) fetch_xactor_f_wr_addr(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(fetch_xactor_f_wr_addr_D_IN),
								 .ENQ(fetch_xactor_f_wr_addr_ENQ),
								 .DEQ(fetch_xactor_f_wr_addr_DEQ),
								 .CLR(fetch_xactor_f_wr_addr_CLR),
								 .D_OUT(fetch_xactor_f_wr_addr_D_OUT),
								 .FULL_N(),
								 .EMPTY_N(fetch_xactor_f_wr_addr_EMPTY_N));

  // submodule fetch_xactor_f_wr_data
  FIFO2 #(.width(32'd36), .guarded(1'd1)) fetch_xactor_f_wr_data(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(fetch_xactor_f_wr_data_D_IN),
								 .ENQ(fetch_xactor_f_wr_data_ENQ),
								 .DEQ(fetch_xactor_f_wr_data_DEQ),
								 .CLR(fetch_xactor_f_wr_data_CLR),
								 .D_OUT(fetch_xactor_f_wr_data_D_OUT),
								 .FULL_N(),
								 .EMPTY_N(fetch_xactor_f_wr_data_EMPTY_N));

  // submodule fetch_xactor_f_wr_resp
  FIFO2 #(.width(32'd2), .guarded(1'd1)) fetch_xactor_f_wr_resp(.RST(RST_N),
								.CLK(CLK),
								.D_IN(fetch_xactor_f_wr_resp_D_IN),
								.ENQ(fetch_xactor_f_wr_resp_ENQ),
								.DEQ(fetch_xactor_f_wr_resp_DEQ),
								.CLR(fetch_xactor_f_wr_resp_CLR),
								.D_OUT(),
								.FULL_N(fetch_xactor_f_wr_resp_FULL_N),
								.EMPTY_N());

  // submodule ff_inst_access_fault
  FIFO2 #(.width(32'd1), .guarded(1'd1)) ff_inst_access_fault(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ff_inst_access_fault_D_IN),
							      .ENQ(ff_inst_access_fault_ENQ),
							      .DEQ(ff_inst_access_fault_DEQ),
							      .CLR(ff_inst_access_fault_CLR),
							      .D_OUT(ff_inst_access_fault_D_OUT),
							      .FULL_N(ff_inst_access_fault_FULL_N),
							      .EMPTY_N(ff_inst_access_fault_EMPTY_N));

  // submodule ff_inst_request
  FIFO2 #(.width(32'd34), .guarded(1'd1)) ff_inst_request(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(ff_inst_request_D_IN),
							  .ENQ(ff_inst_request_ENQ),
							  .DEQ(ff_inst_request_DEQ),
							  .CLR(ff_inst_request_CLR),
							  .D_OUT(ff_inst_request_D_OUT),
							  .FULL_N(ff_inst_request_FULL_N),
							  .EMPTY_N(ff_inst_request_EMPTY_N));

  // submodule ff_mem_access_fault
  FIFO2 #(.width(32'd1), .guarded(1'd1)) ff_mem_access_fault(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ff_mem_access_fault_D_IN),
							     .ENQ(ff_mem_access_fault_ENQ),
							     .DEQ(ff_mem_access_fault_DEQ),
							     .CLR(ff_mem_access_fault_CLR),
							     .D_OUT(),
							     .FULL_N(),
							     .EMPTY_N());

  // submodule ff_mem_request
  FIFO2 #(.width(32'd70), .guarded(1'd1)) ff_mem_request(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(ff_mem_request_D_IN),
							 .ENQ(ff_mem_request_ENQ),
							 .DEQ(ff_mem_request_DEQ),
							 .CLR(ff_mem_request_CLR),
							 .D_OUT(ff_mem_request_D_OUT),
							 .FULL_N(ff_mem_request_FULL_N),
							 .EMPTY_N(ff_mem_request_EMPTY_N));

  // submodule memory_xactor_f_rd_addr
  FIFO2 #(.width(32'd37), .guarded(1'd1)) memory_xactor_f_rd_addr(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(memory_xactor_f_rd_addr_D_IN),
								  .ENQ(memory_xactor_f_rd_addr_ENQ),
								  .DEQ(memory_xactor_f_rd_addr_DEQ),
								  .CLR(memory_xactor_f_rd_addr_CLR),
								  .D_OUT(memory_xactor_f_rd_addr_D_OUT),
								  .FULL_N(memory_xactor_f_rd_addr_FULL_N),
								  .EMPTY_N(memory_xactor_f_rd_addr_EMPTY_N));

  // submodule memory_xactor_f_rd_data
  FIFO2 #(.width(32'd34), .guarded(1'd1)) memory_xactor_f_rd_data(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(memory_xactor_f_rd_data_D_IN),
								  .ENQ(memory_xactor_f_rd_data_ENQ),
								  .DEQ(memory_xactor_f_rd_data_DEQ),
								  .CLR(memory_xactor_f_rd_data_CLR),
								  .D_OUT(memory_xactor_f_rd_data_D_OUT),
								  .FULL_N(memory_xactor_f_rd_data_FULL_N),
								  .EMPTY_N(memory_xactor_f_rd_data_EMPTY_N));

  // submodule memory_xactor_f_wr_addr
  FIFO2 #(.width(32'd37), .guarded(1'd1)) memory_xactor_f_wr_addr(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(memory_xactor_f_wr_addr_D_IN),
								  .ENQ(memory_xactor_f_wr_addr_ENQ),
								  .DEQ(memory_xactor_f_wr_addr_DEQ),
								  .CLR(memory_xactor_f_wr_addr_CLR),
								  .D_OUT(memory_xactor_f_wr_addr_D_OUT),
								  .FULL_N(memory_xactor_f_wr_addr_FULL_N),
								  .EMPTY_N(memory_xactor_f_wr_addr_EMPTY_N));

  // submodule memory_xactor_f_wr_data
  FIFO2 #(.width(32'd36), .guarded(1'd1)) memory_xactor_f_wr_data(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(memory_xactor_f_wr_data_D_IN),
								  .ENQ(memory_xactor_f_wr_data_ENQ),
								  .DEQ(memory_xactor_f_wr_data_DEQ),
								  .CLR(memory_xactor_f_wr_data_CLR),
								  .D_OUT(memory_xactor_f_wr_data_D_OUT),
								  .FULL_N(memory_xactor_f_wr_data_FULL_N),
								  .EMPTY_N(memory_xactor_f_wr_data_EMPTY_N));

  // submodule memory_xactor_f_wr_resp
  FIFO2 #(.width(32'd2), .guarded(1'd1)) memory_xactor_f_wr_resp(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(memory_xactor_f_wr_resp_D_IN),
								 .ENQ(memory_xactor_f_wr_resp_ENQ),
								 .DEQ(memory_xactor_f_wr_resp_DEQ),
								 .CLR(memory_xactor_f_wr_resp_CLR),
								 .D_OUT(memory_xactor_f_wr_resp_D_OUT),
								 .FULL_N(memory_xactor_f_wr_resp_FULL_N),
								 .EMPTY_N(memory_xactor_f_wr_resp_EMPTY_N));

  // submodule riscv
  mkriscv riscv(.resetpc(resetpc),
		.CLK(CLK),
		.RST_N(RST_N),
		.clint_msip_intrpt(riscv_clint_msip_intrpt),
		.clint_mtime_c_mtime(riscv_clint_mtime_c_mtime),
		.clint_mtip_intrpt(riscv_clint_mtip_intrpt),
		.ext_interrupt_intrpt(riscv_ext_interrupt_intrpt),
		.inst_response_put(riscv_inst_response_put),
		.ma_debug_halt_request_ip(riscv_ma_debug_halt_request_ip),
		.ma_debug_resume_request_ip(riscv_ma_debug_resume_request_ip),
		.ma_debugger_available_avail(riscv_ma_debugger_available_avail),
		.mav_debug_access_csrs_cmd(riscv_mav_debug_access_csrs_cmd),
		.mav_debug_access_gprs_cmd(riscv_mav_debug_access_gprs_cmd),
		.memory_response_put(riscv_memory_response_put),
		.EN_inst_request_get(riscv_EN_inst_request_get),
		.EN_inst_response_put(riscv_EN_inst_response_put),
		.EN_memory_request_get(riscv_EN_memory_request_get),
		.EN_memory_response_put(riscv_EN_memory_response_put),
		.EN_clint_msip(riscv_EN_clint_msip),
		.EN_clint_mtip(riscv_EN_clint_mtip),
		.EN_clint_mtime(riscv_EN_clint_mtime),
		.EN_ext_interrupt(riscv_EN_ext_interrupt),
		.EN_mav_debug_access_gprs(riscv_EN_mav_debug_access_gprs),
		.EN_mav_debug_access_csrs(riscv_EN_mav_debug_access_csrs),
		.EN_ma_debug_halt_request(riscv_EN_ma_debug_halt_request),
		.EN_ma_debug_resume_request(riscv_EN_ma_debug_resume_request),
		.inst_request_get(riscv_inst_request_get),
		.RDY_inst_request_get(riscv_RDY_inst_request_get),
		.RDY_inst_response_put(riscv_RDY_inst_response_put),
		.memory_request_get(riscv_memory_request_get),
		.RDY_memory_request_get(riscv_RDY_memory_request_get),
		.RDY_memory_response_put(),
		.RDY_clint_msip(),
		.RDY_clint_mtip(),
		.RDY_clint_mtime(),
		.RDY_ext_interrupt(),
		.mav_debug_access_gprs(riscv_mav_debug_access_gprs),
		.RDY_mav_debug_access_gprs(riscv_RDY_mav_debug_access_gprs),
		.mav_debug_access_csrs(riscv_mav_debug_access_csrs),
		.RDY_mav_debug_access_csrs(),
		.RDY_ma_debug_halt_request(),
		.RDY_ma_debug_resume_request(),
		.RDY_ma_debugger_available(),
		.mv_core_is_halted(riscv_mv_core_is_halted),
		.RDY_mv_core_is_halted(),
		.mv_core_debugenable(riscv_mv_core_debugenable),
		.RDY_mv_core_debugenable(),
		.mv_curr_priv(riscv_mv_curr_priv),
		.RDY_mv_curr_priv(),
		.mv_trap(riscv_mv_trap),
		.RDY_mv_trap());

  // rule RL_handle_fetch_request
  assign CAN_FIRE_RL_handle_fetch_request =
	     riscv_RDY_inst_request_get && fetch_xactor_f_rd_addr_FULL_N &&
	     ff_inst_access_fault_FULL_N &&
	     ff_inst_request_FULL_N ;
  assign WILL_FIRE_RL_handle_fetch_request =
	     CAN_FIRE_RL_handle_fetch_request ;

  // rule RL_update_epochs
  assign CAN_FIRE_RL_update_epochs = riscv_mv_trap ;
  assign WILL_FIRE_RL_update_epochs = riscv_mv_trap ;

  // rule RL_handle_fetch_response
  assign CAN_FIRE_RL_handle_fetch_response =
	     riscv_RDY_inst_response_put && ff_inst_access_fault_EMPTY_N &&
	     fetch_xactor_f_rd_data_EMPTY_N &&
	     ff_inst_request_EMPTY_N &&
	     !ff_inst_access_fault_D_OUT ;
  assign WILL_FIRE_RL_handle_fetch_response =
	     CAN_FIRE_RL_handle_fetch_response ;

  // rule RL_handle_inst_access_fault
  assign CAN_FIRE_RL_handle_inst_access_fault =
	     riscv_RDY_inst_response_put && ff_inst_access_fault_EMPTY_N &&
	     ff_inst_request_EMPTY_N &&
	     ff_inst_access_fault_D_OUT ;
  assign WILL_FIRE_RL_handle_inst_access_fault =
	     CAN_FIRE_RL_handle_inst_access_fault ;

  // rule RL_handle_memory_request
  assign CAN_FIRE_RL_handle_memory_request =
	     riscv_RDY_memory_request_get && ff_mem_request_FULL_N &&
	     memory_xactor_f_wr_addr_FULL_N &&
	     memory_xactor_f_wr_data_FULL_N &&
	     memory_xactor_f_rd_addr_FULL_N ;
  assign WILL_FIRE_RL_handle_memory_request =
	     CAN_FIRE_RL_handle_memory_request ;

  // rule RL_handle_memoryRead_response
  assign CAN_FIRE_RL_handle_memoryRead_response =
	     ff_mem_request_EMPTY_N && memory_xactor_f_rd_data_EMPTY_N &&
	     ff_mem_request_D_OUT[5:4] == 2'd0 ;
  assign WILL_FIRE_RL_handle_memoryRead_response =
	     CAN_FIRE_RL_handle_memoryRead_response ;

  // rule RL_handle_memoryWrite_response
  assign CAN_FIRE_RL_handle_memoryWrite_response =
	     ff_mem_request_EMPTY_N && memory_xactor_f_wr_resp_EMPTY_N &&
	     ff_mem_request_D_OUT[5:4] == 2'd1 ;
  assign WILL_FIRE_RL_handle_memoryWrite_response =
	     CAN_FIRE_RL_handle_memoryWrite_response ;

  // inputs to muxes for submodule ports
  assign MUX_rg_abst_response_write_1__VAL_1 =
	     { 1'd0,
	       32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign MUX_rg_abst_response_write_1__VAL_2 =
	     debug_server_abstractOperation_cmd_BITS_45_TO__ETC___d158 ?
	       { 1'd1, riscv_mav_debug_access_csrs } :
	       (debug_server_abstractOperation_cmd_BITS_45_TO__ETC___d161 ?
		  { 1'd1, riscv_mav_debug_access_gprs } :
		  33'h100000000) ;
  assign MUX_riscv_inst_response_put_1__VAL_1 =
	     { put_inst__h2124,
	       ff_inst_request_D_OUT[1:0],
	       fetch_xactor_f_rd_data_D_OUT[33:32] != 2'd0 } ;
  assign MUX_riscv_inst_response_put_1__VAL_2 =
	     { ff_inst_request_D_OUT, 1'd1 } ;
  assign MUX_riscv_memory_response_put_1__VAL_1 =
	     { put_data__h3904,
	       memory_xactor_f_rd_data_D_OUT[33:32] != 2'd0,
	       ff_mem_request_D_OUT[0] } ;
  assign MUX_riscv_memory_response_put_1__VAL_2 =
	     { put_data__h4321,
	       memory_xactor_f_wr_resp_D_OUT != 2'd0,
	       ff_mem_request_D_OUT[0] } ;

  // register rg_abst_response
  assign rg_abst_response_D_IN =
	     EN_debug_server_abstractReadResponse ?
	       MUX_rg_abst_response_write_1__VAL_1 :
	       MUX_rg_abst_response_write_1__VAL_2 ;
  assign rg_abst_response_EN =
	     EN_debug_server_abstractReadResponse ||
	     EN_debug_server_abstractOperation ;

  // register rg_wEpoch
  assign rg_wEpoch_D_IN = x_port1__read__h2344 ;
  assign rg_wEpoch_EN = 1'b1 ;

  // submodule fetch_xactor_f_rd_addr
  assign fetch_xactor_f_rd_addr_D_IN =
	     { riscv_inst_request_get[33:2],
	       read_request_arprot__h1953,
	       2'd2 } ;
  assign fetch_xactor_f_rd_addr_ENQ = CAN_FIRE_RL_handle_fetch_request ;
  assign fetch_xactor_f_rd_addr_DEQ =
	     fetch_xactor_f_rd_addr_EMPTY_N && master_i_m_arready_arready ;
  assign fetch_xactor_f_rd_addr_CLR = 1'b0 ;

  // submodule fetch_xactor_f_rd_data
  assign fetch_xactor_f_rd_data_D_IN =
	     { master_i_m_rvalid_rresp, master_i_m_rvalid_rdata } ;
  assign fetch_xactor_f_rd_data_ENQ =
	     master_i_m_rvalid_rvalid && fetch_xactor_f_rd_data_FULL_N ;
  assign fetch_xactor_f_rd_data_DEQ = CAN_FIRE_RL_handle_fetch_response ;
  assign fetch_xactor_f_rd_data_CLR = 1'b0 ;

  // submodule fetch_xactor_f_wr_addr
  assign fetch_xactor_f_wr_addr_D_IN = 37'h0 ;
  assign fetch_xactor_f_wr_addr_ENQ = 1'b0 ;
  assign fetch_xactor_f_wr_addr_DEQ =
	     fetch_xactor_f_wr_addr_EMPTY_N && master_i_m_awready_awready ;
  assign fetch_xactor_f_wr_addr_CLR = 1'b0 ;

  // submodule fetch_xactor_f_wr_data
  assign fetch_xactor_f_wr_data_D_IN = 36'h0 ;
  assign fetch_xactor_f_wr_data_ENQ = 1'b0 ;
  assign fetch_xactor_f_wr_data_DEQ =
	     fetch_xactor_f_wr_data_EMPTY_N && master_i_m_wready_wready ;
  assign fetch_xactor_f_wr_data_CLR = 1'b0 ;

  // submodule fetch_xactor_f_wr_resp
  assign fetch_xactor_f_wr_resp_D_IN = master_i_m_bvalid_bresp ;
  assign fetch_xactor_f_wr_resp_ENQ =
	     master_i_m_bvalid_bvalid && fetch_xactor_f_wr_resp_FULL_N ;
  assign fetch_xactor_f_wr_resp_DEQ = 1'b0 ;
  assign fetch_xactor_f_wr_resp_CLR = 1'b0 ;

  // submodule ff_inst_access_fault
  assign ff_inst_access_fault_D_IN = 1'd0 ;
  assign ff_inst_access_fault_ENQ = CAN_FIRE_RL_handle_fetch_request ;
  assign ff_inst_access_fault_DEQ =
	     WILL_FIRE_RL_handle_inst_access_fault ||
	     WILL_FIRE_RL_handle_fetch_response ;
  assign ff_inst_access_fault_CLR = 1'b0 ;

  // submodule ff_inst_request
  assign ff_inst_request_D_IN = riscv_inst_request_get ;
  assign ff_inst_request_ENQ = CAN_FIRE_RL_handle_fetch_request ;
  assign ff_inst_request_DEQ =
	     WILL_FIRE_RL_handle_inst_access_fault ||
	     WILL_FIRE_RL_handle_fetch_response ;
  assign ff_inst_request_CLR = 1'b0 ;

  // submodule ff_mem_access_fault
  assign ff_mem_access_fault_D_IN = 1'b0 ;
  assign ff_mem_access_fault_ENQ = 1'b0 ;
  assign ff_mem_access_fault_DEQ = 1'b0 ;
  assign ff_mem_access_fault_CLR = 1'b0 ;

  // submodule ff_mem_request
  assign ff_mem_request_D_IN =
	     { riscv_memory_request_get[69:38],
	       w_wdata__h2642,
	       riscv_memory_request_get[5:0] } ;
  assign ff_mem_request_ENQ =
	     WILL_FIRE_RL_handle_memory_request &&
	     rg_wEpoch_port1__read__3_EQ_riscv_memory_reque_ETC___d56 ;
  assign ff_mem_request_DEQ =
	     WILL_FIRE_RL_handle_memoryWrite_response ||
	     WILL_FIRE_RL_handle_memoryRead_response ;
  assign ff_mem_request_CLR = 1'b0 ;

  // submodule memory_xactor_f_rd_addr
  assign memory_xactor_f_rd_addr_D_IN =
	     { riscv_memory_request_get[69:38],
	       3'd1,
	       riscv_memory_request_get[2:1] } ;
  assign memory_xactor_f_rd_addr_ENQ =
	     WILL_FIRE_RL_handle_memory_request &&
	     rg_wEpoch_port1__read__3_EQ_riscv_memory_reque_ETC___d56 &&
	     riscv_memory_request_get[5:4] != 2'd1 ;
  assign memory_xactor_f_rd_addr_DEQ =
	     memory_xactor_f_rd_addr_EMPTY_N && master_d_m_arready_arready ;
  assign memory_xactor_f_rd_addr_CLR = 1'b0 ;

  // submodule memory_xactor_f_rd_data
  assign memory_xactor_f_rd_data_D_IN =
	     { master_d_m_rvalid_rresp, master_d_m_rvalid_rdata } ;
  assign memory_xactor_f_rd_data_ENQ =
	     master_d_m_rvalid_rvalid && memory_xactor_f_rd_data_FULL_N ;
  assign memory_xactor_f_rd_data_DEQ =
	     CAN_FIRE_RL_handle_memoryRead_response ;
  assign memory_xactor_f_rd_data_CLR = 1'b0 ;

  // submodule memory_xactor_f_wr_addr
  assign memory_xactor_f_wr_addr_D_IN =
	     { riscv_memory_request_get[69:38],
	       3'd1,
	       riscv_memory_request_get[2:1] } ;
  assign memory_xactor_f_wr_addr_ENQ =
	     WILL_FIRE_RL_handle_memory_request &&
	     rg_wEpoch_port1__read__3_EQ_riscv_memory_reque_ETC___d56 &&
	     riscv_memory_request_get[5:4] == 2'd1 ;
  assign memory_xactor_f_wr_addr_DEQ =
	     memory_xactor_f_wr_addr_EMPTY_N && master_d_m_awready_awready ;
  assign memory_xactor_f_wr_addr_CLR = 1'b0 ;

  // submodule memory_xactor_f_wr_data
  assign memory_xactor_f_wr_data_D_IN = { w_wdata__h2642, w_wstrb__h2643 } ;
  assign memory_xactor_f_wr_data_ENQ =
	     WILL_FIRE_RL_handle_memory_request &&
	     rg_wEpoch_port1__read__3_EQ_riscv_memory_reque_ETC___d56 &&
	     riscv_memory_request_get[5:4] == 2'd1 ;
  assign memory_xactor_f_wr_data_DEQ =
	     memory_xactor_f_wr_data_EMPTY_N && master_d_m_wready_wready ;
  assign memory_xactor_f_wr_data_CLR = 1'b0 ;

  // submodule memory_xactor_f_wr_resp
  assign memory_xactor_f_wr_resp_D_IN = master_d_m_bvalid_bresp ;
  assign memory_xactor_f_wr_resp_ENQ =
	     master_d_m_bvalid_bvalid && memory_xactor_f_wr_resp_FULL_N ;
  assign memory_xactor_f_wr_resp_DEQ =
	     CAN_FIRE_RL_handle_memoryWrite_response ;
  assign memory_xactor_f_wr_resp_CLR = 1'b0 ;

  // submodule riscv
  assign riscv_clint_msip_intrpt = sb_clint_msip_put ;
  assign riscv_clint_mtime_c_mtime = sb_clint_mtime_put ;
  assign riscv_clint_mtip_intrpt = sb_clint_mtip_put ;
  assign riscv_ext_interrupt_intrpt = sb_ext_interrupt_put ;
  assign riscv_inst_response_put =
	     WILL_FIRE_RL_handle_fetch_response ?
	       MUX_riscv_inst_response_put_1__VAL_1 :
	       MUX_riscv_inst_response_put_1__VAL_2 ;
  assign riscv_ma_debug_halt_request_ip =
	     debug_server_haltRequest_halt_request ;
  assign riscv_ma_debug_resume_request_ip =
	     debug_server_resumeRequest_resume_request ;
  assign riscv_ma_debugger_available_avail =
	     debug_server_dm_active_dm_active ;
  assign riscv_mav_debug_access_csrs_cmd =
	     debug_server_abstractOperation_cmd ;
  assign riscv_mav_debug_access_gprs_cmd =
	     debug_server_abstractOperation_cmd ;
  assign riscv_memory_response_put =
	     WILL_FIRE_RL_handle_memoryRead_response ?
	       MUX_riscv_memory_response_put_1__VAL_1 :
	       MUX_riscv_memory_response_put_1__VAL_2 ;
  assign riscv_EN_inst_request_get = CAN_FIRE_RL_handle_fetch_request ;
  assign riscv_EN_inst_response_put =
	     WILL_FIRE_RL_handle_fetch_response ||
	     WILL_FIRE_RL_handle_inst_access_fault ;
  assign riscv_EN_memory_request_get = CAN_FIRE_RL_handle_memory_request ;
  assign riscv_EN_memory_response_put =
	     WILL_FIRE_RL_handle_memoryRead_response ||
	     WILL_FIRE_RL_handle_memoryWrite_response ;
  assign riscv_EN_clint_msip = EN_sb_clint_msip_put ;
  assign riscv_EN_clint_mtip = EN_sb_clint_mtip_put ;
  assign riscv_EN_clint_mtime = EN_sb_clint_mtime_put ;
  assign riscv_EN_ext_interrupt = EN_sb_ext_interrupt_put ;
  assign riscv_EN_mav_debug_access_gprs =
	     EN_debug_server_abstractOperation &&
	     !debug_server_abstractOperation_cmd_BITS_45_TO__ETC___d158 &&
	     debug_server_abstractOperation_cmd_BITS_45_TO__ETC___d161 ;
  assign riscv_EN_mav_debug_access_csrs =
	     EN_debug_server_abstractOperation &&
	     debug_server_abstractOperation_cmd_BITS_45_TO__ETC___d158 ;
  assign riscv_EN_ma_debug_halt_request = 1'd1 ;
  assign riscv_EN_ma_debug_resume_request = 1'd1 ;

  // remaining internal signals
  assign debug_server_abstractOperation_cmd_BITS_45_TO__ETC___d158 =
	     debug_server_abstractOperation_cmd[45:32] < 14'd4096 ;
  assign debug_server_abstractOperation_cmd_BITS_45_TO__ETC___d161 =
	     debug_server_abstractOperation_cmd[45:32] < 14'h1020 ;
  assign lv_data__h2101 =
	     fetch_xactor_f_rd_data_D_OUT[31:0] >> lv_shift__h2100 ;
  assign lv_shift__h2100 = { ff_inst_request_D_OUT[3:2], 3'd0 } ;
  assign lv_shift__h3883 = { ff_mem_request_D_OUT[39:38], 3'd0 } ;
  assign memory_xactor_f_rd_data_first__4_BITS_31_TO_0__ETC___d103 =
	     memory_xactor_f_rd_data_D_OUT[31:0] >> lv_shift__h3883 ;
  assign memory_xactor_f_rd_data_first__4_BITS_31_TO_0__ETC__q1 =
	     memory_xactor_f_rd_data_first__4_BITS_31_TO_0__ETC___d103[7:0] ;
  assign memory_xactor_f_rd_data_first__4_BITS_31_TO_0__ETC__q2 =
	     memory_xactor_f_rd_data_first__4_BITS_31_TO_0__ETC___d103[15:0] ;
  assign put_data__h3904 =
	     (memory_xactor_f_rd_data_D_OUT[33:32] == 2'd0) ?
	       CASE_ff_mem_requestD_OUT_BITS_2_TO_1_0_IF_ff__ETC__q3 :
	       ff_mem_request_D_OUT[69:38] ;
  assign put_data__h4321 =
	     (memory_xactor_f_wr_resp_D_OUT == 2'd0) ?
	       32'd0 :
	       ff_mem_request_D_OUT[69:38] ;
  assign put_inst__h2124 =
	     (fetch_xactor_f_rd_data_D_OUT[33:32] == 2'd0) ?
	       lv_data__h2101 :
	       ff_inst_request_D_OUT[33:2] ;
  assign read_request_arprot__h1953 = { 2'd0, riscv_mv_curr_priv[1] } ;
  assign rg_wEpoch_port1__read__3_EQ_riscv_memory_reque_ETC___d56 =
	     x_port1__read__h2344 == riscv_memory_request_get[0] ;
  assign w_wstrb__h2643 =
	     (riscv_memory_request_get[3:1] == 3'd3) ?
	       write_strobe__h2334 :
	       write_strobe___1__h3706 ;
  assign write_strobe___1__h3706 =
	     write_strobe__h2334 << riscv_memory_request_get[39:38] ;
  assign x_port1__read__h2344 = riscv_mv_trap ? ~rg_wEpoch : rg_wEpoch ;
  always@(riscv_memory_request_get)
  begin
    case (riscv_memory_request_get[2:1])
      2'd0: w_wdata__h2642 = {4{riscv_memory_request_get[13:6]}};
      2'd1: w_wdata__h2642 = {2{riscv_memory_request_get[21:6]}};
      default: w_wdata__h2642 = riscv_memory_request_get[37:6];
    endcase
  end
  always@(riscv_memory_request_get)
  begin
    case (riscv_memory_request_get[3:1])
      3'd0: write_strobe__h2334 = 4'b0001;
      3'd1: write_strobe__h2334 = 4'b0011;
      default: write_strobe__h2334 = 4'hF;
    endcase
  end
  always@(ff_mem_request_D_OUT or
	  memory_xactor_f_rd_data_first__4_BITS_31_TO_0__ETC___d103 or
	  memory_xactor_f_rd_data_first__4_BITS_31_TO_0__ETC__q1 or
	  memory_xactor_f_rd_data_first__4_BITS_31_TO_0__ETC__q2)
  begin
    case (ff_mem_request_D_OUT[2:1])
      2'd0:
	  CASE_ff_mem_requestD_OUT_BITS_2_TO_1_0_IF_ff__ETC__q3 =
	      ff_mem_request_D_OUT[3] ?
		{ 24'd0,
		  memory_xactor_f_rd_data_first__4_BITS_31_TO_0__ETC___d103[7:0] } :
		{ {24{memory_xactor_f_rd_data_first__4_BITS_31_TO_0__ETC__q1[7]}},
		  memory_xactor_f_rd_data_first__4_BITS_31_TO_0__ETC__q1 };
      2'd1:
	  CASE_ff_mem_requestD_OUT_BITS_2_TO_1_0_IF_ff__ETC__q3 =
	      ff_mem_request_D_OUT[3] ?
		{ 16'd0,
		  memory_xactor_f_rd_data_first__4_BITS_31_TO_0__ETC___d103[15:0] } :
		{ {16{memory_xactor_f_rd_data_first__4_BITS_31_TO_0__ETC__q2[15]}},
		  memory_xactor_f_rd_data_first__4_BITS_31_TO_0__ETC__q2 };
      default: CASE_ff_mem_requestD_OUT_BITS_2_TO_1_0_IF_ff__ETC__q3 =
		   memory_xactor_f_rd_data_first__4_BITS_31_TO_0__ETC___d103;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_abst_response <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	rg_wEpoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (rg_abst_response_EN)
	  rg_abst_response <= `BSV_ASSIGNMENT_DELAY rg_abst_response_D_IN;
	if (rg_wEpoch_EN) rg_wEpoch <= `BSV_ASSIGNMENT_DELAY rg_wEpoch_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_abst_response = 33'h0AAAAAAAA;
    rg_wEpoch = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkeclass_axi4lite

